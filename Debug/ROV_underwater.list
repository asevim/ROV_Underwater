
ROV_underwater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08009cd0  08009cd0  00019cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fd8  08009fd8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  08009fd8  08009fd8  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fd8  08009fd8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd8  08009fd8  00019fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fdc  08009fdc  00019fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009fe0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001f8  0800a1d8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800a1d8  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001325e  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260a  00000000  00000000  0003347f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001188  00000000  00000000  00035a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  00036c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000164e9  00000000  00000000  00037c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cfbe  00000000  00000000  0004e181  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d39c  00000000  00000000  0005b13f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d84db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000579c  00000000  00000000  000d8558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009cb8 	.word	0x08009cb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08009cb8 	.word	0x08009cb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x28>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f001 fa67 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f005 fe86 	bl	8006e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fa83 	bl	8002672 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f001 fa47 	bl	8002616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000020 	.word	0x20000020
 80011a0:	20000004 	.word	0x20000004
 80011a4:	20000000 	.word	0x20000000

080011a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x1c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x20>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x20>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000004 	.word	0x20000004
 80011c8:	20000278 	.word	0x20000278

080011cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b02      	ldr	r3, [pc, #8]	; (80011dc <HAL_GetTick+0x10>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000278 	.word	0x20000278

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff fff0 	bl	80011cc <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_Delay+0x40>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffe0 	bl	80011cc <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0be      	b.n	80013c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2b00      	cmp	r3, #0
 8001252:	d109      	bne.n	8001268 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f005 fe22 	bl	8006eac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 faf7 	bl	800185c <ADC_ConversionStop_Disable>
 800126e:	4603      	mov	r3, r0
 8001270:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 8099 	bne.w	80013b2 <HAL_ADC_Init+0x18e>
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 8095 	bne.w	80013b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001290:	f023 0302 	bic.w	r3, r3, #2
 8001294:	f043 0202 	orr.w	r2, r3, #2
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7b1b      	ldrb	r3, [r3, #12]
 80012aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012bc:	d003      	beq.n	80012c6 <HAL_ADC_Init+0xa2>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d102      	bne.n	80012cc <HAL_ADC_Init+0xa8>
 80012c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ca:	e000      	b.n	80012ce <HAL_ADC_Init+0xaa>
 80012cc:	2300      	movs	r3, #0
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7d1b      	ldrb	r3, [r3, #20]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d119      	bne.n	8001310 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7b1b      	ldrb	r3, [r3, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d109      	bne.n	80012f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	035a      	lsls	r2, r3, #13
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	e00b      	b.n	8001310 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	f043 0220 	orr.w	r2, r3, #32
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	f043 0201 	orr.w	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	430a      	orrs	r2, r1
 8001322:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_ADC_Init+0x1a8>)
 800132c:	4013      	ands	r3, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	430b      	orrs	r3, r1
 8001336:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001340:	d003      	beq.n	800134a <HAL_ADC_Init+0x126>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d104      	bne.n	8001354 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	3b01      	subs	r3, #1
 8001350:	051b      	lsls	r3, r3, #20
 8001352:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	430a      	orrs	r2, r1
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_ADC_Init+0x1ac>)
 8001370:	4013      	ands	r3, r2
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	429a      	cmp	r2, r3
 8001376:	d10b      	bne.n	8001390 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	f023 0303 	bic.w	r3, r3, #3
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800138e:	e018      	b.n	80013c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	f023 0312 	bic.w	r3, r3, #18
 8001398:	f043 0210 	orr.w	r2, r3, #16
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013b0:	e007      	b.n	80013c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	f043 0210 	orr.w	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	ffe1f7fd 	.word	0xffe1f7fd
 80013d0:	ff1f0efe 	.word	0xff1f0efe

080013d4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a64      	ldr	r2, [pc, #400]	; (800157c <HAL_ADC_Start_DMA+0x1a8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d004      	beq.n	80013f8 <HAL_ADC_Start_DMA+0x24>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a63      	ldr	r2, [pc, #396]	; (8001580 <HAL_ADC_Start_DMA+0x1ac>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d106      	bne.n	8001406 <HAL_ADC_Start_DMA+0x32>
 80013f8:	4b60      	ldr	r3, [pc, #384]	; (800157c <HAL_ADC_Start_DMA+0x1a8>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001400:	2b00      	cmp	r3, #0
 8001402:	f040 80b3 	bne.w	800156c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_ADC_Start_DMA+0x40>
 8001410:	2302      	movs	r3, #2
 8001412:	e0ae      	b.n	8001572 <HAL_ADC_Start_DMA+0x19e>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 f9cb 	bl	80017b8 <ADC_Enable>
 8001422:	4603      	mov	r3, r0
 8001424:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	2b00      	cmp	r3, #0
 800142a:	f040 809a 	bne.w	8001562 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a4e      	ldr	r2, [pc, #312]	; (8001580 <HAL_ADC_Start_DMA+0x1ac>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d105      	bne.n	8001458 <HAL_ADC_Start_DMA+0x84>
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <HAL_ADC_Start_DMA+0x1a8>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d115      	bne.n	8001484 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146e:	2b00      	cmp	r3, #0
 8001470:	d026      	beq.n	80014c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800147a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001482:	e01d      	b.n	80014c0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a39      	ldr	r2, [pc, #228]	; (800157c <HAL_ADC_Start_DMA+0x1a8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d004      	beq.n	80014a4 <HAL_ADC_Start_DMA+0xd0>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a38      	ldr	r2, [pc, #224]	; (8001580 <HAL_ADC_Start_DMA+0x1ac>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d10d      	bne.n	80014c0 <HAL_ADC_Start_DMA+0xec>
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_ADC_Start_DMA+0x1a8>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f023 0206 	bic.w	r2, r3, #6
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d8:	e002      	b.n	80014e0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a25      	ldr	r2, [pc, #148]	; (8001584 <HAL_ADC_Start_DMA+0x1b0>)
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a24      	ldr	r2, [pc, #144]	; (8001588 <HAL_ADC_Start_DMA+0x1b4>)
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a23      	ldr	r2, [pc, #140]	; (800158c <HAL_ADC_Start_DMA+0x1b8>)
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f06f 0202 	mvn.w	r2, #2
 8001508:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001518:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a18      	ldr	r0, [r3, #32]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	334c      	adds	r3, #76	; 0x4c
 8001524:	4619      	mov	r1, r3
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f001 f909 	bl	8002740 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001538:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800153c:	d108      	bne.n	8001550 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800154c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800154e:	e00f      	b.n	8001570 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800155e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001560:	e006      	b.n	8001570 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800156a:	e001      	b.n	8001570 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001570:	7dfb      	ldrb	r3, [r7, #23]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40012400 	.word	0x40012400
 8001580:	40012800 	.word	0x40012800
 8001584:	080018d1 	.word	0x080018d1
 8001588:	0800194d 	.word	0x0800194d
 800158c:	08001969 	.word	0x08001969

08001590 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x20>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e0dc      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x1da>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b06      	cmp	r3, #6
 80015f6:	d81c      	bhi.n	8001632 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	3b05      	subs	r3, #5
 800160a:	221f      	movs	r2, #31
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b05      	subs	r3, #5
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	635a      	str	r2, [r3, #52]	; 0x34
 8001630:	e03c      	b.n	80016ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d81c      	bhi.n	8001674 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	3b23      	subs	r3, #35	; 0x23
 800164c:	221f      	movs	r2, #31
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	4019      	ands	r1, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3b23      	subs	r3, #35	; 0x23
 8001666:	fa00 f203 	lsl.w	r2, r0, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
 8001672:	e01b      	b.n	80016ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b41      	subs	r3, #65	; 0x41
 8001686:	221f      	movs	r2, #31
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b41      	subs	r3, #65	; 0x41
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b09      	cmp	r3, #9
 80016b2:	d91c      	bls.n	80016ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68d9      	ldr	r1, [r3, #12]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	3b1e      	subs	r3, #30
 80016c6:	2207      	movs	r2, #7
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4019      	ands	r1, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6898      	ldr	r0, [r3, #8]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	3b1e      	subs	r3, #30
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	e019      	b.n	8001722 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6919      	ldr	r1, [r3, #16]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	2207      	movs	r2, #7
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	4019      	ands	r1, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6898      	ldr	r0, [r3, #8]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	fa00 f203 	lsl.w	r2, r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b10      	cmp	r3, #16
 8001728:	d003      	beq.n	8001732 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800172e:	2b11      	cmp	r3, #17
 8001730:	d132      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_ADC_ConfigChannel+0x1e4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d125      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d126      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001758:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b10      	cmp	r3, #16
 8001760:	d11a      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	0c9a      	lsrs	r2, r3, #18
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001778:	e002      	b.n	8001780 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3b01      	subs	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f9      	bne.n	800177a <HAL_ADC_ConfigChannel+0x1b2>
 8001786:	e007      	b.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f043 0220 	orr.w	r2, r3, #32
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40012400 	.word	0x40012400
 80017b0:	20000020 	.word	0x20000020
 80017b4:	431bde83 	.word	0x431bde83

080017b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d039      	beq.n	800184a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0201 	orr.w	r2, r2, #1
 80017e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <ADC_Enable+0x9c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <ADC_Enable+0xa0>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9b      	lsrs	r3, r3, #18
 80017f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017f4:	e002      	b.n	80017fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001802:	f7ff fce3 	bl	80011cc <HAL_GetTick>
 8001806:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001808:	e018      	b.n	800183c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800180a:	f7ff fcdf 	bl	80011cc <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d911      	bls.n	800183c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f043 0210 	orr.w	r2, r3, #16
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e007      	b.n	800184c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d1df      	bne.n	800180a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000020 	.word	0x20000020
 8001858:	431bde83 	.word	0x431bde83

0800185c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d127      	bne.n	80018c6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001886:	f7ff fca1 	bl	80011cc <HAL_GetTick>
 800188a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800188c:	e014      	b.n	80018b8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800188e:	f7ff fc9d 	bl	80011cc <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d90d      	bls.n	80018b8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f043 0210 	orr.w	r2, r3, #16
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e007      	b.n	80018c8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d0e3      	beq.n	800188e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d127      	bne.n	800193a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001900:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001904:	d115      	bne.n	8001932 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800190a:	2b00      	cmp	r3, #0
 800190c:	d111      	bne.n	8001932 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff fe2c 	bl	8001590 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001938:	e004      	b.n	8001944 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff fe21 	bl	80015a2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	f043 0204 	orr.w	r2, r3, #4
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff fe10 	bl	80015b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0ed      	b.n	8001b8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f005 fade 	bl	8006f7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0202 	bic.w	r2, r2, #2
 80019ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d0:	f7ff fbfc 	bl	80011cc <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019d6:	e012      	b.n	80019fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d8:	f7ff fbf8 	bl	80011cc <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b0a      	cmp	r3, #10
 80019e4:	d90b      	bls.n	80019fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2205      	movs	r2, #5
 80019f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0c5      	b.n	8001b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e5      	bne.n	80019d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a1c:	f7ff fbd6 	bl	80011cc <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a22:	e012      	b.n	8001a4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a24:	f7ff fbd2 	bl	80011cc <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b0a      	cmp	r3, #10
 8001a30:	d90b      	bls.n	8001a4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2205      	movs	r2, #5
 8001a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e09f      	b.n	8001b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0e5      	beq.n	8001a24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7e1b      	ldrb	r3, [r3, #24]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d108      	bne.n	8001a72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e007      	b.n	8001a82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7e5b      	ldrb	r3, [r3, #25]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e007      	b.n	8001aac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7e9b      	ldrb	r3, [r3, #26]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d108      	bne.n	8001ac6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0220 	orr.w	r2, r2, #32
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e007      	b.n	8001ad6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0220 	bic.w	r2, r2, #32
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7edb      	ldrb	r3, [r3, #27]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d108      	bne.n	8001af0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0210 	bic.w	r2, r2, #16
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e007      	b.n	8001b00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0210 	orr.w	r2, r2, #16
 8001afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7f1b      	ldrb	r3, [r3, #28]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d108      	bne.n	8001b1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0208 	orr.w	r2, r2, #8
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e007      	b.n	8001b2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0208 	bic.w	r2, r2, #8
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7f5b      	ldrb	r3, [r3, #29]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d108      	bne.n	8001b44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0204 	orr.w	r2, r2, #4
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e007      	b.n	8001b54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0204 	bic.w	r2, r2, #4
 8001b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	ea42 0103 	orr.w	r1, r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001baa:	7cfb      	ldrb	r3, [r7, #19]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d003      	beq.n	8001bb8 <HAL_CAN_ConfigFilter+0x26>
 8001bb0:	7cfb      	ldrb	r3, [r7, #19]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	f040 80aa 	bne.w	8001d0c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d123      	bne.n	8001c3a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3248      	adds	r2, #72	; 0x48
 8001c1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c30:	6979      	ldr	r1, [r7, #20]
 8001c32:	3348      	adds	r3, #72	; 0x48
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d122      	bne.n	8001c88 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3248      	adds	r2, #72	; 0x48
 8001c68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c7e:	6979      	ldr	r1, [r7, #20]
 8001c80:	3348      	adds	r3, #72	; 0x48
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ca2:	e007      	b.n	8001cb4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001cce:	e007      	b.n	8001ce0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cfe:	f023 0201 	bic.w	r2, r3, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e006      	b.n	8001d1a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
  }
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d12e      	bne.n	8001d96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d50:	f7ff fa3c 	bl	80011cc <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d56:	e012      	b.n	8001d7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d58:	f7ff fa38 	bl	80011cc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b0a      	cmp	r3, #10
 8001d64:	d90b      	bls.n	8001d7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e012      	b.n	8001da4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e5      	bne.n	8001d58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e006      	b.n	8001da4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d003      	beq.n	8001dd0 <HAL_CAN_GetRxMessage+0x24>
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	f040 80f3 	bne.w	8001fb6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10e      	bne.n	8001df4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d116      	bne.n	8001e12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0e7      	b.n	8001fc4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0d8      	b.n	8001fc4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	331b      	adds	r3, #27
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0204 	and.w	r2, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10c      	bne.n	8001e4a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	331b      	adds	r3, #27
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	4413      	add	r3, r2
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0d5b      	lsrs	r3, r3, #21
 8001e40:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e00b      	b.n	8001e62 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	331b      	adds	r3, #27
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	331b      	adds	r3, #27
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4413      	add	r3, r2
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0202 	and.w	r2, r3, #2
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	331b      	adds	r3, #27
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	331b      	adds	r3, #27
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	331b      	adds	r3, #27
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0a1a      	lsrs	r2, r3, #8
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0c1a      	lsrs	r2, r3, #16
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	3302      	adds	r3, #2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0e1a      	lsrs	r2, r3, #24
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3303      	adds	r3, #3
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	3304      	adds	r3, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0a1a      	lsrs	r2, r3, #8
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	3305      	adds	r3, #5
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0c1a      	lsrs	r2, r3, #16
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	3306      	adds	r3, #6
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e1a      	lsrs	r2, r3, #24
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3307      	adds	r3, #7
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d108      	bne.n	8001fa2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0220 	orr.w	r2, r2, #32
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	e007      	b.n	8001fb2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0220 	orr.w	r2, r2, #32
 8001fb0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e006      	b.n	8001fc4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
  }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fde:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d002      	beq.n	8001fec <HAL_CAN_ActivateNotification+0x1e>
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d109      	bne.n	8002000 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6959      	ldr	r1, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e006      	b.n	800200e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d07c      	beq.n	8002158 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d023      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f004 f92e 	bl	80062dc <HAL_CAN_TxMailbox0CompleteCallback>
 8002080:	e016      	b.n	80020b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	e00c      	b.n	80020b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
 80020a8:	e002      	b.n	80020b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f977 	bl	800239e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d024      	beq.n	8002104 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f953 	bl	800237a <HAL_CAN_TxMailbox1CompleteCallback>
 80020d4:	e016      	b.n	8002104 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
 80020e8:	e00c      	b.n	8002104 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	e002      	b.n	8002104 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f956 	bl	80023b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d024      	beq.n	8002158 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002116:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f932 	bl	800238c <HAL_CAN_TxMailbox2CompleteCallback>
 8002128:	e016      	b.n	8002158 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	e00c      	b.n	8002158 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
 8002150:	e002      	b.n	8002158 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f935 	bl	80023c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002172:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2210      	movs	r2, #16
 800217a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2208      	movs	r2, #8
 8002196:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f91b 	bl	80023d4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f004 f8a0 	bl	80062fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00c      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2210      	movs	r2, #16
 80021de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2208      	movs	r2, #8
 80021fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f8fb 	bl	80023f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	d009      	beq.n	8002220 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8e3 	bl	80023e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2210      	movs	r2, #16
 800223a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f8e4 	bl	800240a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2208      	movs	r2, #8
 800225c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8dc 	bl	800241c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d075      	beq.n	800235a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d06c      	beq.n	8002352 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03d      	beq.n	8002352 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d038      	beq.n	8002352 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022e6:	2b30      	cmp	r3, #48	; 0x30
 80022e8:	d017      	beq.n	800231a <HAL_CAN_IRQHandler+0x302>
 80022ea:	2b30      	cmp	r3, #48	; 0x30
 80022ec:	d804      	bhi.n	80022f8 <HAL_CAN_IRQHandler+0x2e0>
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d009      	beq.n	8002306 <HAL_CAN_IRQHandler+0x2ee>
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d00c      	beq.n	8002310 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022f6:	e024      	b.n	8002342 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80022f8:	2b50      	cmp	r3, #80	; 0x50
 80022fa:	d018      	beq.n	800232e <HAL_CAN_IRQHandler+0x316>
 80022fc:	2b60      	cmp	r3, #96	; 0x60
 80022fe:	d01b      	beq.n	8002338 <HAL_CAN_IRQHandler+0x320>
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d00f      	beq.n	8002324 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002304:	e01d      	b.n	8002342 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800230e:	e018      	b.n	8002342 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f043 0310 	orr.w	r3, r3, #16
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002318:	e013      	b.n	8002342 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f043 0320 	orr.w	r3, r3, #32
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002322:	e00e      	b.n	8002342 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800232c:	e009      	b.n	8002342 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002336:	e004      	b.n	8002342 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002340:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002350:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2204      	movs	r2, #4
 8002358:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f85e 	bl	800242e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4906      	ldr	r1, [pc, #24]	; (80024d8 <__NVIC_EnableIRQ+0x34>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100

080024dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db0a      	blt.n	8002506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	490c      	ldr	r1, [pc, #48]	; (8002528 <__NVIC_SetPriority+0x4c>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	440b      	add	r3, r1
 8002500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002504:	e00a      	b.n	800251c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4908      	ldr	r1, [pc, #32]	; (800252c <__NVIC_SetPriority+0x50>)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	3b04      	subs	r3, #4
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	440b      	add	r3, r1
 800251a:	761a      	strb	r2, [r3, #24]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f1c3 0307 	rsb	r3, r3, #7
 800254a:	2b04      	cmp	r3, #4
 800254c:	bf28      	it	cs
 800254e:	2304      	movcs	r3, #4
 8002550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3304      	adds	r3, #4
 8002556:	2b06      	cmp	r3, #6
 8002558:	d902      	bls.n	8002560 <NVIC_EncodePriority+0x30>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3b03      	subs	r3, #3
 800255e:	e000      	b.n	8002562 <NVIC_EncodePriority+0x32>
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43d9      	mvns	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	4313      	orrs	r3, r2
         );
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002598:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <__NVIC_SystemReset+0x20>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <__NVIC_SystemReset+0x20>)
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_SystemReset+0x24>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60cb      	str	r3, [r1, #12]
 80025ac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <__NVIC_SystemReset+0x1c>
 80025b4:	e000ed00 	.word	0xe000ed00
 80025b8:	05fa0004 	.word	0x05fa0004

080025bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025cc:	d301      	bcc.n	80025d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <SysTick_Config+0x40>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025da:	210f      	movs	r1, #15
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f7ff ff7c 	bl	80024dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <SysTick_Config+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SysTick_Config+0x40>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff19 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002628:	f7ff ff2e 	bl	8002488 <__NVIC_GetPriorityGrouping>
 800262c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f7ff ff7c 	bl	8002530 <NVIC_EncodePriority>
 8002638:	4602      	mov	r2, r0
 800263a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff4b 	bl	80024dc <__NVIC_SetPriority>
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff21 	bl	80024a4 <__NVIC_EnableIRQ>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800266e:	f7ff ff91 	bl	8002594 <__NVIC_SystemReset>

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ff9e 	bl	80025bc <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e043      	b.n	800272a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_DMA_Init+0xa8>)
 80026aa:	4413      	add	r3, r2
 80026ac:	4a22      	ldr	r2, [pc, #136]	; (8002738 <HAL_DMA_Init+0xac>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	009a      	lsls	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a1f      	ldr	r2, [pc, #124]	; (800273c <HAL_DMA_Init+0xb0>)
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	bffdfff8 	.word	0xbffdfff8
 8002738:	cccccccd 	.word	0xcccccccd
 800273c:	40020000 	.word	0x40020000

08002740 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Start_IT+0x20>
 800275c:	2302      	movs	r3, #2
 800275e:	e04a      	b.n	80027f6 <HAL_DMA_Start_IT+0xb6>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800276e:	2b01      	cmp	r3, #1
 8002770:	d13a      	bne.n	80027e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2202      	movs	r2, #2
 8002776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f938 	bl	8002a0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 020e 	orr.w	r2, r2, #14
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e00f      	b.n	80027d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0204 	bic.w	r2, r2, #4
 80027c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 020a 	orr.w	r2, r2, #10
 80027d4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e005      	b.n	80027f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027f0:	2302      	movs	r3, #2
 80027f2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	2204      	movs	r2, #4
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d04f      	beq.n	80028c8 <HAL_DMA_IRQHandler+0xc8>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d04a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0204 	bic.w	r2, r2, #4
 800284e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a66      	ldr	r2, [pc, #408]	; (80029f0 <HAL_DMA_IRQHandler+0x1f0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d029      	beq.n	80028ae <HAL_DMA_IRQHandler+0xae>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a65      	ldr	r2, [pc, #404]	; (80029f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d022      	beq.n	80028aa <HAL_DMA_IRQHandler+0xaa>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a63      	ldr	r2, [pc, #396]	; (80029f8 <HAL_DMA_IRQHandler+0x1f8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01a      	beq.n	80028a4 <HAL_DMA_IRQHandler+0xa4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a62      	ldr	r2, [pc, #392]	; (80029fc <HAL_DMA_IRQHandler+0x1fc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d012      	beq.n	800289e <HAL_DMA_IRQHandler+0x9e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a60      	ldr	r2, [pc, #384]	; (8002a00 <HAL_DMA_IRQHandler+0x200>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00a      	beq.n	8002898 <HAL_DMA_IRQHandler+0x98>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a5f      	ldr	r2, [pc, #380]	; (8002a04 <HAL_DMA_IRQHandler+0x204>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d102      	bne.n	8002892 <HAL_DMA_IRQHandler+0x92>
 800288c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002890:	e00e      	b.n	80028b0 <HAL_DMA_IRQHandler+0xb0>
 8002892:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002896:	e00b      	b.n	80028b0 <HAL_DMA_IRQHandler+0xb0>
 8002898:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800289c:	e008      	b.n	80028b0 <HAL_DMA_IRQHandler+0xb0>
 800289e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028a2:	e005      	b.n	80028b0 <HAL_DMA_IRQHandler+0xb0>
 80028a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a8:	e002      	b.n	80028b0 <HAL_DMA_IRQHandler+0xb0>
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	e000      	b.n	80028b0 <HAL_DMA_IRQHandler+0xb0>
 80028ae:	2304      	movs	r3, #4
 80028b0:	4a55      	ldr	r2, [pc, #340]	; (8002a08 <HAL_DMA_IRQHandler+0x208>)
 80028b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8094 	beq.w	80029e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028c6:	e08e      	b.n	80029e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	2202      	movs	r2, #2
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d056      	beq.n	8002986 <HAL_DMA_IRQHandler+0x186>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d051      	beq.n	8002986 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 020a 	bic.w	r2, r2, #10
 80028fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a38      	ldr	r2, [pc, #224]	; (80029f0 <HAL_DMA_IRQHandler+0x1f0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d029      	beq.n	8002966 <HAL_DMA_IRQHandler+0x166>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a37      	ldr	r2, [pc, #220]	; (80029f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <HAL_DMA_IRQHandler+0x162>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a35      	ldr	r2, [pc, #212]	; (80029f8 <HAL_DMA_IRQHandler+0x1f8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01a      	beq.n	800295c <HAL_DMA_IRQHandler+0x15c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a34      	ldr	r2, [pc, #208]	; (80029fc <HAL_DMA_IRQHandler+0x1fc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d012      	beq.n	8002956 <HAL_DMA_IRQHandler+0x156>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <HAL_DMA_IRQHandler+0x200>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00a      	beq.n	8002950 <HAL_DMA_IRQHandler+0x150>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a31      	ldr	r2, [pc, #196]	; (8002a04 <HAL_DMA_IRQHandler+0x204>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d102      	bne.n	800294a <HAL_DMA_IRQHandler+0x14a>
 8002944:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002948:	e00e      	b.n	8002968 <HAL_DMA_IRQHandler+0x168>
 800294a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800294e:	e00b      	b.n	8002968 <HAL_DMA_IRQHandler+0x168>
 8002950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002954:	e008      	b.n	8002968 <HAL_DMA_IRQHandler+0x168>
 8002956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800295a:	e005      	b.n	8002968 <HAL_DMA_IRQHandler+0x168>
 800295c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002960:	e002      	b.n	8002968 <HAL_DMA_IRQHandler+0x168>
 8002962:	2320      	movs	r3, #32
 8002964:	e000      	b.n	8002968 <HAL_DMA_IRQHandler+0x168>
 8002966:	2302      	movs	r3, #2
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_DMA_IRQHandler+0x208>)
 800296a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d034      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002984:	e02f      	b.n	80029e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2208      	movs	r2, #8
 800298c:	409a      	lsls	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d028      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x1e8>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d023      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 020e 	bic.w	r2, r2, #14
 80029ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f202 	lsl.w	r2, r1, r2
 80029be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
    }
  }
  return;
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
}
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40020008 	.word	0x40020008
 80029f4:	4002001c 	.word	0x4002001c
 80029f8:	40020030 	.word	0x40020030
 80029fc:	40020044 	.word	0x40020044
 8002a00:	40020058 	.word	0x40020058
 8002a04:	4002006c 	.word	0x4002006c
 8002a08:	40020000 	.word	0x40020000

08002a0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d108      	bne.n	8002a4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a4a:	e007      	b.n	8002a5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b08b      	sub	sp, #44	; 0x2c
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7a:	e127      	b.n	8002ccc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	f040 8116 	bne.w	8002cc6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b12      	cmp	r3, #18
 8002aa0:	d034      	beq.n	8002b0c <HAL_GPIO_Init+0xa4>
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d80d      	bhi.n	8002ac2 <HAL_GPIO_Init+0x5a>
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d02b      	beq.n	8002b02 <HAL_GPIO_Init+0x9a>
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d804      	bhi.n	8002ab8 <HAL_GPIO_Init+0x50>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d031      	beq.n	8002b16 <HAL_GPIO_Init+0xae>
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d01c      	beq.n	8002af0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ab6:	e048      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d043      	beq.n	8002b44 <HAL_GPIO_Init+0xdc>
 8002abc:	2b11      	cmp	r3, #17
 8002abe:	d01b      	beq.n	8002af8 <HAL_GPIO_Init+0x90>
          break;
 8002ac0:	e043      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ac2:	4a89      	ldr	r2, [pc, #548]	; (8002ce8 <HAL_GPIO_Init+0x280>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d026      	beq.n	8002b16 <HAL_GPIO_Init+0xae>
 8002ac8:	4a87      	ldr	r2, [pc, #540]	; (8002ce8 <HAL_GPIO_Init+0x280>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d806      	bhi.n	8002adc <HAL_GPIO_Init+0x74>
 8002ace:	4a87      	ldr	r2, [pc, #540]	; (8002cec <HAL_GPIO_Init+0x284>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d020      	beq.n	8002b16 <HAL_GPIO_Init+0xae>
 8002ad4:	4a86      	ldr	r2, [pc, #536]	; (8002cf0 <HAL_GPIO_Init+0x288>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01d      	beq.n	8002b16 <HAL_GPIO_Init+0xae>
          break;
 8002ada:	e036      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002adc:	4a85      	ldr	r2, [pc, #532]	; (8002cf4 <HAL_GPIO_Init+0x28c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d019      	beq.n	8002b16 <HAL_GPIO_Init+0xae>
 8002ae2:	4a85      	ldr	r2, [pc, #532]	; (8002cf8 <HAL_GPIO_Init+0x290>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d016      	beq.n	8002b16 <HAL_GPIO_Init+0xae>
 8002ae8:	4a84      	ldr	r2, [pc, #528]	; (8002cfc <HAL_GPIO_Init+0x294>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_GPIO_Init+0xae>
          break;
 8002aee:	e02c      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	623b      	str	r3, [r7, #32]
          break;
 8002af6:	e028      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	3304      	adds	r3, #4
 8002afe:	623b      	str	r3, [r7, #32]
          break;
 8002b00:	e023      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	3308      	adds	r3, #8
 8002b08:	623b      	str	r3, [r7, #32]
          break;
 8002b0a:	e01e      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	330c      	adds	r3, #12
 8002b12:	623b      	str	r3, [r7, #32]
          break;
 8002b14:	e019      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	623b      	str	r3, [r7, #32]
          break;
 8002b22:	e012      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	611a      	str	r2, [r3, #16]
          break;
 8002b36:	e008      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b38:	2308      	movs	r3, #8
 8002b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	615a      	str	r2, [r3, #20]
          break;
 8002b42:	e002      	b.n	8002b4a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b44:	2300      	movs	r3, #0
 8002b46:	623b      	str	r3, [r7, #32]
          break;
 8002b48:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	2bff      	cmp	r3, #255	; 0xff
 8002b4e:	d801      	bhi.n	8002b54 <HAL_GPIO_Init+0xec>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	e001      	b.n	8002b58 <HAL_GPIO_Init+0xf0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2bff      	cmp	r3, #255	; 0xff
 8002b5e:	d802      	bhi.n	8002b66 <HAL_GPIO_Init+0xfe>
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x104>
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3b08      	subs	r3, #8
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	210f      	movs	r1, #15
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	6a39      	ldr	r1, [r7, #32]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	431a      	orrs	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8096 	beq.w	8002cc6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b9a:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_GPIO_Init+0x298>)
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <HAL_GPIO_Init+0x298>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6193      	str	r3, [r2, #24]
 8002ba6:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <HAL_GPIO_Init+0x298>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bb2:	4a54      	ldr	r2, [pc, #336]	; (8002d04 <HAL_GPIO_Init+0x29c>)
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	; (8002d08 <HAL_GPIO_Init+0x2a0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0x19e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4a      	ldr	r2, [pc, #296]	; (8002d0c <HAL_GPIO_Init+0x2a4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00d      	beq.n	8002c02 <HAL_GPIO_Init+0x19a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a49      	ldr	r2, [pc, #292]	; (8002d10 <HAL_GPIO_Init+0x2a8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <HAL_GPIO_Init+0x196>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a48      	ldr	r2, [pc, #288]	; (8002d14 <HAL_GPIO_Init+0x2ac>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_GPIO_Init+0x192>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x1a0>
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	e004      	b.n	8002c08 <HAL_GPIO_Init+0x1a0>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e002      	b.n	8002c08 <HAL_GPIO_Init+0x1a0>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x1a0>
 8002c06:	2300      	movs	r3, #0
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	f002 0203 	and.w	r2, r2, #3
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4093      	lsls	r3, r2
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c18:	493a      	ldr	r1, [pc, #232]	; (8002d04 <HAL_GPIO_Init+0x29c>)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c32:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4938      	ldr	r1, [pc, #224]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
 8002c3e:	e006      	b.n	8002c4e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	4933      	ldr	r1, [pc, #204]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	492e      	ldr	r1, [pc, #184]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
 8002c66:	e006      	b.n	8002c76 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	4929      	ldr	r1, [pc, #164]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	4924      	ldr	r1, [pc, #144]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
 8002c8e:	e006      	b.n	8002c9e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	491f      	ldr	r1, [pc, #124]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d006      	beq.n	8002cb8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	491a      	ldr	r1, [pc, #104]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60cb      	str	r3, [r1, #12]
 8002cb6:	e006      	b.n	8002cc6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cb8:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	4915      	ldr	r1, [pc, #84]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	3301      	adds	r3, #1
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f47f aed0 	bne.w	8002a7c <HAL_GPIO_Init+0x14>
  }
}
 8002cdc:	bf00      	nop
 8002cde:	372c      	adds	r7, #44	; 0x2c
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	10210000 	.word	0x10210000
 8002cec:	10110000 	.word	0x10110000
 8002cf0:	10120000 	.word	0x10120000
 8002cf4:	10310000 	.word	0x10310000
 8002cf8:	10320000 	.word	0x10320000
 8002cfc:	10220000 	.word	0x10220000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40010800 	.word	0x40010800
 8002d0c:	40010c00 	.word	0x40010c00
 8002d10:	40011000 	.word	0x40011000
 8002d14:	40011400 	.word	0x40011400
 8002d18:	40010400 	.word	0x40010400

08002d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
 8002d38:	e001      	b.n	8002d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	807b      	strh	r3, [r7, #2]
 8002d56:	4613      	mov	r3, r2
 8002d58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d5a:	787b      	ldrb	r3, [r7, #1]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d60:	887a      	ldrh	r2, [r7, #2]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d66:	e003      	b.n	8002d70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	041a      	lsls	r2, r3, #16
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	611a      	str	r2, [r3, #16]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002d98:	e002      	b.n	8002da0 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	611a      	str	r2, [r3, #16]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e10f      	b.n	8002fde <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f004 f942 	bl	800705c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df0:	f001 fc30 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a7b      	ldr	r2, [pc, #492]	; (8002fe8 <HAL_I2C_Init+0x23c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d807      	bhi.n	8002e10 <HAL_I2C_Init+0x64>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a7a      	ldr	r2, [pc, #488]	; (8002fec <HAL_I2C_Init+0x240>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e006      	b.n	8002e1e <HAL_I2C_Init+0x72>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a77      	ldr	r2, [pc, #476]	; (8002ff0 <HAL_I2C_Init+0x244>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bf94      	ite	ls
 8002e18:	2301      	movls	r3, #1
 8002e1a:	2300      	movhi	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0db      	b.n	8002fde <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a72      	ldr	r2, [pc, #456]	; (8002ff4 <HAL_I2C_Init+0x248>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0c9b      	lsrs	r3, r3, #18
 8002e30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a64      	ldr	r2, [pc, #400]	; (8002fe8 <HAL_I2C_Init+0x23c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d802      	bhi.n	8002e60 <HAL_I2C_Init+0xb4>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	e009      	b.n	8002e74 <HAL_I2C_Init+0xc8>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <HAL_I2C_Init+0x24c>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	3301      	adds	r3, #1
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4956      	ldr	r1, [pc, #344]	; (8002fe8 <HAL_I2C_Init+0x23c>)
 8002e90:	428b      	cmp	r3, r1
 8002e92:	d80d      	bhi.n	8002eb0 <HAL_I2C_Init+0x104>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e59      	subs	r1, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	bf38      	it	cc
 8002eac:	2304      	movcc	r3, #4
 8002eae:	e04f      	b.n	8002f50 <HAL_I2C_Init+0x1a4>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d111      	bne.n	8002edc <HAL_I2C_Init+0x130>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e012      	b.n	8002f02 <HAL_I2C_Init+0x156>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Init+0x15e>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e022      	b.n	8002f50 <HAL_I2C_Init+0x1a4>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10e      	bne.n	8002f30 <HAL_I2C_Init+0x184>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e58      	subs	r0, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	440b      	add	r3, r1
 8002f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2e:	e00f      	b.n	8002f50 <HAL_I2C_Init+0x1a4>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e58      	subs	r0, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	0099      	lsls	r1, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6809      	ldr	r1, [r1, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6911      	ldr	r1, [r2, #16]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	4311      	orrs	r1, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	000186a0 	.word	0x000186a0
 8002fec:	001e847f 	.word	0x001e847f
 8002ff0:	003d08ff 	.word	0x003d08ff
 8002ff4:	431bde83 	.word	0x431bde83
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	461a      	mov	r2, r3
 8003008:	460b      	mov	r3, r1
 800300a:	817b      	strh	r3, [r7, #10]
 800300c:	4613      	mov	r3, r2
 800300e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003010:	f7fe f8dc 	bl	80011cc <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b20      	cmp	r3, #32
 8003020:	f040 80e0 	bne.w	80031e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2319      	movs	r3, #25
 800302a:	2201      	movs	r2, #1
 800302c:	4970      	ldr	r1, [pc, #448]	; (80031f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fd5e 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800303a:	2302      	movs	r3, #2
 800303c:	e0d3      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_I2C_Master_Transmit+0x50>
 8003048:	2302      	movs	r3, #2
 800304a:	e0cc      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x1ea>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b01      	cmp	r3, #1
 8003060:	d007      	beq.n	8003072 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0201 	orr.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2221      	movs	r2, #33	; 0x21
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2210      	movs	r2, #16
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	893a      	ldrh	r2, [r7, #8]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a50      	ldr	r2, [pc, #320]	; (80031f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fbec 	bl	8003898 <I2C_MasterRequestWrite>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e08d      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030e0:	e066      	b.n	80031b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	6a39      	ldr	r1, [r7, #32]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fdd8 	bl	8003c9c <I2C_WaitOnTXEFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d107      	bne.n	800310a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06b      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d11b      	bne.n	8003184 <HAL_I2C_Master_Transmit+0x188>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	d017      	beq.n	8003184 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	6a39      	ldr	r1, [r7, #32]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fdc8 	bl	8003d1e <I2C_WaitOnBTFFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2b04      	cmp	r3, #4
 800319a:	d107      	bne.n	80031ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e01a      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d194      	bne.n	80030e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	00100002 	.word	0x00100002
 80031f4:	ffff0000 	.word	0xffff0000

080031f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	; 0x30
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	461a      	mov	r2, r3
 8003204:	460b      	mov	r3, r1
 8003206:	817b      	strh	r3, [r7, #10]
 8003208:	4613      	mov	r3, r2
 800320a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7fd ffde 	bl	80011cc <HAL_GetTick>
 8003210:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b20      	cmp	r3, #32
 800321c:	f040 8213 	bne.w	8003646 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2319      	movs	r3, #25
 8003226:	2201      	movs	r2, #1
 8003228:	497e      	ldr	r1, [pc, #504]	; (8003424 <HAL_I2C_Master_Receive+0x22c>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fc60 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003236:	2302      	movs	r3, #2
 8003238:	e206      	b.n	8003648 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_I2C_Master_Receive+0x50>
 8003244:	2302      	movs	r3, #2
 8003246:	e1ff      	b.n	8003648 <HAL_I2C_Master_Receive+0x450>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d007      	beq.n	800326e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2222      	movs	r2, #34	; 0x22
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2210      	movs	r2, #16
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	893a      	ldrh	r2, [r7, #8]
 800329e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a5e      	ldr	r2, [pc, #376]	; (8003428 <HAL_I2C_Master_Receive+0x230>)
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032b0:	8979      	ldrh	r1, [r7, #10]
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fb64 	bl	8003984 <I2C_MasterRequestRead>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1c0      	b.n	8003648 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d113      	bne.n	80032f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e194      	b.n	8003620 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d11d      	bne.n	800333a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800330e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003336:	b662      	cpsie	i
 8003338:	e172      	b.n	8003620 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b02      	cmp	r3, #2
 8003340:	d11d      	bne.n	800337e <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003350:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003352:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003378:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800337a:	b662      	cpsie	i
 800337c:	e150      	b.n	8003620 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033a4:	e13c      	b.n	8003620 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	f200 80f5 	bhi.w	800359a <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d123      	bne.n	8003400 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fcef 	bl	8003da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e13d      	b.n	8003648 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033fe:	e10f      	b.n	8003620 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	2b02      	cmp	r3, #2
 8003406:	d150      	bne.n	80034aa <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	2200      	movs	r2, #0
 8003410:	4906      	ldr	r1, [pc, #24]	; (800342c <HAL_I2C_Master_Receive+0x234>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fb6c 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e112      	b.n	8003648 <HAL_I2C_Master_Receive+0x450>
 8003422:	bf00      	nop
 8003424:	00100002 	.word	0x00100002
 8003428:	ffff0000 	.word	0xffff0000
 800342c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003430:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003474:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a8:	e0ba      	b.n	8003620 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	2200      	movs	r2, #0
 80034b2:	4967      	ldr	r1, [pc, #412]	; (8003650 <HAL_I2C_Master_Receive+0x458>)
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fb1b 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0c1      	b.n	8003648 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034d4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	2200      	movs	r2, #0
 8003510:	494f      	ldr	r1, [pc, #316]	; (8003650 <HAL_I2C_Master_Receive+0x458>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 faec 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e092      	b.n	8003648 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003530:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003564:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003598:	e042      	b.n	8003620 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fbfe 	bl	8003da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e04c      	b.n	8003648 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d118      	bne.n	8003620 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f aebe 	bne.w	80033a6 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3728      	adds	r7, #40	; 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	00010004 	.word	0x00010004

08003654 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	460b      	mov	r3, r1
 8003662:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003664:	f7fd fdb2 	bl	80011cc <HAL_GetTick>
 8003668:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800366a:	2301      	movs	r3, #1
 800366c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b20      	cmp	r3, #32
 8003678:	f040 8105 	bne.w	8003886 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2319      	movs	r3, #25
 8003682:	2201      	movs	r2, #1
 8003684:	4982      	ldr	r1, [pc, #520]	; (8003890 <HAL_I2C_IsDeviceReady+0x23c>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fa32 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
 8003694:	e0f8      	b.n	8003888 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2C_IsDeviceReady+0x50>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0f1      	b.n	8003888 <HAL_I2C_IsDeviceReady+0x234>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d007      	beq.n	80036ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2224      	movs	r2, #36	; 0x24
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a6a      	ldr	r2, [pc, #424]	; (8003894 <HAL_I2C_IsDeviceReady+0x240>)
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2200      	movs	r2, #0
 8003706:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f9f0 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0b6      	b.n	8003888 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003728:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800372a:	f7fd fd4f 	bl	80011cc <HAL_GetTick>
 800372e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800375e:	e025      	b.n	80037ac <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fd fd34 	bl	80011cc <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <HAL_I2C_IsDeviceReady+0x122>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	22a0      	movs	r2, #160	; 0xa0
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2ba0      	cmp	r3, #160	; 0xa0
 80037b6:	d005      	beq.n	80037c4 <HAL_I2C_IsDeviceReady+0x170>
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d102      	bne.n	80037c4 <HAL_I2C_IsDeviceReady+0x170>
 80037be:	7dbb      	ldrb	r3, [r7, #22]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0cd      	beq.n	8003760 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d129      	bne.n	800382e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	2319      	movs	r3, #25
 8003806:	2201      	movs	r2, #1
 8003808:	4921      	ldr	r1, [pc, #132]	; (8003890 <HAL_I2C_IsDeviceReady+0x23c>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f970 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e036      	b.n	8003888 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e02c      	b.n	8003888 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003846:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2319      	movs	r3, #25
 800384e:	2201      	movs	r2, #1
 8003850:	490f      	ldr	r1, [pc, #60]	; (8003890 <HAL_I2C_IsDeviceReady+0x23c>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f94c 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e012      	b.n	8003888 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	3301      	adds	r3, #1
 8003866:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	f4ff af3e 	bcc.w	80036ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	00100002 	.word	0x00100002
 8003894:	ffff0000 	.word	0xffff0000

08003898 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	460b      	mov	r3, r1
 80038a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d006      	beq.n	80038c2 <I2C_MasterRequestWrite+0x2a>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d003      	beq.n	80038c2 <I2C_MasterRequestWrite+0x2a>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c0:	d108      	bne.n	80038d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e00b      	b.n	80038ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	2b12      	cmp	r3, #18
 80038da:	d107      	bne.n	80038ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f8f9 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e035      	b.n	8003974 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003910:	d108      	bne.n	8003924 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	e01b      	b.n	800395c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	11db      	asrs	r3, r3, #7
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0306 	and.w	r3, r3, #6
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f063 030f 	orn	r3, r3, #15
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <I2C_MasterRequestWrite+0xe4>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f92b 	bl	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e010      	b.n	8003974 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <I2C_MasterRequestWrite+0xe8>)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f91b 	bl	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	00010008 	.word	0x00010008
 8003980:	00010002 	.word	0x00010002

08003984 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	460b      	mov	r3, r1
 8003992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d006      	beq.n	80039be <I2C_MasterRequestRead+0x3a>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d003      	beq.n	80039be <I2C_MasterRequestRead+0x3a>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039bc:	d108      	bne.n	80039d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e00b      	b.n	80039e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	2b11      	cmp	r3, #17
 80039d6:	d107      	bne.n	80039e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f87b 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e06d      	b.n	8003ae0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0c:	d108      	bne.n	8003a20 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	e053      	b.n	8003ac8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a20:	897b      	ldrh	r3, [r7, #10]
 8003a22:	11db      	asrs	r3, r3, #7
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0306 	and.w	r3, r3, #6
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f063 030f 	orn	r3, r3, #15
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	492a      	ldr	r1, [pc, #168]	; (8003ae8 <I2C_MasterRequestRead+0x164>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f8ad 	bl	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e048      	b.n	8003ae0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4923      	ldr	r1, [pc, #140]	; (8003aec <I2C_MasterRequestRead+0x168>)
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f89d 	bl	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e038      	b.n	8003ae0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f825 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e017      	b.n	8003ae0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ab0:	897b      	ldrh	r3, [r7, #10]
 8003ab2:	11db      	asrs	r3, r3, #7
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 0306 	and.w	r3, r3, #6
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f063 030e 	orn	r3, r3, #14
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4907      	ldr	r1, [pc, #28]	; (8003aec <I2C_MasterRequestRead+0x168>)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f865 	bl	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	00010008 	.word	0x00010008
 8003aec:	00010002 	.word	0x00010002

08003af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b00:	e025      	b.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d021      	beq.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fd fb5f 	bl	80011cc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e023      	b.n	8003b96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10d      	bne.n	8003b74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4013      	ands	r3, r2
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	bf0c      	ite	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	2300      	movne	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	e00c      	b.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bf0c      	ite	eq
 8003b86:	2301      	moveq	r3, #1
 8003b88:	2300      	movne	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d0b6      	beq.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bac:	e051      	b.n	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbc:	d123      	bne.n	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f043 0204 	orr.w	r2, r3, #4
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e046      	b.n	8003c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d021      	beq.n	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7fd fadd 	bl	80011cc <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d116      	bne.n	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e020      	b.n	8003c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d10c      	bne.n	8003c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	43da      	mvns	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	e00b      	b.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d18d      	bne.n	8003bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca8:	e02d      	b.n	8003d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f8ce 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e02d      	b.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d021      	beq.n	8003d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fd fa83 	bl	80011cc <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d116      	bne.n	8003d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e007      	b.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d1ca      	bne.n	8003caa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d2a:	e02d      	b.n	8003d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f88d 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e02d      	b.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d021      	beq.n	8003d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d44:	f7fd fa42 	bl	80011cc <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d302      	bcc.n	8003d5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d116      	bne.n	8003d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e007      	b.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d1ca      	bne.n	8003d2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dac:	e042      	b.n	8003e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d119      	bne.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0210 	mvn.w	r2, #16
 8003dc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e029      	b.n	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df0:	f7fd f9ec 	bl	80011cc <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d116      	bne.n	8003e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e007      	b.n	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	d1b5      	bne.n	8003dae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e62:	d11b      	bne.n	8003e9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e26c      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8087 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec8:	4b92      	ldr	r3, [pc, #584]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d00c      	beq.n	8003eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ed4:	4b8f      	ldr	r3, [pc, #572]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d112      	bne.n	8003f06 <HAL_RCC_OscConfig+0x5e>
 8003ee0:	4b8c      	ldr	r3, [pc, #560]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d10b      	bne.n	8003f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eee:	4b89      	ldr	r3, [pc, #548]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d06c      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x12c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d168      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e246      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCC_OscConfig+0x76>
 8003f10:	4b80      	ldr	r3, [pc, #512]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a7f      	ldr	r2, [pc, #508]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	e02e      	b.n	8003f7c <HAL_RCC_OscConfig+0xd4>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x98>
 8003f26:	4b7b      	ldr	r3, [pc, #492]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7a      	ldr	r2, [pc, #488]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4b78      	ldr	r3, [pc, #480]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a77      	ldr	r2, [pc, #476]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e01d      	b.n	8003f7c <HAL_RCC_OscConfig+0xd4>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0xbc>
 8003f4a:	4b72      	ldr	r3, [pc, #456]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a71      	ldr	r2, [pc, #452]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b6f      	ldr	r3, [pc, #444]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6e      	ldr	r2, [pc, #440]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e00b      	b.n	8003f7c <HAL_RCC_OscConfig+0xd4>
 8003f64:	4b6b      	ldr	r3, [pc, #428]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a6a      	ldr	r2, [pc, #424]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b68      	ldr	r3, [pc, #416]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a67      	ldr	r2, [pc, #412]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d013      	beq.n	8003fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fd f922 	bl	80011cc <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fd f91e 	bl	80011cc <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1fa      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b5d      	ldr	r3, [pc, #372]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0xe4>
 8003faa:	e014      	b.n	8003fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd f90e 	bl	80011cc <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fd f90a 	bl	80011cc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e1e6      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc6:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x10c>
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d063      	beq.n	80040aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe2:	4b4c      	ldr	r3, [pc, #304]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fee:	4b49      	ldr	r3, [pc, #292]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d11c      	bne.n	8004034 <HAL_RCC_OscConfig+0x18c>
 8003ffa:	4b46      	ldr	r3, [pc, #280]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d116      	bne.n	8004034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004006:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_RCC_OscConfig+0x176>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d001      	beq.n	800401e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e1ba      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401e:	4b3d      	ldr	r3, [pc, #244]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4939      	ldr	r1, [pc, #228]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004032:	e03a      	b.n	80040aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800403c:	4b36      	ldr	r3, [pc, #216]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fd f8c3 	bl	80011cc <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404a:	f7fd f8bf 	bl	80011cc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e19b      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405c:	4b2d      	ldr	r3, [pc, #180]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004068:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4927      	ldr	r1, [pc, #156]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	600b      	str	r3, [r1, #0]
 800407c:	e015      	b.n	80040aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407e:	4b26      	ldr	r3, [pc, #152]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fd f8a2 	bl	80011cc <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408c:	f7fd f89e 	bl	80011cc <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e17a      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409e:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03a      	beq.n	800412c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d019      	beq.n	80040f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <HAL_RCC_OscConfig+0x274>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c4:	f7fd f882 	bl	80011cc <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040cc:	f7fd f87e 	bl	80011cc <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e15a      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040ea:	2001      	movs	r0, #1
 80040ec:	f000 fada 	bl	80046a4 <RCC_Delay>
 80040f0:	e01c      	b.n	800412c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_RCC_OscConfig+0x274>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f8:	f7fd f868 	bl	80011cc <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fe:	e00f      	b.n	8004120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fd f864 	bl	80011cc <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d908      	bls.n	8004120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e140      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	42420000 	.word	0x42420000
 800411c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004120:	4b9e      	ldr	r3, [pc, #632]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e9      	bne.n	8004100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a6 	beq.w	8004286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413e:	4b97      	ldr	r3, [pc, #604]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	4b94      	ldr	r3, [pc, #592]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	4a93      	ldr	r2, [pc, #588]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	61d3      	str	r3, [r2, #28]
 8004156:	4b91      	ldr	r3, [pc, #580]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004166:	4b8e      	ldr	r3, [pc, #568]	; (80043a0 <HAL_RCC_OscConfig+0x4f8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d118      	bne.n	80041a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004172:	4b8b      	ldr	r3, [pc, #556]	; (80043a0 <HAL_RCC_OscConfig+0x4f8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a8a      	ldr	r2, [pc, #552]	; (80043a0 <HAL_RCC_OscConfig+0x4f8>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7fd f825 	bl	80011cc <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7fd f821 	bl	80011cc <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b64      	cmp	r3, #100	; 0x64
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0fd      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_OscConfig+0x4f8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x312>
 80041ac:	4b7b      	ldr	r3, [pc, #492]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	4a7a      	ldr	r2, [pc, #488]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6213      	str	r3, [r2, #32]
 80041b8:	e02d      	b.n	8004216 <HAL_RCC_OscConfig+0x36e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x334>
 80041c2:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a75      	ldr	r2, [pc, #468]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	6213      	str	r3, [r2, #32]
 80041ce:	4b73      	ldr	r3, [pc, #460]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a72      	ldr	r2, [pc, #456]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	6213      	str	r3, [r2, #32]
 80041da:	e01c      	b.n	8004216 <HAL_RCC_OscConfig+0x36e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x356>
 80041e4:	4b6d      	ldr	r3, [pc, #436]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4a6c      	ldr	r2, [pc, #432]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6213      	str	r3, [r2, #32]
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4a69      	ldr	r2, [pc, #420]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6213      	str	r3, [r2, #32]
 80041fc:	e00b      	b.n	8004216 <HAL_RCC_OscConfig+0x36e>
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4a66      	ldr	r2, [pc, #408]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	4b64      	ldr	r3, [pc, #400]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	4a63      	ldr	r2, [pc, #396]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d015      	beq.n	800424a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7fc ffd5 	bl	80011cc <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fc ffd1 	bl	80011cc <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0ab      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	4b57      	ldr	r3, [pc, #348]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ee      	beq.n	8004226 <HAL_RCC_OscConfig+0x37e>
 8004248:	e014      	b.n	8004274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424a:	f7fc ffbf 	bl	80011cc <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fc ffbb 	bl	80011cc <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e095      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004268:	4b4c      	ldr	r3, [pc, #304]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ee      	bne.n	8004252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d105      	bne.n	8004286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427a:	4b48      	ldr	r3, [pc, #288]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4a47      	ldr	r2, [pc, #284]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8081 	beq.w	8004392 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004290:	4b42      	ldr	r3, [pc, #264]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d061      	beq.n	8004360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d146      	bne.n	8004332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b3f      	ldr	r3, [pc, #252]	; (80043a4 <HAL_RCC_OscConfig+0x4fc>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fc ff8f 	bl	80011cc <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fc ff8b 	bl	80011cc <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e067      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c4:	4b35      	ldr	r3, [pc, #212]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d108      	bne.n	80042ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042da:	4b30      	ldr	r3, [pc, #192]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	492d      	ldr	r1, [pc, #180]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a19      	ldr	r1, [r3, #32]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	430b      	orrs	r3, r1
 80042fe:	4927      	ldr	r1, [pc, #156]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004304:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <HAL_RCC_OscConfig+0x4fc>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fc ff5f 	bl	80011cc <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004312:	f7fc ff5b 	bl	80011cc <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e037      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004324:	4b1d      	ldr	r3, [pc, #116]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x46a>
 8004330:	e02f      	b.n	8004392 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <HAL_RCC_OscConfig+0x4fc>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fc ff48 	bl	80011cc <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004340:	f7fc ff44 	bl	80011cc <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e020      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x498>
 800435e:	e018      	b.n	8004392 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e013      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_OscConfig+0x4f4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	429a      	cmp	r2, r3
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438a:	429a      	cmp	r2, r3
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	40007000 	.word	0x40007000
 80043a4:	42420060 	.word	0x42420060

080043a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0d0      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043bc:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d910      	bls.n	80043ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ca:	4b67      	ldr	r3, [pc, #412]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 0207 	bic.w	r2, r3, #7
 80043d2:	4965      	ldr	r1, [pc, #404]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b63      	ldr	r3, [pc, #396]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0b8      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004404:	4b59      	ldr	r3, [pc, #356]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4a58      	ldr	r2, [pc, #352]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800440e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800441c:	4b53      	ldr	r3, [pc, #332]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4a52      	ldr	r2, [pc, #328]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004428:	4b50      	ldr	r3, [pc, #320]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	494d      	ldr	r1, [pc, #308]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d040      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	4b47      	ldr	r3, [pc, #284]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d115      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e07f      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004466:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e073      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e06b      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b39      	ldr	r3, [pc, #228]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4936      	ldr	r1, [pc, #216]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004498:	f7fc fe98 	bl	80011cc <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fc fe94 	bl	80011cc <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e053      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c8:	4b27      	ldr	r3, [pc, #156]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d210      	bcs.n	80044f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 0207 	bic.w	r2, r3, #7
 80044de:	4922      	ldr	r1, [pc, #136]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e032      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4916      	ldr	r1, [pc, #88]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	490e      	ldr	r1, [pc, #56]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004536:	f000 f821 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800453a:	4601      	mov	r1, r0
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004548:	5cd3      	ldrb	r3, [r2, r3]
 800454a:	fa21 f303 	lsr.w	r3, r1, r3
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <HAL_RCC_ClockConfig+0x1cc>)
 8004550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_ClockConfig+0x1d0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fc fdf6 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40022000 	.word	0x40022000
 800456c:	40021000 	.word	0x40021000
 8004570:	08009d18 	.word	0x08009d18
 8004574:	20000020 	.word	0x20000020
 8004578:	20000000 	.word	0x20000000

0800457c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	b490      	push	{r4, r7}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004582:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004584:	1d3c      	adds	r4, r7, #4
 8004586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800458c:	4b28      	ldr	r3, [pc, #160]	; (8004630 <HAL_RCC_GetSysClockFreq+0xb4>)
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	2300      	movs	r3, #0
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045a6:	4b23      	ldr	r3, [pc, #140]	; (8004634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d002      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x40>
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d003      	beq.n	80045c2 <HAL_RCC_GetSysClockFreq+0x46>
 80045ba:	e02d      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045bc:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045be:	623b      	str	r3, [r7, #32]
      break;
 80045c0:	e02d      	b.n	800461e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	0c9b      	lsrs	r3, r3, #18
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045ce:	4413      	add	r3, r2
 80045d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045e0:	4b14      	ldr	r3, [pc, #80]	; (8004634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0c5b      	lsrs	r3, r3, #17
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045ee:	4413      	add	r3, r2
 80045f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	4a0f      	ldr	r2, [pc, #60]	; (8004638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045fa:	fb02 f203 	mul.w	r2, r2, r3
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
 8004606:	e004      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4a0c      	ldr	r2, [pc, #48]	; (800463c <HAL_RCC_GetSysClockFreq+0xc0>)
 800460c:	fb02 f303 	mul.w	r3, r2, r3
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	623b      	str	r3, [r7, #32]
      break;
 8004616:	e002      	b.n	800461e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <HAL_RCC_GetSysClockFreq+0xbc>)
 800461a:	623b      	str	r3, [r7, #32]
      break;
 800461c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800461e:	6a3b      	ldr	r3, [r7, #32]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3728      	adds	r7, #40	; 0x28
 8004624:	46bd      	mov	sp, r7
 8004626:	bc90      	pop	{r4, r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	08009cd0 	.word	0x08009cd0
 8004630:	08009ce0 	.word	0x08009ce0
 8004634:	40021000 	.word	0x40021000
 8004638:	007a1200 	.word	0x007a1200
 800463c:	003d0900 	.word	0x003d0900

08004640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004644:	4b02      	ldr	r3, [pc, #8]	; (8004650 <HAL_RCC_GetHCLKFreq+0x10>)
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	20000020 	.word	0x20000020

08004654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004658:	f7ff fff2 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 800465c:	4601      	mov	r1, r0
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	4a03      	ldr	r2, [pc, #12]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800466a:	5cd3      	ldrb	r3, [r2, r3]
 800466c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	08009d28 	.word	0x08009d28

0800467c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004680:	f7ff ffde 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 8004684:	4601      	mov	r1, r0
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	0adb      	lsrs	r3, r3, #11
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	4a03      	ldr	r2, [pc, #12]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004692:	5cd3      	ldrb	r3, [r2, r3]
 8004694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000
 80046a0:	08009d28 	.word	0x08009d28

080046a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <RCC_Delay+0x34>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <RCC_Delay+0x38>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	0a5b      	lsrs	r3, r3, #9
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046c0:	bf00      	nop
  }
  while (Delay --);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1e5a      	subs	r2, r3, #1
 80046c6:	60fa      	str	r2, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f9      	bne.n	80046c0 <RCC_Delay+0x1c>
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000020 	.word	0x20000020
 80046dc:	10624dd3 	.word	0x10624dd3

080046e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d07d      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80046fc:	2300      	movs	r3, #0
 80046fe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004700:	4b4f      	ldr	r3, [pc, #316]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10d      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470c:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	4a4b      	ldr	r2, [pc, #300]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004716:	61d3      	str	r3, [r2, #28]
 8004718:	4b49      	ldr	r3, [pc, #292]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004724:	2301      	movs	r3, #1
 8004726:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	4b46      	ldr	r3, [pc, #280]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d118      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004734:	4b43      	ldr	r3, [pc, #268]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a42      	ldr	r2, [pc, #264]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004740:	f7fc fd44 	bl	80011cc <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004746:	e008      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004748:	f7fc fd40 	bl	80011cc <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	; 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e06d      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475a:	4b3a      	ldr	r3, [pc, #232]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02e      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	429a      	cmp	r2, r3
 8004782:	d027      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004784:	4b2e      	ldr	r3, [pc, #184]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800478e:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004790:	2201      	movs	r2, #1
 8004792:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004794:	4b2c      	ldr	r3, [pc, #176]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800479a:	4a29      	ldr	r2, [pc, #164]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d014      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fc fd0f 	bl	80011cc <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7fc fd0b 	bl	80011cc <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e036      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0ee      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4917      	ldr	r1, [pc, #92]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004804:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	490b      	ldr	r1, [pc, #44]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	4313      	orrs	r3, r2
 8004814:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	4904      	ldr	r1, [pc, #16]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	40007000 	.word	0x40007000
 8004848:	42420440 	.word	0x42420440

0800484c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d007      	beq.n	800487e <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr

08004892 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e01d      	b.n	80048e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f002 fc0f 	bl	80070dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f000 fa37 	bl	8004d44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2201      	movs	r2, #1
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fc0c 	bl	8005118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a10      	ldr	r2, [pc, #64]	; (8004948 <HAL_TIM_PWM_Start+0x60>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d107      	bne.n	800491a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b06      	cmp	r3, #6
 800492a:	d007      	beq.n	800493c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40012c00 	.word	0x40012c00

0800494c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b02      	cmp	r3, #2
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0202 	mvn.w	r2, #2
 8004978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9bc 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9af 	bl	8004cfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f9be 	bl	8004d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d122      	bne.n	80049fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d11b      	bne.n	80049fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0204 	mvn.w	r2, #4
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f992 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f985 	bl	8004cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f994 	bl	8004d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d122      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d11b      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0208 	mvn.w	r2, #8
 8004a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2204      	movs	r2, #4
 8004a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f968 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004a3c:	e005      	b.n	8004a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f95b 	bl	8004cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f96a 	bl	8004d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d122      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0210 	mvn.w	r2, #16
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f93e 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f931 	bl	8004cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f940 	bl	8004d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d107      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0201 	mvn.w	r2, #1
 8004ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f90c 	bl	8004ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d107      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fb7f 	bl	80051fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d10e      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f904 	bl	8004d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0220 	mvn.w	r2, #32
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fb4a 	bl	80051e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e0b4      	b.n	8004ce0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	f200 809f 	bhi.w	8004ccc <HAL_TIM_PWM_ConfigChannel+0x170>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004ccd 	.word	0x08004ccd
 8004b9c:	08004ccd 	.word	0x08004ccd
 8004ba0:	08004ccd 	.word	0x08004ccd
 8004ba4:	08004c09 	.word	0x08004c09
 8004ba8:	08004ccd 	.word	0x08004ccd
 8004bac:	08004ccd 	.word	0x08004ccd
 8004bb0:	08004ccd 	.word	0x08004ccd
 8004bb4:	08004c4b 	.word	0x08004c4b
 8004bb8:	08004ccd 	.word	0x08004ccd
 8004bbc:	08004ccd 	.word	0x08004ccd
 8004bc0:	08004ccd 	.word	0x08004ccd
 8004bc4:	08004c8b 	.word	0x08004c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f91a 	bl	8004e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0208 	orr.w	r2, r2, #8
 8004be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0204 	bic.w	r2, r2, #4
 8004bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6999      	ldr	r1, [r3, #24]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	619a      	str	r2, [r3, #24]
      break;
 8004c06:	e062      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 f960 	bl	8004ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6999      	ldr	r1, [r3, #24]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	021a      	lsls	r2, r3, #8
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	619a      	str	r2, [r3, #24]
      break;
 8004c48:	e041      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f9a9 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0208 	orr.w	r2, r2, #8
 8004c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0204 	bic.w	r2, r2, #4
 8004c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69d9      	ldr	r1, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	61da      	str	r2, [r3, #28]
      break;
 8004c88:	e021      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 f9f3 	bl	800507c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69d9      	ldr	r1, [r3, #28]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	021a      	lsls	r2, r3, #8
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	61da      	str	r2, [r3, #28]
      break;
 8004cca:	e000      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004ccc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr

08004d1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr
	...

08004d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <TIM_Base_SetConfig+0xb8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00b      	beq.n	8004d74 <TIM_Base_SetConfig+0x30>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d007      	beq.n	8004d74 <TIM_Base_SetConfig+0x30>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <TIM_Base_SetConfig+0xbc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_Base_SetConfig+0x30>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a25      	ldr	r2, [pc, #148]	; (8004e04 <TIM_Base_SetConfig+0xc0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d108      	bne.n	8004d86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <TIM_Base_SetConfig+0xb8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_Base_SetConfig+0x62>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0x62>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <TIM_Base_SetConfig+0xbc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0x62>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <TIM_Base_SetConfig+0xc0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a07      	ldr	r2, [pc, #28]	; (8004dfc <TIM_Base_SetConfig+0xb8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d103      	bne.n	8004dec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	615a      	str	r2, [r3, #20]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800

08004e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0201 	bic.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0303 	bic.w	r3, r3, #3
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 0302 	bic.w	r3, r3, #2
 8004e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <TIM_OC1_SetConfig+0xc8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10c      	bne.n	8004e7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0308 	bic.w	r3, r3, #8
 8004e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 0304 	bic.w	r3, r3, #4
 8004e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <TIM_OC1_SetConfig+0xc8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d111      	bne.n	8004eaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	621a      	str	r2, [r3, #32]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00

08004ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0210 	bic.w	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0320 	bic.w	r3, r3, #32
 8004f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <TIM_OC2_SetConfig+0xd0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10d      	bne.n	8004f50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <TIM_OC2_SetConfig+0xd0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d113      	bne.n	8004f80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	40012c00 	.word	0x40012c00

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <TIM_OC3_SetConfig+0xd0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d10d      	bne.n	8005022 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800500c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a14      	ldr	r2, [pc, #80]	; (8005078 <TIM_OC3_SetConfig+0xd0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d113      	bne.n	8005052 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00

0800507c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	031b      	lsls	r3, r3, #12
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a0f      	ldr	r2, [pc, #60]	; (8005114 <TIM_OC4_SetConfig+0x98>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d109      	bne.n	80050f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	019b      	lsls	r3, r3, #6
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	40012c00 	.word	0x40012c00

08005118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2201      	movs	r2, #1
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1a      	ldr	r2, [r3, #32]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	43db      	mvns	r3, r3
 800513a:	401a      	ands	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	fa01 f303 	lsl.w	r3, r1, r3
 8005150:	431a      	orrs	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005174:	2302      	movs	r3, #2
 8005176:	e032      	b.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e03f      	b.n	800529e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f002 f824 	bl	8007280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	; 0x24
 800523c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800524e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f90b 	bl	800546c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b088      	sub	sp, #32
 80052aa:	af02      	add	r7, sp, #8
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	f040 8083 	bne.w	80053ce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_UART_Transmit+0x2e>
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e07b      	b.n	80053d0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_UART_Transmit+0x40>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e074      	b.n	80053d0 <HAL_UART_Transmit+0x12a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2221      	movs	r2, #33	; 0x21
 80052f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80052fc:	f7fb ff66 	bl	80011cc <HAL_GetTick>
 8005300:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	88fa      	ldrh	r2, [r7, #6]
 8005306:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800530e:	e042      	b.n	8005396 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005326:	d122      	bne.n	800536e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	2180      	movs	r1, #128	; 0x80
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f850 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e046      	b.n	80053d0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005354:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	3302      	adds	r3, #2
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	e017      	b.n	8005396 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3301      	adds	r3, #1
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	e013      	b.n	8005396 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	2180      	movs	r1, #128	; 0x80
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f82d 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e023      	b.n	80053d0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	60ba      	str	r2, [r7, #8]
 800538e:	781a      	ldrb	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1b7      	bne.n	8005310 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2200      	movs	r2, #0
 80053a8:	2140      	movs	r1, #64	; 0x40
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f814 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e00a      	b.n	80053d0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e000      	b.n	80053d0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80053ce:	2302      	movs	r3, #2
  }
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	e02c      	b.n	8005444 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d028      	beq.n	8005444 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <UART_WaitOnFlagUntilTimeout+0x30>
 80053f8:	f7fb fee8 	bl	80011cc <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	429a      	cmp	r2, r3
 8005406:	d21d      	bcs.n	8005444 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005416:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e00f      	b.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	429a      	cmp	r2, r3
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	429a      	cmp	r2, r3
 8005460:	d0c3      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054a6:	f023 030c 	bic.w	r3, r3, #12
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	430b      	orrs	r3, r1
 80054b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a52      	ldr	r2, [pc, #328]	; (8005618 <UART_SetConfig+0x1ac>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d14e      	bne.n	8005572 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054d4:	f7ff f8d2 	bl	800467c <HAL_RCC_GetPCLK2Freq>
 80054d8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	009a      	lsls	r2, r3, #2
 80054e4:	441a      	add	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	4a4a      	ldr	r2, [pc, #296]	; (800561c <UART_SetConfig+0x1b0>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	0119      	lsls	r1, r3, #4
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009a      	lsls	r2, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005510:	4b42      	ldr	r3, [pc, #264]	; (800561c <UART_SetConfig+0x1b0>)
 8005512:	fba3 0302 	umull	r0, r3, r3, r2
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	2064      	movs	r0, #100	; 0x64
 800551a:	fb00 f303 	mul.w	r3, r0, r3
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	3332      	adds	r3, #50	; 0x32
 8005524:	4a3d      	ldr	r2, [pc, #244]	; (800561c <UART_SetConfig+0x1b0>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005530:	4419      	add	r1, r3
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009a      	lsls	r2, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	fbb2 f2f3 	udiv	r2, r2, r3
 8005548:	4b34      	ldr	r3, [pc, #208]	; (800561c <UART_SetConfig+0x1b0>)
 800554a:	fba3 0302 	umull	r0, r3, r3, r2
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2064      	movs	r0, #100	; 0x64
 8005552:	fb00 f303 	mul.w	r3, r0, r3
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	3332      	adds	r3, #50	; 0x32
 800555c:	4a2f      	ldr	r2, [pc, #188]	; (800561c <UART_SetConfig+0x1b0>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	f003 020f 	and.w	r2, r3, #15
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	440a      	add	r2, r1
 800556e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005570:	e04d      	b.n	800560e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005572:	f7ff f86f 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 8005576:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009a      	lsls	r2, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	4a23      	ldr	r2, [pc, #140]	; (800561c <UART_SetConfig+0x1b0>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	0119      	lsls	r1, r3, #4
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009a      	lsls	r2, r3, #2
 80055a2:	441a      	add	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ae:	4b1b      	ldr	r3, [pc, #108]	; (800561c <UART_SetConfig+0x1b0>)
 80055b0:	fba3 0302 	umull	r0, r3, r3, r2
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	2064      	movs	r0, #100	; 0x64
 80055b8:	fb00 f303 	mul.w	r3, r0, r3
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	3332      	adds	r3, #50	; 0x32
 80055c2:	4a16      	ldr	r2, [pc, #88]	; (800561c <UART_SetConfig+0x1b0>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ce:	4419      	add	r1, r3
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009a      	lsls	r2, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <UART_SetConfig+0x1b0>)
 80055e8:	fba3 0302 	umull	r0, r3, r3, r2
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	2064      	movs	r0, #100	; 0x64
 80055f0:	fb00 f303 	mul.w	r3, r0, r3
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	3332      	adds	r3, #50	; 0x32
 80055fa:	4a08      	ldr	r2, [pc, #32]	; (800561c <UART_SetConfig+0x1b0>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	f003 020f 	and.w	r2, r3, #15
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	440a      	add	r2, r1
 800560c:	609a      	str	r2, [r3, #8]
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40013800 	.word	0x40013800
 800561c:	51eb851f 	.word	0x51eb851f

08005620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005624:	b0cb      	sub	sp, #300	; 0x12c
 8005626:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005628:	f7fb fd78 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800562c:	f000 fbaa 	bl	8005d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005630:	f000 fddc 	bl	80061ec <MX_GPIO_Init>
  MX_DMA_Init();
 8005634:	f000 fdbc 	bl	80061b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8005638:	f000 fc00 	bl	8005e3c <MX_ADC1_Init>
  MX_CAN_Init();
 800563c:	f000 fc4c 	bl	8005ed8 <MX_CAN_Init>
  MX_I2C2_Init();
 8005640:	f000 fc80 	bl	8005f44 <MX_I2C2_Init>
  MX_TIM2_Init();
 8005644:	f000 fcac 	bl	8005fa0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005648:	f000 fd24 	bl	8006094 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800564c:	f000 fd86 	bl	800615c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

    last_time = HAL_GetTick(); // this give us the current
 8005650:	f7fb fdbc 	bl	80011cc <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	4bac      	ldr	r3, [pc, #688]	; (8005908 <main+0x2e8>)
 8005658:	601a      	str	r2, [r3, #0]

    HAL_TIM_Base_Start(&htim2);
 800565a:	48ac      	ldr	r0, [pc, #688]	; (800590c <main+0x2ec>)
 800565c:	f7ff f8f6 	bl	800484c <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 8005660:	48ab      	ldr	r0, [pc, #684]	; (8005910 <main+0x2f0>)
 8005662:	f7ff f8f3 	bl	800484c <HAL_TIM_Base_Start>

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 2);
 8005666:	2202      	movs	r2, #2
 8005668:	49aa      	ldr	r1, [pc, #680]	; (8005914 <main+0x2f4>)
 800566a:	48ab      	ldr	r0, [pc, #684]	; (8005918 <main+0x2f8>)
 800566c:	f7fb feb2 	bl	80013d4 <HAL_ADC_Start_DMA>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005670:	2100      	movs	r1, #0
 8005672:	48a6      	ldr	r0, [pc, #664]	; (800590c <main+0x2ec>)
 8005674:	f7ff f938 	bl	80048e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005678:	2104      	movs	r1, #4
 800567a:	48a4      	ldr	r0, [pc, #656]	; (800590c <main+0x2ec>)
 800567c:	f7ff f934 	bl	80048e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005680:	2108      	movs	r1, #8
 8005682:	48a2      	ldr	r0, [pc, #648]	; (800590c <main+0x2ec>)
 8005684:	f7ff f930 	bl	80048e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005688:	210c      	movs	r1, #12
 800568a:	48a0      	ldr	r0, [pc, #640]	; (800590c <main+0x2ec>)
 800568c:	f7ff f92c 	bl	80048e8 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005690:	2100      	movs	r1, #0
 8005692:	489f      	ldr	r0, [pc, #636]	; (8005910 <main+0x2f0>)
 8005694:	f7ff f928 	bl	80048e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005698:	2104      	movs	r1, #4
 800569a:	489d      	ldr	r0, [pc, #628]	; (8005910 <main+0x2f0>)
 800569c:	f7ff f924 	bl	80048e8 <HAL_TIM_PWM_Start>


    sFilterConfig.FilterBank = 0;
 80056a0:	4b9e      	ldr	r3, [pc, #632]	; (800591c <main+0x2fc>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80056a6:	4b9d      	ldr	r3, [pc, #628]	; (800591c <main+0x2fc>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80056ac:	4b9b      	ldr	r3, [pc, #620]	; (800591c <main+0x2fc>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 80056b2:	4b9a      	ldr	r3, [pc, #616]	; (800591c <main+0x2fc>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 80056b8:	4b98      	ldr	r3, [pc, #608]	; (800591c <main+0x2fc>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80056be:	4b97      	ldr	r3, [pc, #604]	; (800591c <main+0x2fc>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80056c4:	4b95      	ldr	r3, [pc, #596]	; (800591c <main+0x2fc>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80056ca:	4b94      	ldr	r3, [pc, #592]	; (800591c <main+0x2fc>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80056d0:	4b92      	ldr	r3, [pc, #584]	; (800591c <main+0x2fc>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 80056d6:	4b91      	ldr	r3, [pc, #580]	; (800591c <main+0x2fc>)
 80056d8:	220e      	movs	r2, #14
 80056da:	625a      	str	r2, [r3, #36]	; 0x24


    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80056dc:	498f      	ldr	r1, [pc, #572]	; (800591c <main+0x2fc>)
 80056de:	4890      	ldr	r0, [pc, #576]	; (8005920 <main+0x300>)
 80056e0:	f7fc fa57 	bl	8001b92 <HAL_CAN_ConfigFilter>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <main+0xce>
    {
        /* Filter configuration Error */
        Error_Handler();
 80056ea:	f000 fe86 	bl	80063fa <Error_Handler>
    }

    if (HAL_CAN_Start(&hcan) != HAL_OK)
 80056ee:	488c      	ldr	r0, [pc, #560]	; (8005920 <main+0x300>)
 80056f0:	f7fc fb18 	bl	8001d24 <HAL_CAN_Start>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <main+0xde>
    {
        /* Start Error */
        Error_Handler();
 80056fa:	f000 fe7e 	bl	80063fa <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80056fe:	2103      	movs	r1, #3
 8005700:	4887      	ldr	r0, [pc, #540]	; (8005920 <main+0x300>)
 8005702:	f7fc fc64 	bl	8001fce <HAL_CAN_ActivateNotification>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <main+0xf0>
    {
        /* Notification Error */
        Error_Handler();
 800570c:	f000 fe75 	bl	80063fa <Error_Handler>
    }

    TxHeader.StdId = 0x321;
 8005710:	4b84      	ldr	r3, [pc, #528]	; (8005924 <main+0x304>)
 8005712:	f240 3221 	movw	r2, #801	; 0x321
 8005716:	601a      	str	r2, [r3, #0]
    TxHeader.ExtId = 0x01;
 8005718:	4b82      	ldr	r3, [pc, #520]	; (8005924 <main+0x304>)
 800571a:	2201      	movs	r2, #1
 800571c:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 800571e:	4b81      	ldr	r3, [pc, #516]	; (8005924 <main+0x304>)
 8005720:	2200      	movs	r2, #0
 8005722:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 8005724:	4b7f      	ldr	r3, [pc, #508]	; (8005924 <main+0x304>)
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800572a:	4b7e      	ldr	r3, [pc, #504]	; (8005924 <main+0x304>)
 800572c:	2208      	movs	r2, #8
 800572e:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8005730:	4b7c      	ldr	r3, [pc, #496]	; (8005924 <main+0x304>)
 8005732:	2200      	movs	r2, #0
 8005734:	751a      	strb	r2, [r3, #20]

    time = HAL_GetTick();
 8005736:	f7fb fd49 	bl	80011cc <HAL_GetTick>
 800573a:	4603      	mov	r3, r0
 800573c:	4618      	mov	r0, r3
 800573e:	f7fb faa9 	bl	8000c94 <__aeabi_ui2f>
 8005742:	4602      	mov	r2, r0
 8005744:	4b78      	ldr	r3, [pc, #480]	; (8005928 <main+0x308>)
 8005746:	601a      	str	r2, [r3, #0]

    SD_MPU6050_Init(&hi2c2,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_500s,1);
 8005748:	2301      	movs	r3, #1
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	2301      	movs	r3, #1
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	2300      	movs	r3, #0
 8005752:	2200      	movs	r2, #0
 8005754:	4975      	ldr	r1, [pc, #468]	; (800592c <main+0x30c>)
 8005756:	4876      	ldr	r0, [pc, #472]	; (8005930 <main+0x310>)
 8005758:	f000 fe56 	bl	8006408 <SD_MPU6050_Init>
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    	timePrev = time;
 800575c:	4b72      	ldr	r3, [pc, #456]	; (8005928 <main+0x308>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a74      	ldr	r2, [pc, #464]	; (8005934 <main+0x314>)
 8005762:	6013      	str	r3, [r2, #0]
    	time = HAL_GetTick();
 8005764:	f7fb fd32 	bl	80011cc <HAL_GetTick>
 8005768:	4603      	mov	r3, r0
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb fa92 	bl	8000c94 <__aeabi_ui2f>
 8005770:	4602      	mov	r2, r0
 8005772:	4b6d      	ldr	r3, [pc, #436]	; (8005928 <main+0x308>)
 8005774:	601a      	str	r2, [r3, #0]
        elapsedTime = (time - timePrev) * 0.001;
 8005776:	4b6c      	ldr	r3, [pc, #432]	; (8005928 <main+0x308>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b6e      	ldr	r3, [pc, #440]	; (8005934 <main+0x314>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7fb f9d5 	bl	8000b30 <__aeabi_fsub>
 8005786:	4603      	mov	r3, r0
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fe4d 	bl	8000428 <__aeabi_f2d>
 800578e:	a35c      	add	r3, pc, #368	; (adr r3, 8005900 <main+0x2e0>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f7fa fea0 	bl	80004d8 <__aeabi_dmul>
 8005798:	4603      	mov	r3, r0
 800579a:	460c      	mov	r4, r1
 800579c:	4618      	mov	r0, r3
 800579e:	4621      	mov	r1, r4
 80057a0:	f7fb f972 	bl	8000a88 <__aeabi_d2f>
 80057a4:	4602      	mov	r2, r0
 80057a6:	4b64      	ldr	r3, [pc, #400]	; (8005938 <main+0x318>)
 80057a8:	601a      	str	r2, [r3, #0]

        pin=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80057aa:	2102      	movs	r1, #2
 80057ac:	4863      	ldr	r0, [pc, #396]	; (800593c <main+0x31c>)
 80057ae:	f7fd fab5 	bl	8002d1c <HAL_GPIO_ReadPin>
 80057b2:	4603      	mov	r3, r0
 80057b4:	461a      	mov	r2, r3
 80057b6:	4b62      	ldr	r3, [pc, #392]	; (8005940 <main+0x320>)
 80057b8:	701a      	strb	r2, [r3, #0]

	    control.valueJoyStick_X_1 = parseData(RxData[0]);
 80057ba:	4b62      	ldr	r3, [pc, #392]	; (8005944 <main+0x324>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fe0c 	bl	80063dc <parseData>
 80057c4:	4603      	mov	r3, r0
 80057c6:	461a      	mov	r2, r3
 80057c8:	4b5f      	ldr	r3, [pc, #380]	; (8005948 <main+0x328>)
 80057ca:	809a      	strh	r2, [r3, #4]
		control.valueJoyStick_Y_1 = parseData(RxData[1]);
 80057cc:	4b5d      	ldr	r3, [pc, #372]	; (8005944 <main+0x324>)
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fe03 	bl	80063dc <parseData>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	4b5b      	ldr	r3, [pc, #364]	; (8005948 <main+0x328>)
 80057dc:	80da      	strh	r2, [r3, #6]
		control.valueJoyStick_X_2= parseData(RxData[2]);
 80057de:	4b59      	ldr	r3, [pc, #356]	; (8005944 <main+0x324>)
 80057e0:	789b      	ldrb	r3, [r3, #2]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fdfa 	bl	80063dc <parseData>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	4b56      	ldr	r3, [pc, #344]	; (8005948 <main+0x328>)
 80057ee:	811a      	strh	r2, [r3, #8]
		control.valueJoyStick_Y_2 = parseData(RxData[3]);
 80057f0:	4b54      	ldr	r3, [pc, #336]	; (8005944 <main+0x324>)
 80057f2:	78db      	ldrb	r3, [r3, #3]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fdf1 	bl	80063dc <parseData>
 80057fa:	4603      	mov	r3, r0
 80057fc:	461a      	mov	r2, r3
 80057fe:	4b52      	ldr	r3, [pc, #328]	; (8005948 <main+0x328>)
 8005800:	815a      	strh	r2, [r3, #10]
		control.desired_angle = parseData(RxData[4]);
 8005802:	4b50      	ldr	r3, [pc, #320]	; (8005944 <main+0x324>)
 8005804:	791b      	ldrb	r3, [r3, #4]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fde8 	bl	80063dc <parseData>
 800580c:	4603      	mov	r3, r0
 800580e:	461a      	mov	r2, r3
 8005810:	4b4d      	ldr	r3, [pc, #308]	; (8005948 <main+0x328>)
 8005812:	805a      	strh	r2, [r3, #2]
		control.armco = RxData[5];
 8005814:	4b4b      	ldr	r3, [pc, #300]	; (8005944 <main+0x324>)
 8005816:	795a      	ldrb	r2, [r3, #5]
 8005818:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <main+0x328>)
 800581a:	705a      	strb	r2, [r3, #1]
		control.mod = RxData[6];
 800581c:	4b49      	ldr	r3, [pc, #292]	; (8005944 <main+0x324>)
 800581e:	799a      	ldrb	r2, [r3, #6]
 8005820:	4b49      	ldr	r3, [pc, #292]	; (8005948 <main+0x328>)
 8005822:	701a      	strb	r2, [r3, #0]

        if(pin == 0 || control.mod!=1){
 8005824:	4b46      	ldr	r3, [pc, #280]	; (8005940 <main+0x320>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <main+0x214>
 800582c:	4b46      	ldr	r3, [pc, #280]	; (8005948 <main+0x328>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d01d      	beq.n	8005870 <main+0x250>
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8005834:	4b35      	ldr	r3, [pc, #212]	; (800590c <main+0x2ec>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2200      	movs	r2, #0
 800583a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800583c:	4b33      	ldr	r3, [pc, #204]	; (800590c <main+0x2ec>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2200      	movs	r2, #0
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8005844:	4b31      	ldr	r3, [pc, #196]	; (800590c <main+0x2ec>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2200      	movs	r2, #0
 800584a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800584c:	4b2f      	ldr	r3, [pc, #188]	; (800590c <main+0x2ec>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2200      	movs	r2, #0
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8005854:	4b2e      	ldr	r3, [pc, #184]	; (8005910 <main+0x2f0>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2200      	movs	r2, #0
 800585a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800585c:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <main+0x2f0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2200      	movs	r2, #0
 8005862:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(1000);
 8005864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005868:	f7fb fcba 	bl	80011e0 <HAL_Delay>
		HAL_NVIC_SystemReset();
 800586c:	f7fc fefd 	bl	800266a <HAL_NVIC_SystemReset>
        }

        arming();
 8005870:	f000 fd5e 	bl	8006330 <arming>

    	char tx[250];

    	SD_MPU6050_ReadAngles(&hi2c2, &mpu1);
 8005874:	492d      	ldr	r1, [pc, #180]	; (800592c <main+0x30c>)
 8005876:	482e      	ldr	r0, [pc, #184]	; (8005930 <main+0x310>)
 8005878:	f001 f892 	bl	80069a0 <SD_MPU6050_ReadAngles>

		//float AngleX = mpu1.GyroAngles_X;
		//float AngleY = mpu1.GyroAngles_Y;
		//float AngleZ = mpu1.GyroAngles_Z;
		float Temp = mpu1.Temperature;
 800587c:	4b2b      	ldr	r3, [pc, #172]	; (800592c <main+0x30c>)
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		float AngleX = mpu1.Angels_X/2.0;
 8005884:	4b29      	ldr	r3, [pc, #164]	; (800592c <main+0x30c>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800588c:	4618      	mov	r0, r3
 800588e:	f7fb fb0d 	bl	8000eac <__aeabi_fdiv>
 8005892:	4603      	mov	r3, r0
 8005894:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		float AngleY = mpu1.Angels_Y/2.0;
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <main+0x30c>)
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fb fb03 	bl	8000eac <__aeabi_fdiv>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		float AngleZ = mpu1.Angels_Z/2.0;
 80058ac:	4b1f      	ldr	r3, [pc, #124]	; (800592c <main+0x30c>)
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fb faf9 	bl	8000eac <__aeabi_fdiv>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		error = AngleZ - desired_angle;
 80058c0:	4b22      	ldr	r3, [pc, #136]	; (800594c <main+0x32c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4619      	mov	r1, r3
 80058c6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80058ca:	f7fb f931 	bl	8000b30 <__aeabi_fsub>
 80058ce:	4603      	mov	r3, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <main+0x330>)
 80058d4:	601a      	str	r2, [r3, #0]

		pid_p = kp*error;
 80058d6:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <main+0x330>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fa fda4 	bl	8000428 <__aeabi_f2d>
 80058e0:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <main+0x334>)
 80058e2:	cb18      	ldmia	r3, {r3, r4}
 80058e4:	461a      	mov	r2, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	f7fa fdf6 	bl	80004d8 <__aeabi_dmul>
 80058ec:	4603      	mov	r3, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	4618      	mov	r0, r3
 80058f2:	4621      	mov	r1, r4
 80058f4:	f7fb f8c8 	bl	8000a88 <__aeabi_d2f>
 80058f8:	4602      	mov	r2, r0
 80058fa:	4b17      	ldr	r3, [pc, #92]	; (8005958 <main+0x338>)
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e02d      	b.n	800595c <main+0x33c>
 8005900:	d2f1a9fc 	.word	0xd2f1a9fc
 8005904:	3f50624d 	.word	0x3f50624d
 8005908:	20000460 	.word	0x20000460
 800590c:	20000474 	.word	0x20000474
 8005910:	20000354 	.word	0x20000354
 8005914:	20000454 	.word	0x20000454
 8005918:	20000398 	.word	0x20000398
 800591c:	2000027c 	.word	0x2000027c
 8005920:	20000324 	.word	0x20000324
 8005924:	200004b4 	.word	0x200004b4
 8005928:	20000464 	.word	0x20000464
 800592c:	20000214 	.word	0x20000214
 8005930:	200002cc 	.word	0x200002cc
 8005934:	20000320 	.word	0x20000320
 8005938:	200002b0 	.word	0x200002b0
 800593c:	40010c00 	.word	0x40010c00
 8005940:	200004cc 	.word	0x200004cc
 8005944:	2000046c 	.word	0x2000046c
 8005948:	200002a4 	.word	0x200002a4
 800594c:	20000268 	.word	0x20000268
 8005950:	20000254 	.word	0x20000254
 8005954:	20000008 	.word	0x20000008
 8005958:	2000025c 	.word	0x2000025c

		//if(-3.0 >= error && error <=3.0)
		pid_i = pid_i+(ki*error)*elapsedTime;
 800595c:	4b9d      	ldr	r3, [pc, #628]	; (8005bd4 <main+0x5b4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7fa fd61 	bl	8000428 <__aeabi_f2d>
 8005966:	4605      	mov	r5, r0
 8005968:	460e      	mov	r6, r1
 800596a:	4b9b      	ldr	r3, [pc, #620]	; (8005bd8 <main+0x5b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7fa fd5a 	bl	8000428 <__aeabi_f2d>
 8005974:	4b99      	ldr	r3, [pc, #612]	; (8005bdc <main+0x5bc>)
 8005976:	cb18      	ldmia	r3, {r3, r4}
 8005978:	461a      	mov	r2, r3
 800597a:	4623      	mov	r3, r4
 800597c:	f7fa fdac 	bl	80004d8 <__aeabi_dmul>
 8005980:	4603      	mov	r3, r0
 8005982:	460c      	mov	r4, r1
 8005984:	4698      	mov	r8, r3
 8005986:	46a1      	mov	r9, r4
 8005988:	4b95      	ldr	r3, [pc, #596]	; (8005be0 <main+0x5c0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f7fa fd4b 	bl	8000428 <__aeabi_f2d>
 8005992:	4603      	mov	r3, r0
 8005994:	460c      	mov	r4, r1
 8005996:	461a      	mov	r2, r3
 8005998:	4623      	mov	r3, r4
 800599a:	4640      	mov	r0, r8
 800599c:	4649      	mov	r1, r9
 800599e:	f7fa fd9b 	bl	80004d8 <__aeabi_dmul>
 80059a2:	4603      	mov	r3, r0
 80059a4:	460c      	mov	r4, r1
 80059a6:	461a      	mov	r2, r3
 80059a8:	4623      	mov	r3, r4
 80059aa:	4628      	mov	r0, r5
 80059ac:	4631      	mov	r1, r6
 80059ae:	f7fa fbdd 	bl	800016c <__adddf3>
 80059b2:	4603      	mov	r3, r0
 80059b4:	460c      	mov	r4, r1
 80059b6:	4618      	mov	r0, r3
 80059b8:	4621      	mov	r1, r4
 80059ba:	f7fb f865 	bl	8000a88 <__aeabi_d2f>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b84      	ldr	r3, [pc, #528]	; (8005bd4 <main+0x5b4>)
 80059c2:	601a      	str	r2, [r3, #0]

		pid_d = kd*((error - previous_error)/elapsedTime);
 80059c4:	4b84      	ldr	r3, [pc, #528]	; (8005bd8 <main+0x5b8>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	4b86      	ldr	r3, [pc, #536]	; (8005be4 <main+0x5c4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f7fb f8ae 	bl	8000b30 <__aeabi_fsub>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	4b81      	ldr	r3, [pc, #516]	; (8005be0 <main+0x5c0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f7fb fa64 	bl	8000eac <__aeabi_fdiv>
 80059e4:	4603      	mov	r3, r0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fa fd1e 	bl	8000428 <__aeabi_f2d>
 80059ec:	4b7e      	ldr	r3, [pc, #504]	; (8005be8 <main+0x5c8>)
 80059ee:	cb18      	ldmia	r3, {r3, r4}
 80059f0:	461a      	mov	r2, r3
 80059f2:	4623      	mov	r3, r4
 80059f4:	f7fa fd70 	bl	80004d8 <__aeabi_dmul>
 80059f8:	4603      	mov	r3, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	4618      	mov	r0, r3
 80059fe:	4621      	mov	r1, r4
 8005a00:	f7fb f842 	bl	8000a88 <__aeabi_d2f>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b79      	ldr	r3, [pc, #484]	; (8005bec <main+0x5cc>)
 8005a08:	601a      	str	r2, [r3, #0]

		PID = pid_p + pid_i + pid_d;
 8005a0a:	4b79      	ldr	r3, [pc, #484]	; (8005bf0 <main+0x5d0>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b71      	ldr	r3, [pc, #452]	; (8005bd4 <main+0x5b4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f7fb f88d 	bl	8000b34 <__addsf3>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4b73      	ldr	r3, [pc, #460]	; (8005bec <main+0x5cc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f7fb f885 	bl	8000b34 <__addsf3>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4b71      	ldr	r3, [pc, #452]	; (8005bf4 <main+0x5d4>)
 8005a30:	601a      	str	r2, [r3, #0]

		if(PID <= -1000)
 8005a32:	4b70      	ldr	r3, [pc, #448]	; (8005bf4 <main+0x5d4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4970      	ldr	r1, [pc, #448]	; (8005bf8 <main+0x5d8>)
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fb fb2b 	bl	8001094 <__aeabi_fcmple>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <main+0x42a>
		  PID=-1000;
 8005a44:	4b6b      	ldr	r3, [pc, #428]	; (8005bf4 <main+0x5d4>)
 8005a46:	4a6c      	ldr	r2, [pc, #432]	; (8005bf8 <main+0x5d8>)
 8005a48:	601a      	str	r2, [r3, #0]
		if(PID >= 1000)
 8005a4a:	4b6a      	ldr	r3, [pc, #424]	; (8005bf4 <main+0x5d4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	496b      	ldr	r1, [pc, #428]	; (8005bfc <main+0x5dc>)
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fb fb29 	bl	80010a8 <__aeabi_fcmpge>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <main+0x442>
		  PID=1000;
 8005a5c:	4b65      	ldr	r3, [pc, #404]	; (8005bf4 <main+0x5d4>)
 8005a5e:	4a67      	ldr	r2, [pc, #412]	; (8005bfc <main+0x5dc>)
 8005a60:	601a      	str	r2, [r3, #0]


        if(control.valueJoyStick_Y_1<1000 || control.valueJoyStick_Y_1>2000 || control.valueJoyStick_X_1<1000 || control.valueJoyStick_X_1>2000
 8005a62:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <main+0x5e0>)
 8005a64:	88db      	ldrh	r3, [r3, #6]
 8005a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a6a:	d322      	bcc.n	8005ab2 <main+0x492>
 8005a6c:	4b64      	ldr	r3, [pc, #400]	; (8005c00 <main+0x5e0>)
 8005a6e:	88db      	ldrh	r3, [r3, #6]
 8005a70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a74:	d81d      	bhi.n	8005ab2 <main+0x492>
 8005a76:	4b62      	ldr	r3, [pc, #392]	; (8005c00 <main+0x5e0>)
 8005a78:	889b      	ldrh	r3, [r3, #4]
 8005a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a7e:	d318      	bcc.n	8005ab2 <main+0x492>
 8005a80:	4b5f      	ldr	r3, [pc, #380]	; (8005c00 <main+0x5e0>)
 8005a82:	889b      	ldrh	r3, [r3, #4]
 8005a84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a88:	d813      	bhi.n	8005ab2 <main+0x492>
        || control.valueJoyStick_Y_2<1000 || control.valueJoyStick_Y_2>2000 || control.valueJoyStick_X_2<1000 || control.valueJoyStick_X_2>2000)
 8005a8a:	4b5d      	ldr	r3, [pc, #372]	; (8005c00 <main+0x5e0>)
 8005a8c:	895b      	ldrh	r3, [r3, #10]
 8005a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a92:	d30e      	bcc.n	8005ab2 <main+0x492>
 8005a94:	4b5a      	ldr	r3, [pc, #360]	; (8005c00 <main+0x5e0>)
 8005a96:	895b      	ldrh	r3, [r3, #10]
 8005a98:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a9c:	d809      	bhi.n	8005ab2 <main+0x492>
 8005a9e:	4b58      	ldr	r3, [pc, #352]	; (8005c00 <main+0x5e0>)
 8005aa0:	891b      	ldrh	r3, [r3, #8]
 8005aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aa6:	d304      	bcc.n	8005ab2 <main+0x492>
 8005aa8:	4b55      	ldr	r3, [pc, #340]	; (8005c00 <main+0x5e0>)
 8005aaa:	891b      	ldrh	r3, [r3, #8]
 8005aac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005ab0:	d90f      	bls.n	8005ad2 <main+0x4b2>
        {
        	control.valueJoyStick_Y_1 = 1500;
 8005ab2:	4b53      	ldr	r3, [pc, #332]	; (8005c00 <main+0x5e0>)
 8005ab4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005ab8:	80da      	strh	r2, [r3, #6]
        	control.valueJoyStick_X_1 = 1500;
 8005aba:	4b51      	ldr	r3, [pc, #324]	; (8005c00 <main+0x5e0>)
 8005abc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005ac0:	809a      	strh	r2, [r3, #4]
        	control.valueJoyStick_Y_2 = 1500;
 8005ac2:	4b4f      	ldr	r3, [pc, #316]	; (8005c00 <main+0x5e0>)
 8005ac4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005ac8:	815a      	strh	r2, [r3, #10]
        	control.valueJoyStick_X_2 = 1500;
 8005aca:	4b4d      	ldr	r3, [pc, #308]	; (8005c00 <main+0x5e0>)
 8005acc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005ad0:	811a      	strh	r2, [r3, #8]
        }
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, control.valueJoyStick_Y_1);//yukarı
 8005ad2:	4b4b      	ldr	r3, [pc, #300]	; (8005c00 <main+0x5e0>)
 8005ad4:	88da      	ldrh	r2, [r3, #6]
 8005ad6:	4b4b      	ldr	r3, [pc, #300]	; (8005c04 <main+0x5e4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, control.valueJoyStick_Y_1);//control.valueJoyStick_Y_1
 8005adc:	4b48      	ldr	r3, [pc, #288]	; (8005c00 <main+0x5e0>)
 8005ade:	88da      	ldrh	r2, [r3, #6]
 8005ae0:	4b49      	ldr	r3, [pc, #292]	; (8005c08 <main+0x5e8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	635a      	str	r2, [r3, #52]	; 0x34
        pwmLeft + (int)PID
		pwmRight - (int)PID
		pwmRight - (int)PID
		pwmLeft + (int)PID
		*/
    	onsa_deger =  1500 + (int)PID  - (control.valueJoyStick_Y_2 - 1500) + (control.valueJoyStick_X_2 - 1500) + (control.valueJoyStick_X_1 - 1500);
 8005ae6:	4b43      	ldr	r3, [pc, #268]	; (8005bf4 <main+0x5d4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fb faf0 	bl	80010d0 <__aeabi_f2iz>
 8005af0:	4603      	mov	r3, r0
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	4b42      	ldr	r3, [pc, #264]	; (8005c00 <main+0x5e0>)
 8005af6:	895b      	ldrh	r3, [r3, #10]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	4b40      	ldr	r3, [pc, #256]	; (8005c00 <main+0x5e0>)
 8005afe:	891b      	ldrh	r3, [r3, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <main+0x5e0>)
 8005b06:	889b      	ldrh	r3, [r3, #4]
 8005b08:	4413      	add	r3, r2
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <main+0x5ec>)
 8005b0e:	801a      	strh	r2, [r3, #0]
        onso_deger =  1500 - (int)PID  - (control.valueJoyStick_Y_2 - 1500) - (control.valueJoyStick_X_2 - 1500) - (control.valueJoyStick_X_1 - 1500);
 8005b10:	4b38      	ldr	r3, [pc, #224]	; (8005bf4 <main+0x5d4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fb fadb 	bl	80010d0 <__aeabi_f2iz>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	425b      	negs	r3, r3
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	4b37      	ldr	r3, [pc, #220]	; (8005c00 <main+0x5e0>)
 8005b24:	895b      	ldrh	r3, [r3, #10]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	4b35      	ldr	r3, [pc, #212]	; (8005c00 <main+0x5e0>)
 8005b2c:	891b      	ldrh	r3, [r3, #8]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	4b33      	ldr	r3, [pc, #204]	; (8005c00 <main+0x5e0>)
 8005b34:	889b      	ldrh	r3, [r3, #4]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8005b3e:	3310      	adds	r3, #16
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	4b33      	ldr	r3, [pc, #204]	; (8005c10 <main+0x5f0>)
 8005b44:	801a      	strh	r2, [r3, #0]
        arsa_deger =  1500 - (int)PID  + (control.valueJoyStick_Y_2 - 1500) + (control.valueJoyStick_X_2 - 1500) - (control.valueJoyStick_X_1 - 1500);
 8005b46:	4b2e      	ldr	r3, [pc, #184]	; (8005c00 <main+0x5e0>)
 8005b48:	895c      	ldrh	r4, [r3, #10]
 8005b4a:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <main+0x5d4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fb fabe 	bl	80010d0 <__aeabi_f2iz>
 8005b54:	4603      	mov	r3, r0
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	1ae3      	subs	r3, r4, r3
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	4b28      	ldr	r3, [pc, #160]	; (8005c00 <main+0x5e0>)
 8005b5e:	891b      	ldrh	r3, [r3, #8]
 8005b60:	4413      	add	r3, r2
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	4b26      	ldr	r3, [pc, #152]	; (8005c00 <main+0x5e0>)
 8005b66:	889b      	ldrh	r3, [r3, #4]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	4b29      	ldr	r3, [pc, #164]	; (8005c14 <main+0x5f4>)
 8005b6e:	801a      	strh	r2, [r3, #0]
        arso_deger =  1500 + (int)PID + (control.valueJoyStick_Y_2 - 1500) - (control.valueJoyStick_X_2 - 1500) + (control.valueJoyStick_X_1 - 1500);
 8005b70:	4b20      	ldr	r3, [pc, #128]	; (8005bf4 <main+0x5d4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fb faab 	bl	80010d0 <__aeabi_f2iz>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <main+0x5e0>)
 8005b80:	895b      	ldrh	r3, [r3, #10]
 8005b82:	4413      	add	r3, r2
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <main+0x5e0>)
 8005b88:	891b      	ldrh	r3, [r3, #8]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	4b1c      	ldr	r3, [pc, #112]	; (8005c00 <main+0x5e0>)
 8005b90:	889b      	ldrh	r3, [r3, #4]
 8005b92:	4413      	add	r3, r2
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <main+0x5f8>)
 8005b98:	801a      	strh	r2, [r3, #0]

        if (onsa_deger >= 2000)
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <main+0x5ec>)
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005ba2:	d304      	bcc.n	8005bae <main+0x58e>
            onsa_deger = 2000;
 8005ba4:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <main+0x5ec>)
 8005ba6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	e008      	b.n	8005bc0 <main+0x5a0>
        else if (onsa_deger <= 1000)
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <main+0x5ec>)
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb6:	d803      	bhi.n	8005bc0 <main+0x5a0>
            onsa_deger = 1000;
 8005bb8:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <main+0x5ec>)
 8005bba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bbe:	801a      	strh	r2, [r3, #0]
        if (arsa_deger >= 2000)
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <main+0x5f4>)
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005bc8:	d328      	bcc.n	8005c1c <main+0x5fc>
            arsa_deger = 2000;
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <main+0x5f4>)
 8005bcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e02c      	b.n	8005c2e <main+0x60e>
 8005bd4:	20000260 	.word	0x20000260
 8005bd8:	20000254 	.word	0x20000254
 8005bdc:	20000010 	.word	0x20000010
 8005be0:	200002b0 	.word	0x200002b0
 8005be4:	20000258 	.word	0x20000258
 8005be8:	20000018 	.word	0x20000018
 8005bec:	20000264 	.word	0x20000264
 8005bf0:	2000025c 	.word	0x2000025c
 8005bf4:	20000250 	.word	0x20000250
 8005bf8:	c47a0000 	.word	0xc47a0000
 8005bfc:	447a0000 	.word	0x447a0000
 8005c00:	200002a4 	.word	0x200002a4
 8005c04:	20000354 	.word	0x20000354
 8005c08:	20000474 	.word	0x20000474
 8005c0c:	20000450 	.word	0x20000450
 8005c10:	2000034c 	.word	0x2000034c
 8005c14:	20000452 	.word	0x20000452
 8005c18:	200002c0 	.word	0x200002c0
        else if (arsa_deger <= 1000)
 8005c1c:	4b4b      	ldr	r3, [pc, #300]	; (8005d4c <main+0x72c>)
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c24:	d803      	bhi.n	8005c2e <main+0x60e>
            arsa_deger = 1000;
 8005c26:	4b49      	ldr	r3, [pc, #292]	; (8005d4c <main+0x72c>)
 8005c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c2c:	801a      	strh	r2, [r3, #0]
        if (onso_deger >= 2000)
 8005c2e:	4b48      	ldr	r3, [pc, #288]	; (8005d50 <main+0x730>)
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c36:	d304      	bcc.n	8005c42 <main+0x622>
            onso_deger = 2000;
 8005c38:	4b45      	ldr	r3, [pc, #276]	; (8005d50 <main+0x730>)
 8005c3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e008      	b.n	8005c54 <main+0x634>
        else if (onso_deger <= 1000)
 8005c42:	4b43      	ldr	r3, [pc, #268]	; (8005d50 <main+0x730>)
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4a:	d803      	bhi.n	8005c54 <main+0x634>
            onso_deger = 1000;
 8005c4c:	4b40      	ldr	r3, [pc, #256]	; (8005d50 <main+0x730>)
 8005c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c52:	801a      	strh	r2, [r3, #0]
        if (arso_deger >= 2000)
 8005c54:	4b3f      	ldr	r3, [pc, #252]	; (8005d54 <main+0x734>)
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c5c:	d304      	bcc.n	8005c68 <main+0x648>
            arso_deger = 2000;
 8005c5e:	4b3d      	ldr	r3, [pc, #244]	; (8005d54 <main+0x734>)
 8005c60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	e008      	b.n	8005c7a <main+0x65a>
        else if (arso_deger <= 1000)
 8005c68:	4b3a      	ldr	r3, [pc, #232]	; (8005d54 <main+0x734>)
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c70:	d803      	bhi.n	8005c7a <main+0x65a>
            arso_deger = 1000;
 8005c72:	4b38      	ldr	r3, [pc, #224]	; (8005d54 <main+0x734>)
 8005c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c78:	801a      	strh	r2, [r3, #0]

        if(control.desired_angle == 1){
 8005c7a:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <main+0x738>)
 8005c7c:	885b      	ldrh	r3, [r3, #2]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10b      	bne.n	8005c9a <main+0x67a>
        	desired_angle = control.desired_angle*90;
 8005c82:	4b35      	ldr	r3, [pc, #212]	; (8005d58 <main+0x738>)
 8005c84:	885b      	ldrh	r3, [r3, #2]
 8005c86:	461a      	mov	r2, r3
 8005c88:	235a      	movs	r3, #90	; 0x5a
 8005c8a:	fb03 f302 	mul.w	r3, r3, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fb f804 	bl	8000c9c <__aeabi_i2f>
 8005c94:	4602      	mov	r2, r0
 8005c96:	4b31      	ldr	r3, [pc, #196]	; (8005d5c <main+0x73c>)
 8005c98:	601a      	str	r2, [r3, #0]
        }

        //desired_angle = 90*control.desired_angle;

        if(control.valueJoyStick_X_1 != 1500)
 8005c9a:	4b2f      	ldr	r3, [pc, #188]	; (8005d58 <main+0x738>)
 8005c9c:	889b      	ldrh	r3, [r3, #4]
 8005c9e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <main+0x68e>
        desired_angle = AngleZ;
 8005ca6:	4a2d      	ldr	r2, [pc, #180]	; (8005d5c <main+0x73c>)
 8005ca8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005cac:	6013      	str	r3, [r2, #0]

        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, arsa_deger);//arsa_deger
 8005cae:	4b27      	ldr	r3, [pc, #156]	; (8005d4c <main+0x72c>)
 8005cb0:	881a      	ldrh	r2, [r3, #0]
 8005cb2:	4b2b      	ldr	r3, [pc, #172]	; (8005d60 <main+0x740>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, arso_deger);
 8005cb8:	4b26      	ldr	r3, [pc, #152]	; (8005d54 <main+0x734>)
 8005cba:	881a      	ldrh	r2, [r3, #0]
 8005cbc:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <main+0x744>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, onso_deger);
 8005cc2:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <main+0x730>)
 8005cc4:	881a      	ldrh	r2, [r3, #0]
 8005cc6:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <main+0x740>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, onsa_deger);
 8005ccc:	4b26      	ldr	r3, [pc, #152]	; (8005d68 <main+0x748>)
 8005cce:	881a      	ldrh	r2, [r3, #0]
 8005cd0:	4b23      	ldr	r3, [pc, #140]	; (8005d60 <main+0x740>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	63da      	str	r2, [r3, #60]	; 0x3c

        if(control.armco == 1)
 8005cd6:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <main+0x738>)
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d105      	bne.n	8005cea <main+0x6ca>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8005cde:	2201      	movs	r2, #1
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4822      	ldr	r0, [pc, #136]	; (8005d6c <main+0x74c>)
 8005ce4:	f7fd f831 	bl	8002d4a <HAL_GPIO_WritePin>
 8005ce8:	e004      	b.n	8005cf4 <main+0x6d4>
        else
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8005cea:	2200      	movs	r2, #0
 8005cec:	2101      	movs	r1, #1
 8005cee:	481f      	ldr	r0, [pc, #124]	; (8005d6c <main+0x74c>)
 8005cf0:	f7fd f82b 	bl	8002d4a <HAL_GPIO_WritePin>


       // HAL_UART_Transmit(&huart1, (uint8_t*)tx, sprintf(tx, "pid_p: %f pid_i: %f pid_d: %f desired_angle: %f error: %f\n", pid_p,pid_i,pid_d,desired_angle,error), 500);
        //HAL_UART_Transmit(&huart1, (uint8_t*)tx, sprintf(tx, "pwmRight: %d pwmLeft: %d\n", pwmRight,pwmLeft), 500);

        HAL_UART_Transmit(&huart1, (uint8_t*)tx, sprintf(tx, "dataXaxis: %f dataYaxis: %f dataZaxis: %f\n PWML: %d", AngleX, AngleY, AngleZ,pwmLeft), 500);
 8005cf4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8005cf8:	f7fa fb96 	bl	8000428 <__aeabi_f2d>
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	4689      	mov	r9, r1
 8005d00:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8005d04:	f7fa fb90 	bl	8000428 <__aeabi_f2d>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8005d10:	f7fa fb8a 	bl	8000428 <__aeabi_f2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4915      	ldr	r1, [pc, #84]	; (8005d70 <main+0x750>)
 8005d1a:	8809      	ldrh	r1, [r1, #0]
 8005d1c:	1d38      	adds	r0, r7, #4
 8005d1e:	9104      	str	r1, [sp, #16]
 8005d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d24:	e9cd 4500 	strd	r4, r5, [sp]
 8005d28:	4642      	mov	r2, r8
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	4911      	ldr	r1, [pc, #68]	; (8005d74 <main+0x754>)
 8005d2e:	f002 f865 	bl	8007dfc <siprintf>
 8005d32:	4603      	mov	r3, r0
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	1d39      	adds	r1, r7, #4
 8005d38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005d3c:	480e      	ldr	r0, [pc, #56]	; (8005d78 <main+0x758>)
 8005d3e:	f7ff fab2 	bl	80052a6 <HAL_UART_Transmit>

        previous_error = error;
 8005d42:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <main+0x75c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a0e      	ldr	r2, [pc, #56]	; (8005d80 <main+0x760>)
 8005d48:	6013      	str	r3, [r2, #0]
    {
 8005d4a:	e507      	b.n	800575c <main+0x13c>
 8005d4c:	20000452 	.word	0x20000452
 8005d50:	2000034c 	.word	0x2000034c
 8005d54:	200002c0 	.word	0x200002c0
 8005d58:	200002a4 	.word	0x200002a4
 8005d5c:	20000268 	.word	0x20000268
 8005d60:	20000474 	.word	0x20000474
 8005d64:	20000354 	.word	0x20000354
 8005d68:	20000450 	.word	0x20000450
 8005d6c:	40010c00 	.word	0x40010c00
 8005d70:	20000006 	.word	0x20000006
 8005d74:	08009ce4 	.word	0x08009ce4
 8005d78:	200003cc 	.word	0x200003cc
 8005d7c:	20000254 	.word	0x20000254
 8005d80:	20000258 	.word	0x20000258

08005d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b094      	sub	sp, #80	; 0x50
 8005d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d8e:	2228      	movs	r2, #40	; 0x28
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fbda 	bl	800754c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d98:	f107 0314 	add.w	r3, r7, #20
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005da8:	1d3b      	adds	r3, r7, #4
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	605a      	str	r2, [r3, #4]
 8005db0:	609a      	str	r2, [r3, #8]
 8005db2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005dd0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe f864 	bl	8003ea8 <HAL_RCC_OscConfig>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005de6:	f000 fb08 	bl	80063fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005dea:	230f      	movs	r3, #15
 8005dec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005dee:	2302      	movs	r3, #2
 8005df0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dfa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005e00:	f107 0314 	add.w	r3, r7, #20
 8005e04:	2102      	movs	r1, #2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe face 	bl	80043a8 <HAL_RCC_ClockConfig>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005e12:	f000 faf2 	bl	80063fa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005e16:	2302      	movs	r3, #2
 8005e18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe fc5c 	bl	80046e0 <HAL_RCCEx_PeriphCLKConfig>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005e2e:	f000 fae4 	bl	80063fa <Error_Handler>
  }
}
 8005e32:	bf00      	nop
 8005e34:	3750      	adds	r7, #80	; 0x50
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005e4c:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005e4e:	4a21      	ldr	r2, [pc, #132]	; (8005ed4 <MX_ADC1_Init+0x98>)
 8005e50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005e52:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005e66:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005e68:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005e6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e6e:	4b18      	ldr	r3, [pc, #96]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8005e74:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005e76:	2202      	movs	r2, #2
 8005e78:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005e7a:	4815      	ldr	r0, [pc, #84]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005e7c:	f7fb f9d2 	bl	8001224 <HAL_ADC_Init>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8005e86:	f000 fab8 	bl	80063fa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	480d      	ldr	r0, [pc, #52]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005e9c:	f7fb fb94 	bl	80015c8 <HAL_ADC_ConfigChannel>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8005ea6:	f000 faa8 	bl	80063fa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005eb2:	1d3b      	adds	r3, r7, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4806      	ldr	r0, [pc, #24]	; (8005ed0 <MX_ADC1_Init+0x94>)
 8005eb8:	f7fb fb86 	bl	80015c8 <HAL_ADC_ConfigChannel>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8005ec2:	f000 fa9a 	bl	80063fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000398 	.word	0x20000398
 8005ed4:	40012400 	.word	0x40012400

08005ed8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8005edc:	4b17      	ldr	r3, [pc, #92]	; (8005f3c <MX_CAN_Init+0x64>)
 8005ede:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <MX_CAN_Init+0x68>)
 8005ee0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8005ee2:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <MX_CAN_Init+0x64>)
 8005ee4:	2209      	movs	r2, #9
 8005ee6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005ee8:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <MX_CAN_Init+0x64>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <MX_CAN_Init+0x64>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <MX_CAN_Init+0x64>)
 8005ef6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8005efa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <MX_CAN_Init+0x64>)
 8005efe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f02:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <MX_CAN_Init+0x64>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <MX_CAN_Init+0x64>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <MX_CAN_Init+0x64>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8005f16:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <MX_CAN_Init+0x64>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005f1c:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <MX_CAN_Init+0x64>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <MX_CAN_Init+0x64>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005f28:	4804      	ldr	r0, [pc, #16]	; (8005f3c <MX_CAN_Init+0x64>)
 8005f2a:	f7fb fd37 	bl	800199c <HAL_CAN_Init>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8005f34:	f000 fa61 	bl	80063fa <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8005f38:	bf00      	nop
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000324 	.word	0x20000324
 8005f40:	40006400 	.word	0x40006400

08005f44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005f48:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f4a:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <MX_I2C2_Init+0x54>)
 8005f4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005f4e:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f50:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <MX_I2C2_Init+0x58>)
 8005f52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f60:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005f6e:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f74:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f7a:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005f80:	4804      	ldr	r0, [pc, #16]	; (8005f94 <MX_I2C2_Init+0x50>)
 8005f82:	f7fc ff13 	bl	8002dac <HAL_I2C_Init>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005f8c:	f000 fa35 	bl	80063fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005f90:	bf00      	nop
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	200002cc 	.word	0x200002cc
 8005f98:	40005800 	.word	0x40005800
 8005f9c:	000186a0 	.word	0x000186a0

08005fa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fa6:	f107 0320 	add.w	r3, r7, #32
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005fb0:	1d3b      	adds	r3, r7, #4
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	609a      	str	r2, [r3, #8]
 8005fba:	60da      	str	r2, [r3, #12]
 8005fbc:	611a      	str	r2, [r3, #16]
 8005fbe:	615a      	str	r2, [r3, #20]
 8005fc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005fc2:	4b33      	ldr	r3, [pc, #204]	; (8006090 <MX_TIM2_Init+0xf0>)
 8005fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8005fca:	4b31      	ldr	r3, [pc, #196]	; (8006090 <MX_TIM2_Init+0xf0>)
 8005fcc:	2247      	movs	r2, #71	; 0x47
 8005fce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fd0:	4b2f      	ldr	r3, [pc, #188]	; (8006090 <MX_TIM2_Init+0xf0>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8005fd6:	4b2e      	ldr	r3, [pc, #184]	; (8006090 <MX_TIM2_Init+0xf0>)
 8005fd8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005fdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fde:	4b2c      	ldr	r3, [pc, #176]	; (8006090 <MX_TIM2_Init+0xf0>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fe4:	4b2a      	ldr	r3, [pc, #168]	; (8006090 <MX_TIM2_Init+0xf0>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005fea:	4829      	ldr	r0, [pc, #164]	; (8006090 <MX_TIM2_Init+0xf0>)
 8005fec:	f7fe fc51 	bl	8004892 <HAL_TIM_PWM_Init>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8005ff6:	f000 fa00 	bl	80063fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ffe:	2300      	movs	r3, #0
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006002:	f107 0320 	add.w	r3, r7, #32
 8006006:	4619      	mov	r1, r3
 8006008:	4821      	ldr	r0, [pc, #132]	; (8006090 <MX_TIM2_Init+0xf0>)
 800600a:	f7ff f8a9 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8006014:	f000 f9f1 	bl	80063fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006018:	2360      	movs	r3, #96	; 0x60
 800601a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006028:	1d3b      	adds	r3, r7, #4
 800602a:	2200      	movs	r2, #0
 800602c:	4619      	mov	r1, r3
 800602e:	4818      	ldr	r0, [pc, #96]	; (8006090 <MX_TIM2_Init+0xf0>)
 8006030:	f7fe fd94 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800603a:	f000 f9de 	bl	80063fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800603e:	1d3b      	adds	r3, r7, #4
 8006040:	2204      	movs	r2, #4
 8006042:	4619      	mov	r1, r3
 8006044:	4812      	ldr	r0, [pc, #72]	; (8006090 <MX_TIM2_Init+0xf0>)
 8006046:	f7fe fd89 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8006050:	f000 f9d3 	bl	80063fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006054:	1d3b      	adds	r3, r7, #4
 8006056:	2208      	movs	r2, #8
 8006058:	4619      	mov	r1, r3
 800605a:	480d      	ldr	r0, [pc, #52]	; (8006090 <MX_TIM2_Init+0xf0>)
 800605c:	f7fe fd7e 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8006066:	f000 f9c8 	bl	80063fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800606a:	1d3b      	adds	r3, r7, #4
 800606c:	220c      	movs	r2, #12
 800606e:	4619      	mov	r1, r3
 8006070:	4807      	ldr	r0, [pc, #28]	; (8006090 <MX_TIM2_Init+0xf0>)
 8006072:	f7fe fd73 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 800607c:	f000 f9bd 	bl	80063fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006080:	4803      	ldr	r0, [pc, #12]	; (8006090 <MX_TIM2_Init+0xf0>)
 8006082:	f001 f86b 	bl	800715c <HAL_TIM_MspPostInit>

}
 8006086:	bf00      	nop
 8006088:	3728      	adds	r7, #40	; 0x28
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000474 	.word	0x20000474

08006094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800609a:	f107 0320 	add.w	r3, r7, #32
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80060a4:	1d3b      	adds	r3, r7, #4
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	605a      	str	r2, [r3, #4]
 80060ac:	609a      	str	r2, [r3, #8]
 80060ae:	60da      	str	r2, [r3, #12]
 80060b0:	611a      	str	r2, [r3, #16]
 80060b2:	615a      	str	r2, [r3, #20]
 80060b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80060b6:	4b27      	ldr	r3, [pc, #156]	; (8006154 <MX_TIM3_Init+0xc0>)
 80060b8:	4a27      	ldr	r2, [pc, #156]	; (8006158 <MX_TIM3_Init+0xc4>)
 80060ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80060bc:	4b25      	ldr	r3, [pc, #148]	; (8006154 <MX_TIM3_Init+0xc0>)
 80060be:	2247      	movs	r2, #71	; 0x47
 80060c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060c2:	4b24      	ldr	r3, [pc, #144]	; (8006154 <MX_TIM3_Init+0xc0>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80060c8:	4b22      	ldr	r3, [pc, #136]	; (8006154 <MX_TIM3_Init+0xc0>)
 80060ca:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80060ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060d0:	4b20      	ldr	r3, [pc, #128]	; (8006154 <MX_TIM3_Init+0xc0>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060d6:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <MX_TIM3_Init+0xc0>)
 80060d8:	2200      	movs	r2, #0
 80060da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80060dc:	481d      	ldr	r0, [pc, #116]	; (8006154 <MX_TIM3_Init+0xc0>)
 80060de:	f7fe fbd8 	bl	8004892 <HAL_TIM_PWM_Init>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80060e8:	f000 f987 	bl	80063fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060ec:	2300      	movs	r3, #0
 80060ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80060f4:	f107 0320 	add.w	r3, r7, #32
 80060f8:	4619      	mov	r1, r3
 80060fa:	4816      	ldr	r0, [pc, #88]	; (8006154 <MX_TIM3_Init+0xc0>)
 80060fc:	f7ff f830 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006106:	f000 f978 	bl	80063fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800610a:	2360      	movs	r3, #96	; 0x60
 800610c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	2200      	movs	r2, #0
 800611e:	4619      	mov	r1, r3
 8006120:	480c      	ldr	r0, [pc, #48]	; (8006154 <MX_TIM3_Init+0xc0>)
 8006122:	f7fe fd1b 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800612c:	f000 f965 	bl	80063fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006130:	1d3b      	adds	r3, r7, #4
 8006132:	2204      	movs	r2, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4807      	ldr	r0, [pc, #28]	; (8006154 <MX_TIM3_Init+0xc0>)
 8006138:	f7fe fd10 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006142:	f000 f95a 	bl	80063fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006146:	4803      	ldr	r0, [pc, #12]	; (8006154 <MX_TIM3_Init+0xc0>)
 8006148:	f001 f808 	bl	800715c <HAL_TIM_MspPostInit>

}
 800614c:	bf00      	nop
 800614e:	3728      	adds	r7, #40	; 0x28
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000354 	.word	0x20000354
 8006158:	40000400 	.word	0x40000400

0800615c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006160:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <MX_USART1_UART_Init+0x4c>)
 8006162:	4a12      	ldr	r2, [pc, #72]	; (80061ac <MX_USART1_UART_Init+0x50>)
 8006164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <MX_USART1_UART_Init+0x4c>)
 8006168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800616c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800616e:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <MX_USART1_UART_Init+0x4c>)
 8006170:	2200      	movs	r2, #0
 8006172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <MX_USART1_UART_Init+0x4c>)
 8006176:	2200      	movs	r2, #0
 8006178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <MX_USART1_UART_Init+0x4c>)
 800617c:	2200      	movs	r2, #0
 800617e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006180:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <MX_USART1_UART_Init+0x4c>)
 8006182:	220c      	movs	r2, #12
 8006184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006186:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <MX_USART1_UART_Init+0x4c>)
 8006188:	2200      	movs	r2, #0
 800618a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <MX_USART1_UART_Init+0x4c>)
 800618e:	2200      	movs	r2, #0
 8006190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006192:	4805      	ldr	r0, [pc, #20]	; (80061a8 <MX_USART1_UART_Init+0x4c>)
 8006194:	f7ff f83a 	bl	800520c <HAL_UART_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800619e:	f000 f92c 	bl	80063fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200003cc 	.word	0x200003cc
 80061ac:	40013800 	.word	0x40013800

080061b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <MX_DMA_Init+0x38>)
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <MX_DMA_Init+0x38>)
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	6153      	str	r3, [r2, #20]
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <MX_DMA_Init+0x38>)
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80061ce:	2200      	movs	r2, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	200b      	movs	r0, #11
 80061d4:	f7fc fa1f 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80061d8:	200b      	movs	r0, #11
 80061da:	f7fc fa38 	bl	800264e <HAL_NVIC_EnableIRQ>

}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000

080061ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f2:	f107 0310 	add.w	r3, r7, #16
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	609a      	str	r2, [r3, #8]
 80061fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006200:	4b33      	ldr	r3, [pc, #204]	; (80062d0 <MX_GPIO_Init+0xe4>)
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	4a32      	ldr	r2, [pc, #200]	; (80062d0 <MX_GPIO_Init+0xe4>)
 8006206:	f043 0310 	orr.w	r3, r3, #16
 800620a:	6193      	str	r3, [r2, #24]
 800620c:	4b30      	ldr	r3, [pc, #192]	; (80062d0 <MX_GPIO_Init+0xe4>)
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006218:	4b2d      	ldr	r3, [pc, #180]	; (80062d0 <MX_GPIO_Init+0xe4>)
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	4a2c      	ldr	r2, [pc, #176]	; (80062d0 <MX_GPIO_Init+0xe4>)
 800621e:	f043 0320 	orr.w	r3, r3, #32
 8006222:	6193      	str	r3, [r2, #24]
 8006224:	4b2a      	ldr	r3, [pc, #168]	; (80062d0 <MX_GPIO_Init+0xe4>)
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006230:	4b27      	ldr	r3, [pc, #156]	; (80062d0 <MX_GPIO_Init+0xe4>)
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	4a26      	ldr	r2, [pc, #152]	; (80062d0 <MX_GPIO_Init+0xe4>)
 8006236:	f043 0304 	orr.w	r3, r3, #4
 800623a:	6193      	str	r3, [r2, #24]
 800623c:	4b24      	ldr	r3, [pc, #144]	; (80062d0 <MX_GPIO_Init+0xe4>)
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	607b      	str	r3, [r7, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006248:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <MX_GPIO_Init+0xe4>)
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	4a20      	ldr	r2, [pc, #128]	; (80062d0 <MX_GPIO_Init+0xe4>)
 800624e:	f043 0308 	orr.w	r3, r3, #8
 8006252:	6193      	str	r3, [r2, #24]
 8006254:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <MX_GPIO_Init+0xe4>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	603b      	str	r3, [r7, #0]
 800625e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8006260:	2200      	movs	r2, #0
 8006262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006266:	481b      	ldr	r0, [pc, #108]	; (80062d4 <MX_GPIO_Init+0xe8>)
 8006268:	f7fc fd6f 	bl	8002d4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800626c:	2200      	movs	r2, #0
 800626e:	2101      	movs	r1, #1
 8006270:	4819      	ldr	r0, [pc, #100]	; (80062d8 <MX_GPIO_Init+0xec>)
 8006272:	f7fc fd6a 	bl	8002d4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800627a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800627c:	2301      	movs	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006280:	2300      	movs	r3, #0
 8006282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006284:	2302      	movs	r3, #2
 8006286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006288:	f107 0310 	add.w	r3, r7, #16
 800628c:	4619      	mov	r1, r3
 800628e:	4811      	ldr	r0, [pc, #68]	; (80062d4 <MX_GPIO_Init+0xe8>)
 8006290:	f7fc fbea 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006294:	2301      	movs	r3, #1
 8006296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629c:	2300      	movs	r3, #0
 800629e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062a0:	2302      	movs	r3, #2
 80062a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062a4:	f107 0310 	add.w	r3, r7, #16
 80062a8:	4619      	mov	r1, r3
 80062aa:	480b      	ldr	r0, [pc, #44]	; (80062d8 <MX_GPIO_Init+0xec>)
 80062ac:	f7fc fbdc 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80062b0:	2302      	movs	r3, #2
 80062b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062bc:	f107 0310 	add.w	r3, r7, #16
 80062c0:	4619      	mov	r1, r3
 80062c2:	4805      	ldr	r0, [pc, #20]	; (80062d8 <MX_GPIO_Init+0xec>)
 80062c4:	f7fc fbd0 	bl	8002a68 <HAL_GPIO_Init>

}
 80062c8:	bf00      	nop
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40011000 	.word	0x40011000
 80062d8:	40010c00 	.word	0x40010c00

080062dc <HAL_CAN_TxMailbox0CompleteCallback>:

    return level;
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80062e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062e8:	4803      	ldr	r0, [pc, #12]	; (80062f8 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80062ea:	f7fc fd46 	bl	8002d7a <HAL_GPIO_TogglePin>
}
 80062ee:	bf00      	nop
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40011000 	.word	0x40011000

080062fc <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8006306:	4a08      	ldr	r2, [pc, #32]	; (8006328 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8006308:	2100      	movs	r1, #0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fb fd4e 	bl	8001dac <HAL_CAN_GetRxMessage>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8006310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006314:	4805      	ldr	r0, [pc, #20]	; (800632c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8006316:	f7fc fd30 	bl	8002d7a <HAL_GPIO_TogglePin>
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	2000046c 	.word	0x2000046c
 8006328:	200004d0 	.word	0x200004d0
 800632c:	40011000 	.word	0x40011000

08006330 <arming>:
void uartPrintln(UART_HandleTypeDef *huart, char _out[]){
    HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
    char newline[2] = "\r\n";
    HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
}
void arming(){
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
if(armed == 1){
 8006334:	4b26      	ldr	r3, [pc, #152]	; (80063d0 <arming+0xa0>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d146      	bne.n	80063ca <arming+0x9a>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, i);

				HAL_Delay(10);
			}*/

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800633c:	4b25      	ldr	r3, [pc, #148]	; (80063d4 <arming+0xa4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006344:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 8006346:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <arming+0xa4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1000);
 8006350:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <arming+0xa4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006358:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1000);
 800635a:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <arming+0xa4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006362:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 8006364:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <arming+0xa8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800636c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 800636e:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <arming+0xa8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006376:	639a      	str	r2, [r3, #56]	; 0x38

		HAL_Delay(2000);
 8006378:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800637c:	f7fa ff30 	bl	80011e0 <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000);
 8006380:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <arming+0xa4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006388:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2000);
 800638a:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <arming+0xa4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006392:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 2000);
 8006394:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <arming+0xa4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800639c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 2000);
 800639e:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <arming+0xa4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <arming+0xa8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80063b0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000);
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <arming+0xa8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38

		HAL_Delay(500);
 80063bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063c0:	f7fa ff0e 	bl	80011e0 <HAL_Delay>


		armed = 0;
 80063c4:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <arming+0xa0>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
		}
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000005 	.word	0x20000005
 80063d4:	20000474 	.word	0x20000474
 80063d8:	20000354 	.word	0x20000354

080063dc <parseData>:

uint16_t parseData(uint8_t bit8data)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	71fb      	strb	r3, [r7, #7]
	return (bit8data*4)+1000;
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	33fa      	adds	r3, #250	; 0xfa
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	b29b      	uxth	r3, r3
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr

080063fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063fa:	b480      	push	{r7}
 80063fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80063fe:	bf00      	nop
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr
	...

08006408 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4 ((float)8192)
#define MPU6050_ACCE_SENS_8 ((float)4096)
#define MPU6050_ACCE_SENS_16 ((float)2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity, char calibrate)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08e      	sub	sp, #56	; 0x38
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4611      	mov	r1, r2
 8006414:	461a      	mov	r2, r3
 8006416:	460b      	mov	r3, r1
 8006418:	71fb      	strb	r3, [r7, #7]
 800641a:	4613      	mov	r3, r2
 800641c:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800641e:	2375      	movs	r3, #117	; 0x75
 8006420:	74fb      	strb	r3, [r7, #19]
	uint8_t temp;
	I2C_HandleTypeDef *Handle = I2Cx;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];

	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8006426:	79fb      	ldrb	r3, [r7, #7]
 8006428:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800642c:	b2da      	uxtb	r2, r3
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if (HAL_I2C_IsDeviceReady(Handle, address, 2, 5) != HAL_OK)
 8006438:	7efb      	ldrb	r3, [r7, #27]
 800643a:	b299      	uxth	r1, r3
 800643c:	2305      	movs	r3, #5
 800643e:	2202      	movs	r2, #2
 8006440:	69f8      	ldr	r0, [r7, #28]
 8006442:	f7fd f907 	bl	8003654 <HAL_I2C_IsDeviceReady>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <SD_MPU6050_Init+0x48>
	{
		return SD_MPU6050_Result_Error;
 800644c:	2301      	movs	r3, #1
 800644e:	e0c1      	b.n	80065d4 <SD_MPU6050_Init+0x1cc>
	}
	/* Check who am I */
	//------------------
	/* Send address */
	if (HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8006450:	7efb      	ldrb	r3, [r7, #27]
 8006452:	b299      	uxth	r1, r3
 8006454:	f107 0213 	add.w	r2, r7, #19
 8006458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	2301      	movs	r3, #1
 8006460:	69f8      	ldr	r0, [r7, #28]
 8006462:	f7fc fdcb 	bl	8002ffc <HAL_I2C_Master_Transmit>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <SD_MPU6050_Init+0x68>
	{
		return SD_MPU6050_Result_Error;
 800646c:	2301      	movs	r3, #1
 800646e:	e0b1      	b.n	80065d4 <SD_MPU6050_Init+0x1cc>
	}

	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8006470:	7efb      	ldrb	r3, [r7, #27]
 8006472:	b299      	uxth	r1, r3
 8006474:	f107 0212 	add.w	r2, r7, #18
 8006478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	2301      	movs	r3, #1
 8006480:	69f8      	ldr	r0, [r7, #28]
 8006482:	f7fc feb9 	bl	80031f8 <HAL_I2C_Master_Receive>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <SD_MPU6050_Init+0x8c>
	{
		return SD_MPU6050_Result_Error;
 800648c:	2301      	movs	r3, #1
 800648e:	e0a1      	b.n	80065d4 <SD_MPU6050_Init+0x1cc>

	/* Checking */
	while (temp != MPU6050_I_AM)
	{
		/* Return error */
		return SD_MPU6050_Result_DeviceInvalid;
 8006490:	2303      	movs	r3, #3
 8006492:	e09f      	b.n	80065d4 <SD_MPU6050_Init+0x1cc>
	while (temp != MPU6050_I_AM)
 8006494:	bf00      	nop
 8006496:	7cbb      	ldrb	r3, [r7, #18]
 8006498:	2b68      	cmp	r3, #104	; 0x68
 800649a:	d1f9      	bne.n	8006490 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
	/* Format array to send */
	d[0] = MPU6050_PWR_MGMT_1;
 800649c:	236b      	movs	r3, #107	; 0x6b
 800649e:	743b      	strb	r3, [r7, #16]
	d[1] = 0x00;
 80064a0:	2300      	movs	r3, #0
 80064a2:	747b      	strb	r3, [r7, #17]

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)address, (uint8_t *)d, 2, 1000) != HAL_OK)
 80064a4:	7efb      	ldrb	r3, [r7, #27]
 80064a6:	b299      	uxth	r1, r3
 80064a8:	f107 0210 	add.w	r2, r7, #16
 80064ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	2302      	movs	r3, #2
 80064b4:	69f8      	ldr	r0, [r7, #28]
 80064b6:	f7fc fda1 	bl	8002ffc <HAL_I2C_Master_Transmit>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <SD_MPU6050_Init+0xbc>
	{
		return SD_MPU6050_Result_Error;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e087      	b.n	80065d4 <SD_MPU6050_Init+0x1cc>
	}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx, DataStruct, SD_MPU6050_DataRate_1KHz);
 80064c4:	2207      	movs	r2, #7
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f88f 	bl	80065ec <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx, DataStruct, AccelerometerSensitivity);
 80064ce:	79bb      	ldrb	r3, [r7, #6]
 80064d0:	461a      	mov	r2, r3
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f8ad 	bl	8006634 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx, DataStruct, GyroscopeSensitivity);
 80064da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80064de:	461a      	mov	r2, r3
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f916 	bl	8006714 <SD_MPU6050_SetGyroscope>

	_MPU6050gyroOffsetX = 0;
 80064e8:	4b3c      	ldr	r3, [pc, #240]	; (80065dc <SD_MPU6050_Init+0x1d4>)
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
	_MPU6050gyroOffsetY = 0;
 80064f0:	4b3b      	ldr	r3, [pc, #236]	; (80065e0 <SD_MPU6050_Init+0x1d8>)
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
	_MPU6050gyroOffsetZ = 0;
 80064f8:	4b3a      	ldr	r3, [pc, #232]	; (80065e4 <SD_MPU6050_Init+0x1dc>)
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
	HAL_Delay(1000);
 8006500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006504:	f7fa fe6c 	bl	80011e0 <HAL_Delay>
	if (calibrate)
 8006508:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d060      	beq.n	80065d2 <SD_MPU6050_Init+0x1ca>
	{
		float x = 0, y = 0, z = 0;
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
		int16_t rx, ry, rz;
		for (int i = 0; i < 3000; i++)
 8006522:	2300      	movs	r3, #0
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	e033      	b.n	8006590 <SD_MPU6050_Init+0x188>
		{
			SD_MPU6050_ReadGyroscope(I2Cx, DataStruct);
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f966 	bl	80067fc <SD_MPU6050_ReadGyroscope>
			rx = DataStruct->Gyroscope_X;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006534:	833b      	strh	r3, [r7, #24]
			ry = DataStruct->Gyroscope_Y;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800653a:	82fb      	strh	r3, [r7, #22]
			rz = DataStruct->Gyroscope_Z;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006540:	82bb      	strh	r3, [r7, #20]

			x += ((float)rx);
 8006542:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006546:	4618      	mov	r0, r3
 8006548:	f7fa fba8 	bl	8000c9c <__aeabi_i2f>
 800654c:	4603      	mov	r3, r0
 800654e:	4619      	mov	r1, r3
 8006550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006552:	f7fa faef 	bl	8000b34 <__addsf3>
 8006556:	4603      	mov	r3, r0
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
			y += ((float)ry);
 800655a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800655e:	4618      	mov	r0, r3
 8006560:	f7fa fb9c 	bl	8000c9c <__aeabi_i2f>
 8006564:	4603      	mov	r3, r0
 8006566:	4619      	mov	r1, r3
 8006568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656a:	f7fa fae3 	bl	8000b34 <__addsf3>
 800656e:	4603      	mov	r3, r0
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28
			z += ((float)rz);
 8006572:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fa fb90 	bl	8000c9c <__aeabi_i2f>
 800657c:	4603      	mov	r3, r0
 800657e:	4619      	mov	r1, r3
 8006580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006582:	f7fa fad7 	bl	8000b34 <__addsf3>
 8006586:	4603      	mov	r3, r0
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i < 3000; i++)
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	3301      	adds	r3, #1
 800658e:	623b      	str	r3, [r7, #32]
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8006596:	4293      	cmp	r3, r2
 8006598:	ddc6      	ble.n	8006528 <SD_MPU6050_Init+0x120>
		}
		_MPU6050gyroOffsetX = x / 3000;
 800659a:	4913      	ldr	r1, [pc, #76]	; (80065e8 <SD_MPU6050_Init+0x1e0>)
 800659c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800659e:	f7fa fc85 	bl	8000eac <__aeabi_fdiv>
 80065a2:	4603      	mov	r3, r0
 80065a4:	461a      	mov	r2, r3
 80065a6:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <SD_MPU6050_Init+0x1d4>)
 80065a8:	601a      	str	r2, [r3, #0]
		_MPU6050gyroOffsetY = y / 3000;
 80065aa:	490f      	ldr	r1, [pc, #60]	; (80065e8 <SD_MPU6050_Init+0x1e0>)
 80065ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ae:	f7fa fc7d 	bl	8000eac <__aeabi_fdiv>
 80065b2:	4603      	mov	r3, r0
 80065b4:	461a      	mov	r2, r3
 80065b6:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <SD_MPU6050_Init+0x1d8>)
 80065b8:	601a      	str	r2, [r3, #0]
		_MPU6050gyroOffsetZ = z / 3000;
 80065ba:	490b      	ldr	r1, [pc, #44]	; (80065e8 <SD_MPU6050_Init+0x1e0>)
 80065bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065be:	f7fa fc75 	bl	8000eac <__aeabi_fdiv>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <SD_MPU6050_Init+0x1dc>)
 80065c8:	601a      	str	r2, [r3, #0]

		HAL_Delay(2000);
 80065ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80065ce:	f7fa fe07 	bl	80011e0 <HAL_Delay>

	}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3730      	adds	r7, #48	; 0x30
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	200003c8 	.word	0x200003c8
 80065e0:	200004f0 	.word	0x200004f0
 80065e4:	200002c4 	.word	0x200002c4
 80065e8:	453b8000 	.word	0x453b8000

080065ec <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct, uint8_t rate)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef *Handle = I2Cx;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8006604:	2319      	movs	r3, #25
 8006606:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t)address, (uint8_t *)d, 2, 1000) != HAL_OK)
 800660c:	bf00      	nop
 800660e:	7cfb      	ldrb	r3, [r7, #19]
 8006610:	b299      	uxth	r1, r3
 8006612:	f107 0210 	add.w	r2, r7, #16
 8006616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	2302      	movs	r3, #2
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f7fc fcec 	bl	8002ffc <HAL_I2C_Master_Transmit>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f1      	bne.n	800660e <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af02      	add	r7, sp, #8
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	4613      	mov	r3, r2
 8006640:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef *Handle = I2Cx;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd = (uint8_t)MPU6050_ACCEL_CONFIG;
 800664c:	231c      	movs	r3, #28
 800664e:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &regAdd, 1, 1000) != HAL_OK)
 8006650:	bf00      	nop
 8006652:	7cfb      	ldrb	r3, [r7, #19]
 8006654:	b299      	uxth	r1, r3
 8006656:	f107 0211 	add.w	r2, r7, #17
 800665a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2301      	movs	r3, #1
 8006662:	6978      	ldr	r0, [r7, #20]
 8006664:	f7fc fcca 	bl	8002ffc <HAL_I2C_Master_Transmit>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f1      	bne.n	8006652 <SD_MPU6050_SetAccelerometer+0x1e>
		;
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while (HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK)
 800666e:	bf00      	nop
 8006670:	7cfb      	ldrb	r3, [r7, #19]
 8006672:	b299      	uxth	r1, r3
 8006674:	f107 0212 	add.w	r2, r7, #18
 8006678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	2301      	movs	r3, #1
 8006680:	6978      	ldr	r0, [r7, #20]
 8006682:	f7fc fdb9 	bl	80031f8 <HAL_I2C_Master_Receive>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f1      	bne.n	8006670 <SD_MPU6050_SetAccelerometer+0x3c>
		;
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 800668c:	7cbb      	ldrb	r3, [r7, #18]
 800668e:	b25b      	sxtb	r3, r3
 8006690:	f023 0318 	bic.w	r3, r3, #24
 8006694:	b25a      	sxtb	r2, r3
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	b25b      	sxtb	r3, r3
 800669c:	4313      	orrs	r3, r2
 800669e:	b25b      	sxtb	r3, r3
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	74bb      	strb	r3, [r7, #18]
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK)
 80066a4:	bf00      	nop
 80066a6:	7cfb      	ldrb	r3, [r7, #19]
 80066a8:	b299      	uxth	r1, r3
 80066aa:	f107 0212 	add.w	r2, r7, #18
 80066ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	2301      	movs	r3, #1
 80066b6:	6978      	ldr	r0, [r7, #20]
 80066b8:	f7fc fca0 	bl	8002ffc <HAL_I2C_Master_Transmit>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f1      	bne.n	80066a6 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity)
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d81f      	bhi.n	8006708 <SD_MPU6050_SetAccelerometer+0xd4>
 80066c8:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <SD_MPU6050_SetAccelerometer+0x9c>)
 80066ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ce:	bf00      	nop
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066eb 	.word	0x080066eb
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	080066ff 	.word	0x080066ff
	{
	case SD_MPU6050_Accelerometer_2G:
		DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80066e6:	609a      	str	r2, [r3, #8]
		break;
 80066e8:	e00f      	b.n	800670a <SD_MPU6050_SetAccelerometer+0xd6>
	case SD_MPU6050_Accelerometer_4G:
		DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80066f0:	609a      	str	r2, [r3, #8]
		break;
 80066f2:	e00a      	b.n	800670a <SD_MPU6050_SetAccelerometer+0xd6>
	case SD_MPU6050_Accelerometer_8G:
		DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80066fa:	609a      	str	r2, [r3, #8]
		break;
 80066fc:	e005      	b.n	800670a <SD_MPU6050_SetAccelerometer+0xd6>
	case SD_MPU6050_Accelerometer_16G:
		DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8006704:	609a      	str	r2, [r3, #8]
		break;
 8006706:	e000      	b.n	800670a <SD_MPU6050_SetAccelerometer+0xd6>
	default:
		break;
 8006708:	bf00      	nop
	}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef *Handle = I2Cx;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd = (uint8_t)MPU6050_GYRO_CONFIG;
 800672c:	231b      	movs	r3, #27
 800672e:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &regAdd, 1, 1000) != HAL_OK)
 8006730:	bf00      	nop
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	b299      	uxth	r1, r3
 8006736:	f107 0211 	add.w	r2, r7, #17
 800673a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2301      	movs	r3, #1
 8006742:	6978      	ldr	r0, [r7, #20]
 8006744:	f7fc fc5a 	bl	8002ffc <HAL_I2C_Master_Transmit>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f1      	bne.n	8006732 <SD_MPU6050_SetGyroscope+0x1e>
		;
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while (HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK)
 800674e:	bf00      	nop
 8006750:	7cfb      	ldrb	r3, [r7, #19]
 8006752:	b299      	uxth	r1, r3
 8006754:	f107 0212 	add.w	r2, r7, #18
 8006758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	2301      	movs	r3, #1
 8006760:	6978      	ldr	r0, [r7, #20]
 8006762:	f7fc fd49 	bl	80031f8 <HAL_I2C_Master_Receive>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1f1      	bne.n	8006750 <SD_MPU6050_SetGyroscope+0x3c>
		;
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800676c:	7cbb      	ldrb	r3, [r7, #18]
 800676e:	b25b      	sxtb	r3, r3
 8006770:	f023 0318 	bic.w	r3, r3, #24
 8006774:	b25a      	sxtb	r2, r3
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	b25b      	sxtb	r3, r3
 800677c:	4313      	orrs	r3, r2
 800677e:	b25b      	sxtb	r3, r3
 8006780:	b2db      	uxtb	r3, r3
 8006782:	74bb      	strb	r3, [r7, #18]
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK)
 8006784:	bf00      	nop
 8006786:	7cfb      	ldrb	r3, [r7, #19]
 8006788:	b299      	uxth	r1, r3
 800678a:	f107 0212 	add.w	r2, r7, #18
 800678e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	2301      	movs	r3, #1
 8006796:	6978      	ldr	r0, [r7, #20]
 8006798:	f7fc fc30 	bl	8002ffc <HAL_I2C_Master_Transmit>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f1      	bne.n	8006786 <SD_MPU6050_SetGyroscope+0x72>
		;
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity)
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d81b      	bhi.n	80067e0 <SD_MPU6050_SetGyroscope+0xcc>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <SD_MPU6050_SetGyroscope+0x9c>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067c9 	.word	0x080067c9
 80067b8:	080067d1 	.word	0x080067d1
 80067bc:	080067d9 	.word	0x080067d9
	{
	case SD_MPU6050_Gyroscope_250s:
		DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <SD_MPU6050_SetGyroscope+0xd8>)
 80067c4:	605a      	str	r2, [r3, #4]
		break;
 80067c6:	e00c      	b.n	80067e2 <SD_MPU6050_SetGyroscope+0xce>
	case SD_MPU6050_Gyroscope_500s:
		DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <SD_MPU6050_SetGyroscope+0xdc>)
 80067cc:	605a      	str	r2, [r3, #4]
		break;
 80067ce:	e008      	b.n	80067e2 <SD_MPU6050_SetGyroscope+0xce>
	case SD_MPU6050_Gyroscope_1000s:
		DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4a08      	ldr	r2, [pc, #32]	; (80067f4 <SD_MPU6050_SetGyroscope+0xe0>)
 80067d4:	605a      	str	r2, [r3, #4]
		break;
 80067d6:	e004      	b.n	80067e2 <SD_MPU6050_SetGyroscope+0xce>
	case SD_MPU6050_Gyroscope_2000s:
		DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4a07      	ldr	r2, [pc, #28]	; (80067f8 <SD_MPU6050_SetGyroscope+0xe4>)
 80067dc:	605a      	str	r2, [r3, #4]
		break;
 80067de:	e000      	b.n	80067e2 <SD_MPU6050_SetGyroscope+0xce>
	default:
		break;
 80067e0:	bf00      	nop
	}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	3bfa232d 	.word	0x3bfa232d
 80067f0:	3c7a232d 	.word	0x3c7a232d
 80067f4:	3cf9c190 	.word	0x3cf9c190
 80067f8:	3d79c190 	.word	0x3d79c190

080067fc <SD_MPU6050_ReadGyroscope>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af02      	add	r7, sp, #8
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8006806:	2343      	movs	r3, #67	; 0x43
 8006808:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef *Handle = I2Cx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK)
 8006814:	bf00      	nop
 8006816:	7cfb      	ldrb	r3, [r7, #19]
 8006818:	b299      	uxth	r1, r3
 800681a:	f107 020b 	add.w	r2, r7, #11
 800681e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	2301      	movs	r3, #1
 8006826:	6978      	ldr	r0, [r7, #20]
 8006828:	f7fc fbe8 	bl	8002ffc <HAL_I2C_Master_Transmit>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f1      	bne.n	8006816 <SD_MPU6050_ReadGyroscope+0x1a>
		;

	while (HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK)
 8006832:	bf00      	nop
 8006834:	7cfb      	ldrb	r3, [r7, #19]
 8006836:	b299      	uxth	r1, r3
 8006838:	f107 020c 	add.w	r2, r7, #12
 800683c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2306      	movs	r3, #6
 8006844:	6978      	ldr	r0, [r7, #20]
 8006846:	f7fc fcd7 	bl	80031f8 <HAL_I2C_Master_Receive>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f1      	bne.n	8006834 <SD_MPU6050_ReadGyroscope+0x38>
		;

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8006850:	7b3b      	ldrb	r3, [r7, #12]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	b21a      	sxth	r2, r3
 8006856:	7b7b      	ldrb	r3, [r7, #13]
 8006858:	b21b      	sxth	r3, r3
 800685a:	4313      	orrs	r3, r2
 800685c:	b21a      	sxth	r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	865a      	strh	r2, [r3, #50]	; 0x32
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	b21a      	sxth	r2, r3
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	b21b      	sxth	r3, r3
 800686c:	4313      	orrs	r3, r2
 800686e:	b21a      	sxth	r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	869a      	strh	r2, [r3, #52]	; 0x34
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8006874:	7c3b      	ldrb	r3, [r7, #16]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	b21a      	sxth	r2, r3
 800687a:	7c7b      	ldrb	r3, [r7, #17]
 800687c:	b21b      	sxth	r3, r3
 800687e:	4313      	orrs	r3, r2
 8006880:	b21a      	sxth	r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	86da      	strh	r2, [r3, #54]	; 0x36

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08c      	sub	sp, #48	; 0x30
 8006894:	af02      	add	r7, sp, #8
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800689a:	233b      	movs	r3, #59	; 0x3b
 800689c:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *Handle = I2Cx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK)
 80068aa:	bf00      	nop
 80068ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068b0:	b299      	uxth	r1, r3
 80068b2:	f107 020f 	add.w	r2, r7, #15
 80068b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	2301      	movs	r3, #1
 80068be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068c0:	f7fc fb9c 	bl	8002ffc <HAL_I2C_Master_Transmit>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f0      	bne.n	80068ac <SD_MPU6050_ReadAll+0x1c>
		;

	while (HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1000) != HAL_OK)
 80068ca:	bf00      	nop
 80068cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068d0:	b299      	uxth	r1, r3
 80068d2:	f107 0210 	add.w	r2, r7, #16
 80068d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	230e      	movs	r3, #14
 80068de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068e0:	f7fc fc8a 	bl	80031f8 <HAL_I2C_Master_Receive>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <SD_MPU6050_ReadAll+0x3c>
		;

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 80068ea:	7c3b      	ldrb	r3, [r7, #16]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	b21a      	sxth	r2, r3
 80068f0:	7c7b      	ldrb	r3, [r7, #17]
 80068f2:	b21b      	sxth	r3, r3
 80068f4:	4313      	orrs	r3, r2
 80068f6:	b21a      	sxth	r2, r3
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 80068fc:	7cbb      	ldrb	r3, [r7, #18]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	b21a      	sxth	r2, r3
 8006902:	7cfb      	ldrb	r3, [r7, #19]
 8006904:	b21b      	sxth	r3, r3
 8006906:	4313      	orrs	r3, r2
 8006908:	b21a      	sxth	r2, r3
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 800690e:	7d3b      	ldrb	r3, [r7, #20]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	b21a      	sxth	r2, r3
 8006914:	7d7b      	ldrb	r3, [r7, #21]
 8006916:	b21b      	sxth	r3, r3
 8006918:	4313      	orrs	r3, r2
 800691a:	b21a      	sxth	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	861a      	strh	r2, [r3, #48]	; 0x30

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8006920:	7dbb      	ldrb	r3, [r7, #22]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	b21a      	sxth	r2, r3
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	b21b      	sxth	r3, r3
 800692a:	4313      	orrs	r3, r2
 800692c:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 800692e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006932:	4618      	mov	r0, r3
 8006934:	f7fa f9b2 	bl	8000c9c <__aeabi_i2f>
 8006938:	4603      	mov	r3, r0
 800693a:	4916      	ldr	r1, [pc, #88]	; (8006994 <SD_MPU6050_ReadAll+0x104>)
 800693c:	4618      	mov	r0, r3
 800693e:	f7fa fab5 	bl	8000eac <__aeabi_fdiv>
 8006942:	4603      	mov	r3, r0
 8006944:	4914      	ldr	r1, [pc, #80]	; (8006998 <SD_MPU6050_ReadAll+0x108>)
 8006946:	4618      	mov	r0, r3
 8006948:	f7fa f8f4 	bl	8000b34 <__addsf3>
 800694c:	4603      	mov	r3, r0
 800694e:	461a      	mov	r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8006954:	7e3b      	ldrb	r3, [r7, #24]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	b21a      	sxth	r2, r3
 800695a:	7e7b      	ldrb	r3, [r7, #25]
 800695c:	b21b      	sxth	r3, r3
 800695e:	4313      	orrs	r3, r2
 8006960:	b21a      	sxth	r2, r3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	865a      	strh	r2, [r3, #50]	; 0x32
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 8006966:	7ebb      	ldrb	r3, [r7, #26]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	b21a      	sxth	r2, r3
 800696c:	7efb      	ldrb	r3, [r7, #27]
 800696e:	b21b      	sxth	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b21a      	sxth	r2, r3
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	869a      	strh	r2, [r3, #52]	; 0x34
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 8006978:	7f3b      	ldrb	r3, [r7, #28]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	b21a      	sxth	r2, r3
 800697e:	7f7b      	ldrb	r3, [r7, #29]
 8006980:	b21b      	sxth	r3, r3
 8006982:	4313      	orrs	r3, r2
 8006984:	b21a      	sxth	r2, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	86da      	strh	r2, [r3, #54]	; 0x36

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3728      	adds	r7, #40	; 0x28
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	43aa0000 	.word	0x43aa0000
 8006998:	42121eb8 	.word	0x42121eb8
 800699c:	00000000 	.word	0x00000000

080069a0 <SD_MPU6050_ReadAngles>:
	InterruptsStruct->Status = read;
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAngles(I2C_HandleTypeDef* I2Cx, SD_MPU6050* DataStruct)
{
 80069a0:	b5b0      	push	{r4, r5, r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	SD_MPU6050_ReadAll(I2Cx, DataStruct);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff ff6f 	bl	8006890 <SD_MPU6050_ReadAll>

	DataStruct->Accelerometer_X = DataStruct->Accelerometer_X * DataStruct->Acce_Mult;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fa f96f 	bl	8000c9c <__aeabi_i2f>
 80069be:	4602      	mov	r2, r0
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f7fa f9bc 	bl	8000d44 <__aeabi_fmul>
 80069cc:	4603      	mov	r3, r0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fa fb7e 	bl	80010d0 <__aeabi_f2iz>
 80069d4:	4603      	mov	r3, r0
 80069d6:	b21a      	sxth	r2, r3
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Accelerometer_Y = DataStruct->Accelerometer_Y * DataStruct->Acce_Mult;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fa f95a 	bl	8000c9c <__aeabi_i2f>
 80069e8:	4602      	mov	r2, r0
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f7fa f9a7 	bl	8000d44 <__aeabi_fmul>
 80069f6:	4603      	mov	r3, r0
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fa fb69 	bl	80010d0 <__aeabi_f2iz>
 80069fe:	4603      	mov	r3, r0
 8006a00:	b21a      	sxth	r2, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->Accelerometer_Z = DataStruct->Accelerometer_Z * DataStruct->Acce_Mult;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fa f945 	bl	8000c9c <__aeabi_i2f>
 8006a12:	4602      	mov	r2, r0
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f7fa f992 	bl	8000d44 <__aeabi_fmul>
 8006a20:	4603      	mov	r3, r0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fa fb54 	bl	80010d0 <__aeabi_f2iz>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	b21a      	sxth	r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	861a      	strh	r2, [r3, #48]	; 0x30

	DataStruct->AccAngles_X = atan2(DataStruct->Accelerometer_Y, sqrt(DataStruct->Accelerometer_Z * DataStruct->Accelerometer_Z + DataStruct->Accelerometer_X * DataStruct->Accelerometer_X))* 360 / 2.0 / acos(-1);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7f9 fce4 	bl	8000404 <__aeabi_i2d>
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	460d      	mov	r5, r1
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006a46:	461a      	mov	r2, r3
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006a4e:	fb03 f202 	mul.w	r2, r3, r2
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006a58:	4619      	mov	r1, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006a60:	fb03 f301 	mul.w	r3, r3, r1
 8006a64:	4413      	add	r3, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7f9 fccc 	bl	8000404 <__aeabi_i2d>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4610      	mov	r0, r2
 8006a72:	4619      	mov	r1, r3
 8006a74:	f002 fdb0 	bl	80095d8 <sqrt>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f002 fda8 	bl	80095d4 <atan2>
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	4bb7      	ldr	r3, [pc, #732]	; (8006d68 <SD_MPU6050_ReadAngles+0x3c8>)
 8006a8a:	f7f9 fd25 	bl	80004d8 <__aeabi_dmul>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	460c      	mov	r4, r1
 8006a92:	4618      	mov	r0, r3
 8006a94:	4621      	mov	r1, r4
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a9e:	f7f9 fe45 	bl	800072c <__aeabi_ddiv>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	a3a9      	add	r3, pc, #676	; (adr r3, 8006d50 <SD_MPU6050_ReadAngles+0x3b0>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f7f9 fe3c 	bl	800072c <__aeabi_ddiv>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	4618      	mov	r0, r3
 8006aba:	4621      	mov	r1, r4
 8006abc:	f7f9 ffe4 	bl	8000a88 <__aeabi_d2f>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	60da      	str	r2, [r3, #12]
	DataStruct->AccAngles_Y = atan2(DataStruct->Accelerometer_X, sqrt(DataStruct->Accelerometer_Z * DataStruct->Accelerometer_Z + DataStruct->Accelerometer_Y * DataStruct->Accelerometer_Y))* 360 / -2.0 / acos(-1);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7f9 fc99 	bl	8000404 <__aeabi_i2d>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	460d      	mov	r5, r1
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006adc:	461a      	mov	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ae4:	fb03 f202 	mul.w	r2, r3, r2
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8006aee:	4619      	mov	r1, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8006af6:	fb03 f301 	mul.w	r3, r3, r1
 8006afa:	4413      	add	r3, r2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7f9 fc81 	bl	8000404 <__aeabi_i2d>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f002 fd65 	bl	80095d8 <sqrt>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	f002 fd5d 	bl	80095d4 <atan2>
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	4b92      	ldr	r3, [pc, #584]	; (8006d68 <SD_MPU6050_ReadAngles+0x3c8>)
 8006b20:	f7f9 fcda 	bl	80004d8 <__aeabi_dmul>
 8006b24:	4603      	mov	r3, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	4618      	mov	r0, r3
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8006b34:	f7f9 fdfa 	bl	800072c <__aeabi_ddiv>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	4621      	mov	r1, r4
 8006b40:	a383      	add	r3, pc, #524	; (adr r3, 8006d50 <SD_MPU6050_ReadAngles+0x3b0>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fdf1 	bl	800072c <__aeabi_ddiv>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	4618      	mov	r0, r3
 8006b50:	4621      	mov	r1, r4
 8006b52:	f7f9 ff99 	bl	8000a88 <__aeabi_d2f>
 8006b56:	4602      	mov	r2, r0
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	611a      	str	r2, [r3, #16]

	DataStruct->Gyroscope_X -= _MPU6050gyroOffsetX;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fa f89a 	bl	8000c9c <__aeabi_i2f>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	4b80      	ldr	r3, [pc, #512]	; (8006d6c <SD_MPU6050_ReadAngles+0x3cc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4610      	mov	r0, r2
 8006b72:	f7f9 ffdd 	bl	8000b30 <__aeabi_fsub>
 8006b76:	4603      	mov	r3, r0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fa faa9 	bl	80010d0 <__aeabi_f2iz>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	b21a      	sxth	r2, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	865a      	strh	r2, [r3, #50]	; 0x32
	DataStruct->Gyroscope_Y -= _MPU6050gyroOffsetY;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fa f885 	bl	8000c9c <__aeabi_i2f>
 8006b92:	4602      	mov	r2, r0
 8006b94:	4b76      	ldr	r3, [pc, #472]	; (8006d70 <SD_MPU6050_ReadAngles+0x3d0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f7f9 ffc8 	bl	8000b30 <__aeabi_fsub>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fa fa94 	bl	80010d0 <__aeabi_f2iz>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	b21a      	sxth	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	869a      	strh	r2, [r3, #52]	; 0x34
	DataStruct->Gyroscope_Z -= _MPU6050gyroOffsetZ;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fa f870 	bl	8000c9c <__aeabi_i2f>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4b6d      	ldr	r3, [pc, #436]	; (8006d74 <SD_MPU6050_ReadAngles+0x3d4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7f9 ffb3 	bl	8000b30 <__aeabi_fsub>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fa fa7f 	bl	80010d0 <__aeabi_f2iz>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	b21a      	sxth	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	86da      	strh	r2, [r3, #54]	; 0x36

	DataStruct->Gyroscope_X *= DataStruct->Gyro_Mult;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fa f85b 	bl	8000c9c <__aeabi_i2f>
 8006be6:	4602      	mov	r2, r0
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f7fa f8a8 	bl	8000d44 <__aeabi_fmul>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fa fa6a 	bl	80010d0 <__aeabi_f2iz>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	b21a      	sxth	r2, r3
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	865a      	strh	r2, [r3, #50]	; 0x32
	DataStruct->Gyroscope_Y *= DataStruct->Gyro_Mult;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fa f846 	bl	8000c9c <__aeabi_i2f>
 8006c10:	4602      	mov	r2, r0
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f7fa f893 	bl	8000d44 <__aeabi_fmul>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fa fa55 	bl	80010d0 <__aeabi_f2iz>
 8006c26:	4603      	mov	r3, r0
 8006c28:	b21a      	sxth	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	869a      	strh	r2, [r3, #52]	; 0x34
	DataStruct->Gyroscope_Z *= DataStruct->Gyro_Mult;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fa f831 	bl	8000c9c <__aeabi_i2f>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7fa f87e 	bl	8000d44 <__aeabi_fmul>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fa fa40 	bl	80010d0 <__aeabi_f2iz>
 8006c50:	4603      	mov	r3, r0
 8006c52:	b21a      	sxth	r2, r3
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	86da      	strh	r2, [r3, #54]	; 0x36

	uint32_t currentInterval = HAL_GetTick();
 8006c58:	f7fa fab8 	bl	80011cc <HAL_GetTick>
 8006c5c:	60f8      	str	r0, [r7, #12]
	float dT = (currentInterval - _MPU6050preInterval) * 0.001;
 8006c5e:	4b46      	ldr	r3, [pc, #280]	; (8006d78 <SD_MPU6050_ReadAngles+0x3d8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7f9 fbbc 	bl	80003e4 <__aeabi_ui2d>
 8006c6c:	a33a      	add	r3, pc, #232	; (adr r3, 8006d58 <SD_MPU6050_ReadAngles+0x3b8>)
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f7f9 fc31 	bl	80004d8 <__aeabi_dmul>
 8006c76:	4603      	mov	r3, r0
 8006c78:	460c      	mov	r4, r1
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	f7f9 ff03 	bl	8000a88 <__aeabi_d2f>
 8006c82:	4603      	mov	r3, r0
 8006c84:	60bb      	str	r3, [r7, #8]
	_MPU6050preInterval = currentInterval;
 8006c86:	4a3c      	ldr	r2, [pc, #240]	; (8006d78 <SD_MPU6050_ReadAngles+0x3d8>)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6013      	str	r3, [r2, #0]

	DataStruct->GyroAngles_X += DataStruct->Gyroscope_X * dT;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	695c      	ldr	r4, [r3, #20]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fa f800 	bl	8000c9c <__aeabi_i2f>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fa f84f 	bl	8000d44 <__aeabi_fmul>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4620      	mov	r0, r4
 8006cac:	f7f9 ff42 	bl	8000b34 <__addsf3>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	615a      	str	r2, [r3, #20]
	DataStruct->GyroAngles_Y += DataStruct->Gyroscope_Y * dT;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	699c      	ldr	r4, [r3, #24]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7f9 ffea 	bl	8000c9c <__aeabi_i2f>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fa f839 	bl	8000d44 <__aeabi_fmul>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f7f9 ff2c 	bl	8000b34 <__addsf3>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	619a      	str	r2, [r3, #24]
	DataStruct->GyroAngles_Z += DataStruct->Gyroscope_Z * dT;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	69dc      	ldr	r4, [r3, #28]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7f9 ffd4 	bl	8000c9c <__aeabi_i2f>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fa f823 	bl	8000d44 <__aeabi_fmul>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4619      	mov	r1, r3
 8006d02:	4620      	mov	r0, r4
 8006d04:	f7f9 ff16 	bl	8000b34 <__addsf3>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	61da      	str	r2, [r3, #28]

	DataStruct->Angels_X = (0.98 * (DataStruct->Angels_X + DataStruct->Gyroscope_X * dT)) + (0.02 * DataStruct->AccAngles_X);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6a1c      	ldr	r4, [r3, #32]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7f9 ffbe 	bl	8000c9c <__aeabi_i2f>
 8006d20:	4603      	mov	r3, r0
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fa f80d 	bl	8000d44 <__aeabi_fmul>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7f9 ff00 	bl	8000b34 <__addsf3>
 8006d34:	4603      	mov	r3, r0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7f9 fb76 	bl	8000428 <__aeabi_f2d>
 8006d3c:	a308      	add	r3, pc, #32	; (adr r3, 8006d60 <SD_MPU6050_ReadAngles+0x3c0>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 fbc9 	bl	80004d8 <__aeabi_dmul>
 8006d46:	4603      	mov	r3, r0
 8006d48:	e018      	b.n	8006d7c <SD_MPU6050_ReadAngles+0x3dc>
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w
 8006d50:	54442d18 	.word	0x54442d18
 8006d54:	400921fb 	.word	0x400921fb
 8006d58:	d2f1a9fc 	.word	0xd2f1a9fc
 8006d5c:	3f50624d 	.word	0x3f50624d
 8006d60:	f5c28f5c 	.word	0xf5c28f5c
 8006d64:	3fef5c28 	.word	0x3fef5c28
 8006d68:	40768000 	.word	0x40768000
 8006d6c:	200003c8 	.word	0x200003c8
 8006d70:	200004f0 	.word	0x200004f0
 8006d74:	200002c4 	.word	0x200002c4
 8006d78:	200002b4 	.word	0x200002b4
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	4625      	mov	r5, r4
 8006d80:	461c      	mov	r4, r3
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7f9 fb4e 	bl	8000428 <__aeabi_f2d>
 8006d8c:	a32a      	add	r3, pc, #168	; (adr r3, 8006e38 <SD_MPU6050_ReadAngles+0x498>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 fba1 	bl	80004d8 <__aeabi_dmul>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7f9 f9e5 	bl	800016c <__adddf3>
 8006da2:	4603      	mov	r3, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	4618      	mov	r0, r3
 8006da8:	4621      	mov	r1, r4
 8006daa:	f7f9 fe6d 	bl	8000a88 <__aeabi_d2f>
 8006dae:	4602      	mov	r2, r0
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	621a      	str	r2, [r3, #32]
	DataStruct->Angels_Y = (0.98 * (DataStruct->Angels_Y + DataStruct->Gyroscope_Y * dT)) + (0.02 * DataStruct->AccAngles_Y);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7f9 ff6c 	bl	8000c9c <__aeabi_i2f>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7f9 ffbb 	bl	8000d44 <__aeabi_fmul>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f7f9 feae 	bl	8000b34 <__addsf3>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7f9 fb24 	bl	8000428 <__aeabi_f2d>
 8006de0:	a317      	add	r3, pc, #92	; (adr r3, 8006e40 <SD_MPU6050_ReadAngles+0x4a0>)
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f7f9 fb77 	bl	80004d8 <__aeabi_dmul>
 8006dea:	4603      	mov	r3, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	4625      	mov	r5, r4
 8006df0:	461c      	mov	r4, r3
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7f9 fb16 	bl	8000428 <__aeabi_f2d>
 8006dfc:	a30e      	add	r3, pc, #56	; (adr r3, 8006e38 <SD_MPU6050_ReadAngles+0x498>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f7f9 fb69 	bl	80004d8 <__aeabi_dmul>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	f7f9 f9ad 	bl	800016c <__adddf3>
 8006e12:	4603      	mov	r3, r0
 8006e14:	460c      	mov	r4, r1
 8006e16:	4618      	mov	r0, r3
 8006e18:	4621      	mov	r1, r4
 8006e1a:	f7f9 fe35 	bl	8000a88 <__aeabi_d2f>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->Angels_Z = DataStruct->GyroAngles_Z;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	69da      	ldr	r2, [r3, #28]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	629a      	str	r2, [r3, #40]	; 0x28


	return SD_MPU6050_Result_Ok;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bdb0      	pop	{r4, r5, r7, pc}
 8006e36:	bf00      	nop
 8006e38:	47ae147b 	.word	0x47ae147b
 8006e3c:	3f947ae1 	.word	0x3f947ae1
 8006e40:	f5c28f5c 	.word	0xf5c28f5c
 8006e44:	3fef5c28 	.word	0x3fef5c28

08006e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006e4e:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <HAL_MspInit+0x5c>)
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <HAL_MspInit+0x5c>)
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	6193      	str	r3, [r2, #24]
 8006e5a:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <HAL_MspInit+0x5c>)
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	60bb      	str	r3, [r7, #8]
 8006e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <HAL_MspInit+0x5c>)
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ea4 <HAL_MspInit+0x5c>)
 8006e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e70:	61d3      	str	r3, [r2, #28]
 8006e72:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <HAL_MspInit+0x5c>)
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e7a:	607b      	str	r3, [r7, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006e7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <HAL_MspInit+0x60>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	4a04      	ldr	r2, [pc, #16]	; (8006ea8 <HAL_MspInit+0x60>)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	40010000 	.word	0x40010000

08006eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb4:	f107 0310 	add.w	r3, r7, #16
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	605a      	str	r2, [r3, #4]
 8006ebe:	609a      	str	r2, [r3, #8]
 8006ec0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a28      	ldr	r2, [pc, #160]	; (8006f68 <HAL_ADC_MspInit+0xbc>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d149      	bne.n	8006f60 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006ecc:	4b27      	ldr	r3, [pc, #156]	; (8006f6c <HAL_ADC_MspInit+0xc0>)
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	4a26      	ldr	r2, [pc, #152]	; (8006f6c <HAL_ADC_MspInit+0xc0>)
 8006ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ed6:	6193      	str	r3, [r2, #24]
 8006ed8:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <HAL_ADC_MspInit+0xc0>)
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ee4:	4b21      	ldr	r3, [pc, #132]	; (8006f6c <HAL_ADC_MspInit+0xc0>)
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <HAL_ADC_MspInit+0xc0>)
 8006eea:	f043 0304 	orr.w	r3, r3, #4
 8006eee:	6193      	str	r3, [r2, #24]
 8006ef0:	4b1e      	ldr	r3, [pc, #120]	; (8006f6c <HAL_ADC_MspInit+0xc0>)
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	60bb      	str	r3, [r7, #8]
 8006efa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006efc:	2303      	movs	r3, #3
 8006efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f00:	2303      	movs	r3, #3
 8006f02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f04:	f107 0310 	add.w	r3, r7, #16
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4819      	ldr	r0, [pc, #100]	; (8006f70 <HAL_ADC_MspInit+0xc4>)
 8006f0c:	f7fb fdac 	bl	8002a68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006f10:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f12:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <HAL_ADC_MspInit+0xcc>)
 8006f14:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f16:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f1c:	4b15      	ldr	r3, [pc, #84]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006f22:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f24:	2280      	movs	r2, #128	; 0x80
 8006f26:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f28:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f30:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006f38:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006f44:	480b      	ldr	r0, [pc, #44]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f46:	f7fb fba1 	bl	800268c <HAL_DMA_Init>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8006f50:	f7ff fa53 	bl	80063fa <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a07      	ldr	r2, [pc, #28]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f58:	621a      	str	r2, [r3, #32]
 8006f5a:	4a06      	ldr	r2, [pc, #24]	; (8006f74 <HAL_ADC_MspInit+0xc8>)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006f60:	bf00      	nop
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40012400 	.word	0x40012400
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	40010800 	.word	0x40010800
 8006f74:	2000040c 	.word	0x2000040c
 8006f78:	40020008 	.word	0x40020008

08006f7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	609a      	str	r2, [r3, #8]
 8006f90:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a2d      	ldr	r2, [pc, #180]	; (800704c <HAL_CAN_MspInit+0xd0>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d153      	bne.n	8007044 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006f9c:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <HAL_CAN_MspInit+0xd4>)
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	4a2b      	ldr	r2, [pc, #172]	; (8007050 <HAL_CAN_MspInit+0xd4>)
 8006fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fa6:	61d3      	str	r3, [r2, #28]
 8006fa8:	4b29      	ldr	r3, [pc, #164]	; (8007050 <HAL_CAN_MspInit+0xd4>)
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fb4:	4b26      	ldr	r3, [pc, #152]	; (8007050 <HAL_CAN_MspInit+0xd4>)
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	4a25      	ldr	r2, [pc, #148]	; (8007050 <HAL_CAN_MspInit+0xd4>)
 8006fba:	f043 0308 	orr.w	r3, r3, #8
 8006fbe:	6193      	str	r3, [r2, #24]
 8006fc0:	4b23      	ldr	r3, [pc, #140]	; (8007050 <HAL_CAN_MspInit+0xd4>)
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fda:	f107 0314 	add.w	r3, r7, #20
 8006fde:	4619      	mov	r1, r3
 8006fe0:	481c      	ldr	r0, [pc, #112]	; (8007054 <HAL_CAN_MspInit+0xd8>)
 8006fe2:	f7fb fd41 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fec:	2302      	movs	r3, #2
 8006fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ff4:	f107 0314 	add.w	r3, r7, #20
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4816      	ldr	r0, [pc, #88]	; (8007054 <HAL_CAN_MspInit+0xd8>)
 8006ffc:	f7fb fd34 	bl	8002a68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8007000:	4b15      	ldr	r3, [pc, #84]	; (8007058 <HAL_CAN_MspInit+0xdc>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
 800701e:	4a0e      	ldr	r2, [pc, #56]	; (8007058 <HAL_CAN_MspInit+0xdc>)
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8007024:	2200      	movs	r2, #0
 8007026:	2100      	movs	r1, #0
 8007028:	2013      	movs	r0, #19
 800702a:	f7fb faf4 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800702e:	2013      	movs	r0, #19
 8007030:	f7fb fb0d 	bl	800264e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007034:	2200      	movs	r2, #0
 8007036:	2100      	movs	r1, #0
 8007038:	2014      	movs	r0, #20
 800703a:	f7fb faec 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800703e:	2014      	movs	r0, #20
 8007040:	f7fb fb05 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007044:	bf00      	nop
 8007046:	3728      	adds	r7, #40	; 0x28
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40006400 	.word	0x40006400
 8007050:	40021000 	.word	0x40021000
 8007054:	40010c00 	.word	0x40010c00
 8007058:	40010000 	.word	0x40010000

0800705c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007064:	f107 0310 	add.w	r3, r7, #16
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	605a      	str	r2, [r3, #4]
 800706e:	609a      	str	r2, [r3, #8]
 8007070:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <HAL_I2C_MspInit+0x74>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d124      	bne.n	80070c6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800707c:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <HAL_I2C_MspInit+0x78>)
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	4a14      	ldr	r2, [pc, #80]	; (80070d4 <HAL_I2C_MspInit+0x78>)
 8007082:	f043 0308 	orr.w	r3, r3, #8
 8007086:	6193      	str	r3, [r2, #24]
 8007088:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <HAL_I2C_MspInit+0x78>)
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007094:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007098:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800709a:	2312      	movs	r3, #18
 800709c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800709e:	2303      	movs	r3, #3
 80070a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070a2:	f107 0310 	add.w	r3, r7, #16
 80070a6:	4619      	mov	r1, r3
 80070a8:	480b      	ldr	r0, [pc, #44]	; (80070d8 <HAL_I2C_MspInit+0x7c>)
 80070aa:	f7fb fcdd 	bl	8002a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80070ae:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <HAL_I2C_MspInit+0x78>)
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <HAL_I2C_MspInit+0x78>)
 80070b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070b8:	61d3      	str	r3, [r2, #28]
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <HAL_I2C_MspInit+0x78>)
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070c2:	60bb      	str	r3, [r7, #8]
 80070c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80070c6:	bf00      	nop
 80070c8:	3720      	adds	r7, #32
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40005800 	.word	0x40005800
 80070d4:	40021000 	.word	0x40021000
 80070d8:	40010c00 	.word	0x40010c00

080070dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ec:	d114      	bne.n	8007118 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80070ee:	4b19      	ldr	r3, [pc, #100]	; (8007154 <HAL_TIM_PWM_MspInit+0x78>)
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	4a18      	ldr	r2, [pc, #96]	; (8007154 <HAL_TIM_PWM_MspInit+0x78>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	61d3      	str	r3, [r2, #28]
 80070fa:	4b16      	ldr	r3, [pc, #88]	; (8007154 <HAL_TIM_PWM_MspInit+0x78>)
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007106:	2200      	movs	r2, #0
 8007108:	2100      	movs	r1, #0
 800710a:	201c      	movs	r0, #28
 800710c:	f7fb fa83 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007110:	201c      	movs	r0, #28
 8007112:	f7fb fa9c 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007116:	e018      	b.n	800714a <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM3)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a0e      	ldr	r2, [pc, #56]	; (8007158 <HAL_TIM_PWM_MspInit+0x7c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d113      	bne.n	800714a <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007122:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <HAL_TIM_PWM_MspInit+0x78>)
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	4a0b      	ldr	r2, [pc, #44]	; (8007154 <HAL_TIM_PWM_MspInit+0x78>)
 8007128:	f043 0302 	orr.w	r3, r3, #2
 800712c:	61d3      	str	r3, [r2, #28]
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <HAL_TIM_PWM_MspInit+0x78>)
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	60bb      	str	r3, [r7, #8]
 8007138:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800713a:	2200      	movs	r2, #0
 800713c:	2100      	movs	r1, #0
 800713e:	201d      	movs	r0, #29
 8007140:	f7fb fa69 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007144:	201d      	movs	r0, #29
 8007146:	f7fb fa82 	bl	800264e <HAL_NVIC_EnableIRQ>
}
 800714a:	bf00      	nop
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40021000 	.word	0x40021000
 8007158:	40000400 	.word	0x40000400

0800715c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08c      	sub	sp, #48	; 0x30
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007164:	f107 0318 	add.w	r3, r7, #24
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717a:	d143      	bne.n	8007204 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800717c:	4b3b      	ldr	r3, [pc, #236]	; (800726c <HAL_TIM_MspPostInit+0x110>)
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	4a3a      	ldr	r2, [pc, #232]	; (800726c <HAL_TIM_MspPostInit+0x110>)
 8007182:	f043 0304 	orr.w	r3, r3, #4
 8007186:	6193      	str	r3, [r2, #24]
 8007188:	4b38      	ldr	r3, [pc, #224]	; (800726c <HAL_TIM_MspPostInit+0x110>)
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007194:	4b35      	ldr	r3, [pc, #212]	; (800726c <HAL_TIM_MspPostInit+0x110>)
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	4a34      	ldr	r2, [pc, #208]	; (800726c <HAL_TIM_MspPostInit+0x110>)
 800719a:	f043 0308 	orr.w	r3, r3, #8
 800719e:	6193      	str	r3, [r2, #24]
 80071a0:	4b32      	ldr	r3, [pc, #200]	; (800726c <HAL_TIM_MspPostInit+0x110>)
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	693b      	ldr	r3, [r7, #16]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80071ac:	f248 030c 	movw	r3, #32780	; 0x800c
 80071b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b2:	2302      	movs	r3, #2
 80071b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b6:	2302      	movs	r3, #2
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ba:	f107 0318 	add.w	r3, r7, #24
 80071be:	4619      	mov	r1, r3
 80071c0:	482b      	ldr	r0, [pc, #172]	; (8007270 <HAL_TIM_MspPostInit+0x114>)
 80071c2:	f7fb fc51 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80071c6:	2308      	movs	r3, #8
 80071c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ca:	2302      	movs	r3, #2
 80071cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071ce:	2302      	movs	r3, #2
 80071d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071d2:	f107 0318 	add.w	r3, r7, #24
 80071d6:	4619      	mov	r1, r3
 80071d8:	4826      	ldr	r0, [pc, #152]	; (8007274 <HAL_TIM_MspPostInit+0x118>)
 80071da:	f7fb fc45 	bl	8002a68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80071de:	4b26      	ldr	r3, [pc, #152]	; (8007278 <HAL_TIM_MspPostInit+0x11c>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80071fc:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <HAL_TIM_MspPostInit+0x11c>)
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007202:	e02e      	b.n	8007262 <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM3)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1c      	ldr	r2, [pc, #112]	; (800727c <HAL_TIM_MspPostInit+0x120>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d129      	bne.n	8007262 <HAL_TIM_MspPostInit+0x106>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800720e:	4b17      	ldr	r3, [pc, #92]	; (800726c <HAL_TIM_MspPostInit+0x110>)
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	4a16      	ldr	r2, [pc, #88]	; (800726c <HAL_TIM_MspPostInit+0x110>)
 8007214:	f043 0308 	orr.w	r3, r3, #8
 8007218:	6193      	str	r3, [r2, #24]
 800721a:	4b14      	ldr	r3, [pc, #80]	; (800726c <HAL_TIM_MspPostInit+0x110>)
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007226:	2330      	movs	r3, #48	; 0x30
 8007228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800722a:	2302      	movs	r3, #2
 800722c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800722e:	2302      	movs	r3, #2
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007232:	f107 0318 	add.w	r3, r7, #24
 8007236:	4619      	mov	r1, r3
 8007238:	480e      	ldr	r0, [pc, #56]	; (8007274 <HAL_TIM_MspPostInit+0x118>)
 800723a:	f7fb fc15 	bl	8002a68 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800723e:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <HAL_TIM_MspPostInit+0x11c>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007246:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800725c:	4a06      	ldr	r2, [pc, #24]	; (8007278 <HAL_TIM_MspPostInit+0x11c>)
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	6053      	str	r3, [r2, #4]
}
 8007262:	bf00      	nop
 8007264:	3730      	adds	r7, #48	; 0x30
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40021000 	.word	0x40021000
 8007270:	40010800 	.word	0x40010800
 8007274:	40010c00 	.word	0x40010c00
 8007278:	40010000 	.word	0x40010000
 800727c:	40000400 	.word	0x40000400

08007280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007288:	f107 0314 	add.w	r3, r7, #20
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	605a      	str	r2, [r3, #4]
 8007292:	609a      	str	r2, [r3, #8]
 8007294:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_UART_MspInit+0xa4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d13d      	bne.n	800731c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80072a0:	4b21      	ldr	r3, [pc, #132]	; (8007328 <HAL_UART_MspInit+0xa8>)
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	4a20      	ldr	r2, [pc, #128]	; (8007328 <HAL_UART_MspInit+0xa8>)
 80072a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072aa:	6193      	str	r3, [r2, #24]
 80072ac:	4b1e      	ldr	r3, [pc, #120]	; (8007328 <HAL_UART_MspInit+0xa8>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <HAL_UART_MspInit+0xa8>)
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	4a1a      	ldr	r2, [pc, #104]	; (8007328 <HAL_UART_MspInit+0xa8>)
 80072be:	f043 0308 	orr.w	r3, r3, #8
 80072c2:	6193      	str	r3, [r2, #24]
 80072c4:	4b18      	ldr	r3, [pc, #96]	; (8007328 <HAL_UART_MspInit+0xa8>)
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80072d0:	2340      	movs	r3, #64	; 0x40
 80072d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d4:	2302      	movs	r3, #2
 80072d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072d8:	2303      	movs	r3, #3
 80072da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072dc:	f107 0314 	add.w	r3, r7, #20
 80072e0:	4619      	mov	r1, r3
 80072e2:	4812      	ldr	r0, [pc, #72]	; (800732c <HAL_UART_MspInit+0xac>)
 80072e4:	f7fb fbc0 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80072e8:	2380      	movs	r3, #128	; 0x80
 80072ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072f4:	f107 0314 	add.w	r3, r7, #20
 80072f8:	4619      	mov	r1, r3
 80072fa:	480c      	ldr	r0, [pc, #48]	; (800732c <HAL_UART_MspInit+0xac>)
 80072fc:	f7fb fbb4 	bl	8002a68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <HAL_UART_MspInit+0xb0>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	627b      	str	r3, [r7, #36]	; 0x24
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	f043 0304 	orr.w	r3, r3, #4
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
 8007316:	4a06      	ldr	r2, [pc, #24]	; (8007330 <HAL_UART_MspInit+0xb0>)
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800731c:	bf00      	nop
 800731e:	3728      	adds	r7, #40	; 0x28
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40013800 	.word	0x40013800
 8007328:	40021000 	.word	0x40021000
 800732c:	40010c00 	.word	0x40010c00
 8007330:	40010000 	.word	0x40010000

08007334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007338:	bf00      	nop
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr

08007340 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007344:	e7fe      	b.n	8007344 <HardFault_Handler+0x4>

08007346 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007346:	b480      	push	{r7}
 8007348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800734a:	e7fe      	b.n	800734a <MemManage_Handler+0x4>

0800734c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007350:	e7fe      	b.n	8007350 <BusFault_Handler+0x4>

08007352 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007352:	b480      	push	{r7}
 8007354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007356:	e7fe      	b.n	8007356 <UsageFault_Handler+0x4>

08007358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800735c:	bf00      	nop
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr

08007364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr

08007370 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr

0800737c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007380:	f7f9 ff12 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007384:	bf00      	nop
 8007386:	bd80      	pop	{r7, pc}

08007388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800738c:	4802      	ldr	r0, [pc, #8]	; (8007398 <DMA1_Channel1_IRQHandler+0x10>)
 800738e:	f7fb fa37 	bl	8002800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007392:	bf00      	nop
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	2000040c 	.word	0x2000040c

0800739c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80073a0:	4802      	ldr	r0, [pc, #8]	; (80073ac <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80073a2:	f7fa fe39 	bl	8002018 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80073a6:	bf00      	nop
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000324 	.word	0x20000324

080073b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80073b4:	4802      	ldr	r0, [pc, #8]	; (80073c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80073b6:	f7fa fe2f 	bl	8002018 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000324 	.word	0x20000324

080073c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80073c8:	4802      	ldr	r0, [pc, #8]	; (80073d4 <TIM2_IRQHandler+0x10>)
 80073ca:	f7fd fabf 	bl	800494c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80073ce:	bf00      	nop
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000474 	.word	0x20000474

080073d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80073dc:	4802      	ldr	r0, [pc, #8]	; (80073e8 <TIM3_IRQHandler+0x10>)
 80073de:	f7fd fab5 	bl	800494c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80073e2:	bf00      	nop
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000354 	.word	0x20000354

080073ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80073f4:	4b11      	ldr	r3, [pc, #68]	; (800743c <_sbrk+0x50>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <_sbrk+0x16>
		heap_end = &end;
 80073fc:	4b0f      	ldr	r3, [pc, #60]	; (800743c <_sbrk+0x50>)
 80073fe:	4a10      	ldr	r2, [pc, #64]	; (8007440 <_sbrk+0x54>)
 8007400:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007402:	4b0e      	ldr	r3, [pc, #56]	; (800743c <_sbrk+0x50>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <_sbrk+0x50>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	466a      	mov	r2, sp
 8007412:	4293      	cmp	r3, r2
 8007414:	d907      	bls.n	8007426 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007416:	f000 f86f 	bl	80074f8 <__errno>
 800741a:	4602      	mov	r2, r0
 800741c:	230c      	movs	r3, #12
 800741e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007420:	f04f 33ff 	mov.w	r3, #4294967295
 8007424:	e006      	b.n	8007434 <_sbrk+0x48>
	}

	heap_end += incr;
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <_sbrk+0x50>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	4a03      	ldr	r2, [pc, #12]	; (800743c <_sbrk+0x50>)
 8007430:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007432:	68fb      	ldr	r3, [r7, #12]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	2000026c 	.word	0x2000026c
 8007440:	20000500 	.word	0x20000500

08007444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007448:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <SystemInit+0x5c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a14      	ldr	r2, [pc, #80]	; (80074a0 <SystemInit+0x5c>)
 800744e:	f043 0301 	orr.w	r3, r3, #1
 8007452:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007454:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <SystemInit+0x5c>)
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	4911      	ldr	r1, [pc, #68]	; (80074a0 <SystemInit+0x5c>)
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <SystemInit+0x60>)
 800745c:	4013      	ands	r3, r2
 800745e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007460:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <SystemInit+0x5c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a0e      	ldr	r2, [pc, #56]	; (80074a0 <SystemInit+0x5c>)
 8007466:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800746a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800746e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <SystemInit+0x5c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a0a      	ldr	r2, [pc, #40]	; (80074a0 <SystemInit+0x5c>)
 8007476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800747a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800747c:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <SystemInit+0x5c>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4a07      	ldr	r2, [pc, #28]	; (80074a0 <SystemInit+0x5c>)
 8007482:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007486:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007488:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <SystemInit+0x5c>)
 800748a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800748e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <SystemInit+0x64>)
 8007492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007496:	609a      	str	r2, [r3, #8]
#endif 
}
 8007498:	bf00      	nop
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr
 80074a0:	40021000 	.word	0x40021000
 80074a4:	f8ff0000 	.word	0xf8ff0000
 80074a8:	e000ed00 	.word	0xe000ed00

080074ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80074ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80074ae:	e003      	b.n	80074b8 <LoopCopyDataInit>

080074b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80074b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80074b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80074b6:	3104      	adds	r1, #4

080074b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80074b8:	480a      	ldr	r0, [pc, #40]	; (80074e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80074ba:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80074bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80074be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80074c0:	d3f6      	bcc.n	80074b0 <CopyDataInit>
  ldr r2, =_sbss
 80074c2:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80074c4:	e002      	b.n	80074cc <LoopFillZerobss>

080074c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80074c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80074c8:	f842 3b04 	str.w	r3, [r2], #4

080074cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80074cc:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80074ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80074d0:	d3f9      	bcc.n	80074c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80074d2:	f7ff ffb7 	bl	8007444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074d6:	f000 f815 	bl	8007504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80074da:	f7fe f8a1 	bl	8005620 <main>
  bx lr
 80074de:	4770      	bx	lr
  ldr r3, =_sidata
 80074e0:	08009fe0 	.word	0x08009fe0
  ldr r0, =_sdata
 80074e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80074e8:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 80074ec:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 80074f0:	200004fc 	.word	0x200004fc

080074f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80074f4:	e7fe      	b.n	80074f4 <ADC1_2_IRQHandler>
	...

080074f8 <__errno>:
 80074f8:	4b01      	ldr	r3, [pc, #4]	; (8007500 <__errno+0x8>)
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	20000024 	.word	0x20000024

08007504 <__libc_init_array>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	2500      	movs	r5, #0
 8007508:	4e0c      	ldr	r6, [pc, #48]	; (800753c <__libc_init_array+0x38>)
 800750a:	4c0d      	ldr	r4, [pc, #52]	; (8007540 <__libc_init_array+0x3c>)
 800750c:	1ba4      	subs	r4, r4, r6
 800750e:	10a4      	asrs	r4, r4, #2
 8007510:	42a5      	cmp	r5, r4
 8007512:	d109      	bne.n	8007528 <__libc_init_array+0x24>
 8007514:	f002 fbd0 	bl	8009cb8 <_init>
 8007518:	2500      	movs	r5, #0
 800751a:	4e0a      	ldr	r6, [pc, #40]	; (8007544 <__libc_init_array+0x40>)
 800751c:	4c0a      	ldr	r4, [pc, #40]	; (8007548 <__libc_init_array+0x44>)
 800751e:	1ba4      	subs	r4, r4, r6
 8007520:	10a4      	asrs	r4, r4, #2
 8007522:	42a5      	cmp	r5, r4
 8007524:	d105      	bne.n	8007532 <__libc_init_array+0x2e>
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800752c:	4798      	blx	r3
 800752e:	3501      	adds	r5, #1
 8007530:	e7ee      	b.n	8007510 <__libc_init_array+0xc>
 8007532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007536:	4798      	blx	r3
 8007538:	3501      	adds	r5, #1
 800753a:	e7f2      	b.n	8007522 <__libc_init_array+0x1e>
 800753c:	08009fd8 	.word	0x08009fd8
 8007540:	08009fd8 	.word	0x08009fd8
 8007544:	08009fd8 	.word	0x08009fd8
 8007548:	08009fdc 	.word	0x08009fdc

0800754c <memset>:
 800754c:	4603      	mov	r3, r0
 800754e:	4402      	add	r2, r0
 8007550:	4293      	cmp	r3, r2
 8007552:	d100      	bne.n	8007556 <memset+0xa>
 8007554:	4770      	bx	lr
 8007556:	f803 1b01 	strb.w	r1, [r3], #1
 800755a:	e7f9      	b.n	8007550 <memset+0x4>

0800755c <__cvt>:
 800755c:	2b00      	cmp	r3, #0
 800755e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007562:	461e      	mov	r6, r3
 8007564:	bfbb      	ittet	lt
 8007566:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800756a:	461e      	movlt	r6, r3
 800756c:	2300      	movge	r3, #0
 800756e:	232d      	movlt	r3, #45	; 0x2d
 8007570:	b088      	sub	sp, #32
 8007572:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007574:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007578:	f027 0720 	bic.w	r7, r7, #32
 800757c:	2f46      	cmp	r7, #70	; 0x46
 800757e:	4614      	mov	r4, r2
 8007580:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007582:	700b      	strb	r3, [r1, #0]
 8007584:	d004      	beq.n	8007590 <__cvt+0x34>
 8007586:	2f45      	cmp	r7, #69	; 0x45
 8007588:	d100      	bne.n	800758c <__cvt+0x30>
 800758a:	3501      	adds	r5, #1
 800758c:	2302      	movs	r3, #2
 800758e:	e000      	b.n	8007592 <__cvt+0x36>
 8007590:	2303      	movs	r3, #3
 8007592:	aa07      	add	r2, sp, #28
 8007594:	9204      	str	r2, [sp, #16]
 8007596:	aa06      	add	r2, sp, #24
 8007598:	e9cd a202 	strd	sl, r2, [sp, #8]
 800759c:	e9cd 3500 	strd	r3, r5, [sp]
 80075a0:	4622      	mov	r2, r4
 80075a2:	4633      	mov	r3, r6
 80075a4:	f000 fcd8 	bl	8007f58 <_dtoa_r>
 80075a8:	2f47      	cmp	r7, #71	; 0x47
 80075aa:	4680      	mov	r8, r0
 80075ac:	d102      	bne.n	80075b4 <__cvt+0x58>
 80075ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075b0:	07db      	lsls	r3, r3, #31
 80075b2:	d526      	bpl.n	8007602 <__cvt+0xa6>
 80075b4:	2f46      	cmp	r7, #70	; 0x46
 80075b6:	eb08 0905 	add.w	r9, r8, r5
 80075ba:	d111      	bne.n	80075e0 <__cvt+0x84>
 80075bc:	f898 3000 	ldrb.w	r3, [r8]
 80075c0:	2b30      	cmp	r3, #48	; 0x30
 80075c2:	d10a      	bne.n	80075da <__cvt+0x7e>
 80075c4:	2200      	movs	r2, #0
 80075c6:	2300      	movs	r3, #0
 80075c8:	4620      	mov	r0, r4
 80075ca:	4631      	mov	r1, r6
 80075cc:	f7f9 f9ec 	bl	80009a8 <__aeabi_dcmpeq>
 80075d0:	b918      	cbnz	r0, 80075da <__cvt+0x7e>
 80075d2:	f1c5 0501 	rsb	r5, r5, #1
 80075d6:	f8ca 5000 	str.w	r5, [sl]
 80075da:	f8da 3000 	ldr.w	r3, [sl]
 80075de:	4499      	add	r9, r3
 80075e0:	2200      	movs	r2, #0
 80075e2:	2300      	movs	r3, #0
 80075e4:	4620      	mov	r0, r4
 80075e6:	4631      	mov	r1, r6
 80075e8:	f7f9 f9de 	bl	80009a8 <__aeabi_dcmpeq>
 80075ec:	b938      	cbnz	r0, 80075fe <__cvt+0xa2>
 80075ee:	2230      	movs	r2, #48	; 0x30
 80075f0:	9b07      	ldr	r3, [sp, #28]
 80075f2:	454b      	cmp	r3, r9
 80075f4:	d205      	bcs.n	8007602 <__cvt+0xa6>
 80075f6:	1c59      	adds	r1, r3, #1
 80075f8:	9107      	str	r1, [sp, #28]
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e7f8      	b.n	80075f0 <__cvt+0x94>
 80075fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8007602:	4640      	mov	r0, r8
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007608:	eba3 0308 	sub.w	r3, r3, r8
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	b008      	add	sp, #32
 8007610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007614 <__exponent>:
 8007614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007616:	2900      	cmp	r1, #0
 8007618:	bfb4      	ite	lt
 800761a:	232d      	movlt	r3, #45	; 0x2d
 800761c:	232b      	movge	r3, #43	; 0x2b
 800761e:	4604      	mov	r4, r0
 8007620:	bfb8      	it	lt
 8007622:	4249      	neglt	r1, r1
 8007624:	2909      	cmp	r1, #9
 8007626:	f804 2b02 	strb.w	r2, [r4], #2
 800762a:	7043      	strb	r3, [r0, #1]
 800762c:	dd21      	ble.n	8007672 <__exponent+0x5e>
 800762e:	f10d 0307 	add.w	r3, sp, #7
 8007632:	461f      	mov	r7, r3
 8007634:	260a      	movs	r6, #10
 8007636:	fb91 f5f6 	sdiv	r5, r1, r6
 800763a:	fb06 1115 	mls	r1, r6, r5, r1
 800763e:	2d09      	cmp	r5, #9
 8007640:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007644:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007648:	f103 32ff 	add.w	r2, r3, #4294967295
 800764c:	4629      	mov	r1, r5
 800764e:	dc09      	bgt.n	8007664 <__exponent+0x50>
 8007650:	3130      	adds	r1, #48	; 0x30
 8007652:	3b02      	subs	r3, #2
 8007654:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007658:	42bb      	cmp	r3, r7
 800765a:	4622      	mov	r2, r4
 800765c:	d304      	bcc.n	8007668 <__exponent+0x54>
 800765e:	1a10      	subs	r0, r2, r0
 8007660:	b003      	add	sp, #12
 8007662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007664:	4613      	mov	r3, r2
 8007666:	e7e6      	b.n	8007636 <__exponent+0x22>
 8007668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800766c:	f804 2b01 	strb.w	r2, [r4], #1
 8007670:	e7f2      	b.n	8007658 <__exponent+0x44>
 8007672:	2330      	movs	r3, #48	; 0x30
 8007674:	4419      	add	r1, r3
 8007676:	7083      	strb	r3, [r0, #2]
 8007678:	1d02      	adds	r2, r0, #4
 800767a:	70c1      	strb	r1, [r0, #3]
 800767c:	e7ef      	b.n	800765e <__exponent+0x4a>
	...

08007680 <_printf_float>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	b091      	sub	sp, #68	; 0x44
 8007686:	460c      	mov	r4, r1
 8007688:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800768a:	4693      	mov	fp, r2
 800768c:	461e      	mov	r6, r3
 800768e:	4605      	mov	r5, r0
 8007690:	f001 fa16 	bl	8008ac0 <_localeconv_r>
 8007694:	6803      	ldr	r3, [r0, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	9309      	str	r3, [sp, #36]	; 0x24
 800769a:	f7f8 fd59 	bl	8000150 <strlen>
 800769e:	2300      	movs	r3, #0
 80076a0:	930e      	str	r3, [sp, #56]	; 0x38
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	900a      	str	r0, [sp, #40]	; 0x28
 80076a6:	3307      	adds	r3, #7
 80076a8:	f023 0307 	bic.w	r3, r3, #7
 80076ac:	f103 0208 	add.w	r2, r3, #8
 80076b0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80076b4:	f8d4 a000 	ldr.w	sl, [r4]
 80076b8:	603a      	str	r2, [r7, #0]
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076c2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80076c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295
 80076d0:	4ba6      	ldr	r3, [pc, #664]	; (800796c <_printf_float+0x2ec>)
 80076d2:	4638      	mov	r0, r7
 80076d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076d6:	f7f9 f999 	bl	8000a0c <__aeabi_dcmpun>
 80076da:	bb68      	cbnz	r0, 8007738 <_printf_float+0xb8>
 80076dc:	f04f 32ff 	mov.w	r2, #4294967295
 80076e0:	4ba2      	ldr	r3, [pc, #648]	; (800796c <_printf_float+0x2ec>)
 80076e2:	4638      	mov	r0, r7
 80076e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076e6:	f7f9 f973 	bl	80009d0 <__aeabi_dcmple>
 80076ea:	bb28      	cbnz	r0, 8007738 <_printf_float+0xb8>
 80076ec:	2200      	movs	r2, #0
 80076ee:	2300      	movs	r3, #0
 80076f0:	4638      	mov	r0, r7
 80076f2:	4649      	mov	r1, r9
 80076f4:	f7f9 f962 	bl	80009bc <__aeabi_dcmplt>
 80076f8:	b110      	cbz	r0, 8007700 <_printf_float+0x80>
 80076fa:	232d      	movs	r3, #45	; 0x2d
 80076fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007700:	4f9b      	ldr	r7, [pc, #620]	; (8007970 <_printf_float+0x2f0>)
 8007702:	4b9c      	ldr	r3, [pc, #624]	; (8007974 <_printf_float+0x2f4>)
 8007704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007708:	bf98      	it	ls
 800770a:	461f      	movls	r7, r3
 800770c:	2303      	movs	r3, #3
 800770e:	f04f 0900 	mov.w	r9, #0
 8007712:	6123      	str	r3, [r4, #16]
 8007714:	f02a 0304 	bic.w	r3, sl, #4
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	9600      	str	r6, [sp, #0]
 800771c:	465b      	mov	r3, fp
 800771e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007720:	4621      	mov	r1, r4
 8007722:	4628      	mov	r0, r5
 8007724:	f000 f9e2 	bl	8007aec <_printf_common>
 8007728:	3001      	adds	r0, #1
 800772a:	f040 8090 	bne.w	800784e <_printf_float+0x1ce>
 800772e:	f04f 30ff 	mov.w	r0, #4294967295
 8007732:	b011      	add	sp, #68	; 0x44
 8007734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007738:	463a      	mov	r2, r7
 800773a:	464b      	mov	r3, r9
 800773c:	4638      	mov	r0, r7
 800773e:	4649      	mov	r1, r9
 8007740:	f7f9 f964 	bl	8000a0c <__aeabi_dcmpun>
 8007744:	b110      	cbz	r0, 800774c <_printf_float+0xcc>
 8007746:	4f8c      	ldr	r7, [pc, #560]	; (8007978 <_printf_float+0x2f8>)
 8007748:	4b8c      	ldr	r3, [pc, #560]	; (800797c <_printf_float+0x2fc>)
 800774a:	e7db      	b.n	8007704 <_printf_float+0x84>
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007752:	1c59      	adds	r1, r3, #1
 8007754:	a80d      	add	r0, sp, #52	; 0x34
 8007756:	a90e      	add	r1, sp, #56	; 0x38
 8007758:	d140      	bne.n	80077dc <_printf_float+0x15c>
 800775a:	2306      	movs	r3, #6
 800775c:	6063      	str	r3, [r4, #4]
 800775e:	f04f 0c00 	mov.w	ip, #0
 8007762:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007766:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800776a:	6863      	ldr	r3, [r4, #4]
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	463a      	mov	r2, r7
 8007776:	464b      	mov	r3, r9
 8007778:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800777c:	4628      	mov	r0, r5
 800777e:	f7ff feed 	bl	800755c <__cvt>
 8007782:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007786:	2b47      	cmp	r3, #71	; 0x47
 8007788:	4607      	mov	r7, r0
 800778a:	d109      	bne.n	80077a0 <_printf_float+0x120>
 800778c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800778e:	1cd8      	adds	r0, r3, #3
 8007790:	db02      	blt.n	8007798 <_printf_float+0x118>
 8007792:	6862      	ldr	r2, [r4, #4]
 8007794:	4293      	cmp	r3, r2
 8007796:	dd47      	ble.n	8007828 <_printf_float+0x1a8>
 8007798:	f1a8 0802 	sub.w	r8, r8, #2
 800779c:	fa5f f888 	uxtb.w	r8, r8
 80077a0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80077a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077a6:	d824      	bhi.n	80077f2 <_printf_float+0x172>
 80077a8:	3901      	subs	r1, #1
 80077aa:	4642      	mov	r2, r8
 80077ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077b0:	910d      	str	r1, [sp, #52]	; 0x34
 80077b2:	f7ff ff2f 	bl	8007614 <__exponent>
 80077b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077b8:	4681      	mov	r9, r0
 80077ba:	1813      	adds	r3, r2, r0
 80077bc:	2a01      	cmp	r2, #1
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	dc02      	bgt.n	80077c8 <_printf_float+0x148>
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	07d1      	lsls	r1, r2, #31
 80077c6:	d501      	bpl.n	80077cc <_printf_float+0x14c>
 80077c8:	3301      	adds	r3, #1
 80077ca:	6123      	str	r3, [r4, #16]
 80077cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0a2      	beq.n	800771a <_printf_float+0x9a>
 80077d4:	232d      	movs	r3, #45	; 0x2d
 80077d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077da:	e79e      	b.n	800771a <_printf_float+0x9a>
 80077dc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80077e0:	f000 816e 	beq.w	8007ac0 <_printf_float+0x440>
 80077e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077e8:	d1b9      	bne.n	800775e <_printf_float+0xde>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1b7      	bne.n	800775e <_printf_float+0xde>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e7b4      	b.n	800775c <_printf_float+0xdc>
 80077f2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80077f6:	d119      	bne.n	800782c <_printf_float+0x1ac>
 80077f8:	2900      	cmp	r1, #0
 80077fa:	6863      	ldr	r3, [r4, #4]
 80077fc:	dd0c      	ble.n	8007818 <_printf_float+0x198>
 80077fe:	6121      	str	r1, [r4, #16]
 8007800:	b913      	cbnz	r3, 8007808 <_printf_float+0x188>
 8007802:	6822      	ldr	r2, [r4, #0]
 8007804:	07d2      	lsls	r2, r2, #31
 8007806:	d502      	bpl.n	800780e <_printf_float+0x18e>
 8007808:	3301      	adds	r3, #1
 800780a:	440b      	add	r3, r1
 800780c:	6123      	str	r3, [r4, #16]
 800780e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007810:	f04f 0900 	mov.w	r9, #0
 8007814:	65a3      	str	r3, [r4, #88]	; 0x58
 8007816:	e7d9      	b.n	80077cc <_printf_float+0x14c>
 8007818:	b913      	cbnz	r3, 8007820 <_printf_float+0x1a0>
 800781a:	6822      	ldr	r2, [r4, #0]
 800781c:	07d0      	lsls	r0, r2, #31
 800781e:	d501      	bpl.n	8007824 <_printf_float+0x1a4>
 8007820:	3302      	adds	r3, #2
 8007822:	e7f3      	b.n	800780c <_printf_float+0x18c>
 8007824:	2301      	movs	r3, #1
 8007826:	e7f1      	b.n	800780c <_printf_float+0x18c>
 8007828:	f04f 0867 	mov.w	r8, #103	; 0x67
 800782c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007830:	4293      	cmp	r3, r2
 8007832:	db05      	blt.n	8007840 <_printf_float+0x1c0>
 8007834:	6822      	ldr	r2, [r4, #0]
 8007836:	6123      	str	r3, [r4, #16]
 8007838:	07d1      	lsls	r1, r2, #31
 800783a:	d5e8      	bpl.n	800780e <_printf_float+0x18e>
 800783c:	3301      	adds	r3, #1
 800783e:	e7e5      	b.n	800780c <_printf_float+0x18c>
 8007840:	2b00      	cmp	r3, #0
 8007842:	bfcc      	ite	gt
 8007844:	2301      	movgt	r3, #1
 8007846:	f1c3 0302 	rsble	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	e7de      	b.n	800780c <_printf_float+0x18c>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	055a      	lsls	r2, r3, #21
 8007852:	d407      	bmi.n	8007864 <_printf_float+0x1e4>
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	463a      	mov	r2, r7
 8007858:	4659      	mov	r1, fp
 800785a:	4628      	mov	r0, r5
 800785c:	47b0      	blx	r6
 800785e:	3001      	adds	r0, #1
 8007860:	d129      	bne.n	80078b6 <_printf_float+0x236>
 8007862:	e764      	b.n	800772e <_printf_float+0xae>
 8007864:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007868:	f240 80d7 	bls.w	8007a1a <_printf_float+0x39a>
 800786c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007870:	2200      	movs	r2, #0
 8007872:	2300      	movs	r3, #0
 8007874:	f7f9 f898 	bl	80009a8 <__aeabi_dcmpeq>
 8007878:	b388      	cbz	r0, 80078de <_printf_float+0x25e>
 800787a:	2301      	movs	r3, #1
 800787c:	4a40      	ldr	r2, [pc, #256]	; (8007980 <_printf_float+0x300>)
 800787e:	4659      	mov	r1, fp
 8007880:	4628      	mov	r0, r5
 8007882:	47b0      	blx	r6
 8007884:	3001      	adds	r0, #1
 8007886:	f43f af52 	beq.w	800772e <_printf_float+0xae>
 800788a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800788e:	429a      	cmp	r2, r3
 8007890:	db02      	blt.n	8007898 <_printf_float+0x218>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	07d8      	lsls	r0, r3, #31
 8007896:	d50e      	bpl.n	80078b6 <_printf_float+0x236>
 8007898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800789c:	4659      	mov	r1, fp
 800789e:	4628      	mov	r0, r5
 80078a0:	47b0      	blx	r6
 80078a2:	3001      	adds	r0, #1
 80078a4:	f43f af43 	beq.w	800772e <_printf_float+0xae>
 80078a8:	2700      	movs	r7, #0
 80078aa:	f104 081a 	add.w	r8, r4, #26
 80078ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b0:	3b01      	subs	r3, #1
 80078b2:	42bb      	cmp	r3, r7
 80078b4:	dc09      	bgt.n	80078ca <_printf_float+0x24a>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	079f      	lsls	r7, r3, #30
 80078ba:	f100 80fd 	bmi.w	8007ab8 <_printf_float+0x438>
 80078be:	68e0      	ldr	r0, [r4, #12]
 80078c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078c2:	4298      	cmp	r0, r3
 80078c4:	bfb8      	it	lt
 80078c6:	4618      	movlt	r0, r3
 80078c8:	e733      	b.n	8007732 <_printf_float+0xb2>
 80078ca:	2301      	movs	r3, #1
 80078cc:	4642      	mov	r2, r8
 80078ce:	4659      	mov	r1, fp
 80078d0:	4628      	mov	r0, r5
 80078d2:	47b0      	blx	r6
 80078d4:	3001      	adds	r0, #1
 80078d6:	f43f af2a 	beq.w	800772e <_printf_float+0xae>
 80078da:	3701      	adds	r7, #1
 80078dc:	e7e7      	b.n	80078ae <_printf_float+0x22e>
 80078de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dc2b      	bgt.n	800793c <_printf_float+0x2bc>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4a26      	ldr	r2, [pc, #152]	; (8007980 <_printf_float+0x300>)
 80078e8:	4659      	mov	r1, fp
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b0      	blx	r6
 80078ee:	3001      	adds	r0, #1
 80078f0:	f43f af1d 	beq.w	800772e <_printf_float+0xae>
 80078f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f6:	b923      	cbnz	r3, 8007902 <_printf_float+0x282>
 80078f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078fa:	b913      	cbnz	r3, 8007902 <_printf_float+0x282>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	07d9      	lsls	r1, r3, #31
 8007900:	d5d9      	bpl.n	80078b6 <_printf_float+0x236>
 8007902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007906:	4659      	mov	r1, fp
 8007908:	4628      	mov	r0, r5
 800790a:	47b0      	blx	r6
 800790c:	3001      	adds	r0, #1
 800790e:	f43f af0e 	beq.w	800772e <_printf_float+0xae>
 8007912:	f04f 0800 	mov.w	r8, #0
 8007916:	f104 091a 	add.w	r9, r4, #26
 800791a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800791c:	425b      	negs	r3, r3
 800791e:	4543      	cmp	r3, r8
 8007920:	dc01      	bgt.n	8007926 <_printf_float+0x2a6>
 8007922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007924:	e797      	b.n	8007856 <_printf_float+0x1d6>
 8007926:	2301      	movs	r3, #1
 8007928:	464a      	mov	r2, r9
 800792a:	4659      	mov	r1, fp
 800792c:	4628      	mov	r0, r5
 800792e:	47b0      	blx	r6
 8007930:	3001      	adds	r0, #1
 8007932:	f43f aefc 	beq.w	800772e <_printf_float+0xae>
 8007936:	f108 0801 	add.w	r8, r8, #1
 800793a:	e7ee      	b.n	800791a <_printf_float+0x29a>
 800793c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800793e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007940:	429a      	cmp	r2, r3
 8007942:	bfa8      	it	ge
 8007944:	461a      	movge	r2, r3
 8007946:	2a00      	cmp	r2, #0
 8007948:	4690      	mov	r8, r2
 800794a:	dd07      	ble.n	800795c <_printf_float+0x2dc>
 800794c:	4613      	mov	r3, r2
 800794e:	4659      	mov	r1, fp
 8007950:	463a      	mov	r2, r7
 8007952:	4628      	mov	r0, r5
 8007954:	47b0      	blx	r6
 8007956:	3001      	adds	r0, #1
 8007958:	f43f aee9 	beq.w	800772e <_printf_float+0xae>
 800795c:	f104 031a 	add.w	r3, r4, #26
 8007960:	f04f 0a00 	mov.w	sl, #0
 8007964:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007968:	930b      	str	r3, [sp, #44]	; 0x2c
 800796a:	e015      	b.n	8007998 <_printf_float+0x318>
 800796c:	7fefffff 	.word	0x7fefffff
 8007970:	08009d34 	.word	0x08009d34
 8007974:	08009d30 	.word	0x08009d30
 8007978:	08009d3c 	.word	0x08009d3c
 800797c:	08009d38 	.word	0x08009d38
 8007980:	08009d40 	.word	0x08009d40
 8007984:	2301      	movs	r3, #1
 8007986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007988:	4659      	mov	r1, fp
 800798a:	4628      	mov	r0, r5
 800798c:	47b0      	blx	r6
 800798e:	3001      	adds	r0, #1
 8007990:	f43f aecd 	beq.w	800772e <_printf_float+0xae>
 8007994:	f10a 0a01 	add.w	sl, sl, #1
 8007998:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800799c:	eba9 0308 	sub.w	r3, r9, r8
 80079a0:	4553      	cmp	r3, sl
 80079a2:	dcef      	bgt.n	8007984 <_printf_float+0x304>
 80079a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80079a8:	429a      	cmp	r2, r3
 80079aa:	444f      	add	r7, r9
 80079ac:	db14      	blt.n	80079d8 <_printf_float+0x358>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	07da      	lsls	r2, r3, #31
 80079b2:	d411      	bmi.n	80079d8 <_printf_float+0x358>
 80079b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079b8:	eba3 0209 	sub.w	r2, r3, r9
 80079bc:	eba3 0901 	sub.w	r9, r3, r1
 80079c0:	4591      	cmp	r9, r2
 80079c2:	bfa8      	it	ge
 80079c4:	4691      	movge	r9, r2
 80079c6:	f1b9 0f00 	cmp.w	r9, #0
 80079ca:	dc0d      	bgt.n	80079e8 <_printf_float+0x368>
 80079cc:	2700      	movs	r7, #0
 80079ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079d2:	f104 081a 	add.w	r8, r4, #26
 80079d6:	e018      	b.n	8007a0a <_printf_float+0x38a>
 80079d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079dc:	4659      	mov	r1, fp
 80079de:	4628      	mov	r0, r5
 80079e0:	47b0      	blx	r6
 80079e2:	3001      	adds	r0, #1
 80079e4:	d1e6      	bne.n	80079b4 <_printf_float+0x334>
 80079e6:	e6a2      	b.n	800772e <_printf_float+0xae>
 80079e8:	464b      	mov	r3, r9
 80079ea:	463a      	mov	r2, r7
 80079ec:	4659      	mov	r1, fp
 80079ee:	4628      	mov	r0, r5
 80079f0:	47b0      	blx	r6
 80079f2:	3001      	adds	r0, #1
 80079f4:	d1ea      	bne.n	80079cc <_printf_float+0x34c>
 80079f6:	e69a      	b.n	800772e <_printf_float+0xae>
 80079f8:	2301      	movs	r3, #1
 80079fa:	4642      	mov	r2, r8
 80079fc:	4659      	mov	r1, fp
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b0      	blx	r6
 8007a02:	3001      	adds	r0, #1
 8007a04:	f43f ae93 	beq.w	800772e <_printf_float+0xae>
 8007a08:	3701      	adds	r7, #1
 8007a0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	eba3 0309 	sub.w	r3, r3, r9
 8007a14:	42bb      	cmp	r3, r7
 8007a16:	dcef      	bgt.n	80079f8 <_printf_float+0x378>
 8007a18:	e74d      	b.n	80078b6 <_printf_float+0x236>
 8007a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a1c:	2a01      	cmp	r2, #1
 8007a1e:	dc01      	bgt.n	8007a24 <_printf_float+0x3a4>
 8007a20:	07db      	lsls	r3, r3, #31
 8007a22:	d538      	bpl.n	8007a96 <_printf_float+0x416>
 8007a24:	2301      	movs	r3, #1
 8007a26:	463a      	mov	r2, r7
 8007a28:	4659      	mov	r1, fp
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	47b0      	blx	r6
 8007a2e:	3001      	adds	r0, #1
 8007a30:	f43f ae7d 	beq.w	800772e <_printf_float+0xae>
 8007a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a38:	4659      	mov	r1, fp
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b0      	blx	r6
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f107 0701 	add.w	r7, r7, #1
 8007a44:	f43f ae73 	beq.w	800772e <_printf_float+0xae>
 8007a48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f103 38ff 	add.w	r8, r3, #4294967295
 8007a54:	2300      	movs	r3, #0
 8007a56:	f7f8 ffa7 	bl	80009a8 <__aeabi_dcmpeq>
 8007a5a:	b9c0      	cbnz	r0, 8007a8e <_printf_float+0x40e>
 8007a5c:	4643      	mov	r3, r8
 8007a5e:	463a      	mov	r2, r7
 8007a60:	4659      	mov	r1, fp
 8007a62:	4628      	mov	r0, r5
 8007a64:	47b0      	blx	r6
 8007a66:	3001      	adds	r0, #1
 8007a68:	d10d      	bne.n	8007a86 <_printf_float+0x406>
 8007a6a:	e660      	b.n	800772e <_printf_float+0xae>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	4642      	mov	r2, r8
 8007a70:	4659      	mov	r1, fp
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b0      	blx	r6
 8007a76:	3001      	adds	r0, #1
 8007a78:	f43f ae59 	beq.w	800772e <_printf_float+0xae>
 8007a7c:	3701      	adds	r7, #1
 8007a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a80:	3b01      	subs	r3, #1
 8007a82:	42bb      	cmp	r3, r7
 8007a84:	dcf2      	bgt.n	8007a6c <_printf_float+0x3ec>
 8007a86:	464b      	mov	r3, r9
 8007a88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a8c:	e6e4      	b.n	8007858 <_printf_float+0x1d8>
 8007a8e:	2700      	movs	r7, #0
 8007a90:	f104 081a 	add.w	r8, r4, #26
 8007a94:	e7f3      	b.n	8007a7e <_printf_float+0x3fe>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e7e1      	b.n	8007a5e <_printf_float+0x3de>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4642      	mov	r2, r8
 8007a9e:	4659      	mov	r1, fp
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b0      	blx	r6
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f43f ae42 	beq.w	800772e <_printf_float+0xae>
 8007aaa:	3701      	adds	r7, #1
 8007aac:	68e3      	ldr	r3, [r4, #12]
 8007aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ab0:	1a9b      	subs	r3, r3, r2
 8007ab2:	42bb      	cmp	r3, r7
 8007ab4:	dcf1      	bgt.n	8007a9a <_printf_float+0x41a>
 8007ab6:	e702      	b.n	80078be <_printf_float+0x23e>
 8007ab8:	2700      	movs	r7, #0
 8007aba:	f104 0819 	add.w	r8, r4, #25
 8007abe:	e7f5      	b.n	8007aac <_printf_float+0x42c>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f43f ae94 	beq.w	80077ee <_printf_float+0x16e>
 8007ac6:	f04f 0c00 	mov.w	ip, #0
 8007aca:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007ace:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007ad2:	6022      	str	r2, [r4, #0]
 8007ad4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007ad8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	463a      	mov	r2, r7
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f7ff fd3a 	bl	800755c <__cvt>
 8007ae8:	4607      	mov	r7, r0
 8007aea:	e64f      	b.n	800778c <_printf_float+0x10c>

08007aec <_printf_common>:
 8007aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	4691      	mov	r9, r2
 8007af2:	461f      	mov	r7, r3
 8007af4:	688a      	ldr	r2, [r1, #8]
 8007af6:	690b      	ldr	r3, [r1, #16]
 8007af8:	4606      	mov	r6, r0
 8007afa:	4293      	cmp	r3, r2
 8007afc:	bfb8      	it	lt
 8007afe:	4613      	movlt	r3, r2
 8007b00:	f8c9 3000 	str.w	r3, [r9]
 8007b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b08:	460c      	mov	r4, r1
 8007b0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b0e:	b112      	cbz	r2, 8007b16 <_printf_common+0x2a>
 8007b10:	3301      	adds	r3, #1
 8007b12:	f8c9 3000 	str.w	r3, [r9]
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	0699      	lsls	r1, r3, #26
 8007b1a:	bf42      	ittt	mi
 8007b1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007b20:	3302      	addmi	r3, #2
 8007b22:	f8c9 3000 	strmi.w	r3, [r9]
 8007b26:	6825      	ldr	r5, [r4, #0]
 8007b28:	f015 0506 	ands.w	r5, r5, #6
 8007b2c:	d107      	bne.n	8007b3e <_printf_common+0x52>
 8007b2e:	f104 0a19 	add.w	sl, r4, #25
 8007b32:	68e3      	ldr	r3, [r4, #12]
 8007b34:	f8d9 2000 	ldr.w	r2, [r9]
 8007b38:	1a9b      	subs	r3, r3, r2
 8007b3a:	42ab      	cmp	r3, r5
 8007b3c:	dc29      	bgt.n	8007b92 <_printf_common+0xa6>
 8007b3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b42:	6822      	ldr	r2, [r4, #0]
 8007b44:	3300      	adds	r3, #0
 8007b46:	bf18      	it	ne
 8007b48:	2301      	movne	r3, #1
 8007b4a:	0692      	lsls	r2, r2, #26
 8007b4c:	d42e      	bmi.n	8007bac <_printf_common+0xc0>
 8007b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b52:	4639      	mov	r1, r7
 8007b54:	4630      	mov	r0, r6
 8007b56:	47c0      	blx	r8
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d021      	beq.n	8007ba0 <_printf_common+0xb4>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	68e5      	ldr	r5, [r4, #12]
 8007b60:	f003 0306 	and.w	r3, r3, #6
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	bf18      	it	ne
 8007b68:	2500      	movne	r5, #0
 8007b6a:	f8d9 2000 	ldr.w	r2, [r9]
 8007b6e:	f04f 0900 	mov.w	r9, #0
 8007b72:	bf08      	it	eq
 8007b74:	1aad      	subeq	r5, r5, r2
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	6922      	ldr	r2, [r4, #16]
 8007b7a:	bf08      	it	eq
 8007b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b80:	4293      	cmp	r3, r2
 8007b82:	bfc4      	itt	gt
 8007b84:	1a9b      	subgt	r3, r3, r2
 8007b86:	18ed      	addgt	r5, r5, r3
 8007b88:	341a      	adds	r4, #26
 8007b8a:	454d      	cmp	r5, r9
 8007b8c:	d11a      	bne.n	8007bc4 <_printf_common+0xd8>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e008      	b.n	8007ba4 <_printf_common+0xb8>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4652      	mov	r2, sl
 8007b96:	4639      	mov	r1, r7
 8007b98:	4630      	mov	r0, r6
 8007b9a:	47c0      	blx	r8
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d103      	bne.n	8007ba8 <_printf_common+0xbc>
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	3501      	adds	r5, #1
 8007baa:	e7c2      	b.n	8007b32 <_printf_common+0x46>
 8007bac:	2030      	movs	r0, #48	; 0x30
 8007bae:	18e1      	adds	r1, r4, r3
 8007bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bba:	4422      	add	r2, r4
 8007bbc:	3302      	adds	r3, #2
 8007bbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bc2:	e7c4      	b.n	8007b4e <_printf_common+0x62>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	4639      	mov	r1, r7
 8007bca:	4630      	mov	r0, r6
 8007bcc:	47c0      	blx	r8
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d0e6      	beq.n	8007ba0 <_printf_common+0xb4>
 8007bd2:	f109 0901 	add.w	r9, r9, #1
 8007bd6:	e7d8      	b.n	8007b8a <_printf_common+0x9e>

08007bd8 <_printf_i>:
 8007bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007be0:	460c      	mov	r4, r1
 8007be2:	7e09      	ldrb	r1, [r1, #24]
 8007be4:	b085      	sub	sp, #20
 8007be6:	296e      	cmp	r1, #110	; 0x6e
 8007be8:	4617      	mov	r7, r2
 8007bea:	4606      	mov	r6, r0
 8007bec:	4698      	mov	r8, r3
 8007bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf0:	f000 80b3 	beq.w	8007d5a <_printf_i+0x182>
 8007bf4:	d822      	bhi.n	8007c3c <_printf_i+0x64>
 8007bf6:	2963      	cmp	r1, #99	; 0x63
 8007bf8:	d036      	beq.n	8007c68 <_printf_i+0x90>
 8007bfa:	d80a      	bhi.n	8007c12 <_printf_i+0x3a>
 8007bfc:	2900      	cmp	r1, #0
 8007bfe:	f000 80b9 	beq.w	8007d74 <_printf_i+0x19c>
 8007c02:	2958      	cmp	r1, #88	; 0x58
 8007c04:	f000 8083 	beq.w	8007d0e <_printf_i+0x136>
 8007c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c10:	e032      	b.n	8007c78 <_printf_i+0xa0>
 8007c12:	2964      	cmp	r1, #100	; 0x64
 8007c14:	d001      	beq.n	8007c1a <_printf_i+0x42>
 8007c16:	2969      	cmp	r1, #105	; 0x69
 8007c18:	d1f6      	bne.n	8007c08 <_printf_i+0x30>
 8007c1a:	6820      	ldr	r0, [r4, #0]
 8007c1c:	6813      	ldr	r3, [r2, #0]
 8007c1e:	0605      	lsls	r5, r0, #24
 8007c20:	f103 0104 	add.w	r1, r3, #4
 8007c24:	d52a      	bpl.n	8007c7c <_printf_i+0xa4>
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6011      	str	r1, [r2, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da03      	bge.n	8007c36 <_printf_i+0x5e>
 8007c2e:	222d      	movs	r2, #45	; 0x2d
 8007c30:	425b      	negs	r3, r3
 8007c32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c36:	486f      	ldr	r0, [pc, #444]	; (8007df4 <_printf_i+0x21c>)
 8007c38:	220a      	movs	r2, #10
 8007c3a:	e039      	b.n	8007cb0 <_printf_i+0xd8>
 8007c3c:	2973      	cmp	r1, #115	; 0x73
 8007c3e:	f000 809d 	beq.w	8007d7c <_printf_i+0x1a4>
 8007c42:	d808      	bhi.n	8007c56 <_printf_i+0x7e>
 8007c44:	296f      	cmp	r1, #111	; 0x6f
 8007c46:	d020      	beq.n	8007c8a <_printf_i+0xb2>
 8007c48:	2970      	cmp	r1, #112	; 0x70
 8007c4a:	d1dd      	bne.n	8007c08 <_printf_i+0x30>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	f043 0320 	orr.w	r3, r3, #32
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	e003      	b.n	8007c5e <_printf_i+0x86>
 8007c56:	2975      	cmp	r1, #117	; 0x75
 8007c58:	d017      	beq.n	8007c8a <_printf_i+0xb2>
 8007c5a:	2978      	cmp	r1, #120	; 0x78
 8007c5c:	d1d4      	bne.n	8007c08 <_printf_i+0x30>
 8007c5e:	2378      	movs	r3, #120	; 0x78
 8007c60:	4865      	ldr	r0, [pc, #404]	; (8007df8 <_printf_i+0x220>)
 8007c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c66:	e055      	b.n	8007d14 <_printf_i+0x13c>
 8007c68:	6813      	ldr	r3, [r2, #0]
 8007c6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c6e:	1d19      	adds	r1, r3, #4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6011      	str	r1, [r2, #0]
 8007c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e08c      	b.n	8007d96 <_printf_i+0x1be>
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c82:	6011      	str	r1, [r2, #0]
 8007c84:	bf18      	it	ne
 8007c86:	b21b      	sxthne	r3, r3
 8007c88:	e7cf      	b.n	8007c2a <_printf_i+0x52>
 8007c8a:	6813      	ldr	r3, [r2, #0]
 8007c8c:	6825      	ldr	r5, [r4, #0]
 8007c8e:	1d18      	adds	r0, r3, #4
 8007c90:	6010      	str	r0, [r2, #0]
 8007c92:	0628      	lsls	r0, r5, #24
 8007c94:	d501      	bpl.n	8007c9a <_printf_i+0xc2>
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	e002      	b.n	8007ca0 <_printf_i+0xc8>
 8007c9a:	0668      	lsls	r0, r5, #25
 8007c9c:	d5fb      	bpl.n	8007c96 <_printf_i+0xbe>
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	296f      	cmp	r1, #111	; 0x6f
 8007ca2:	bf14      	ite	ne
 8007ca4:	220a      	movne	r2, #10
 8007ca6:	2208      	moveq	r2, #8
 8007ca8:	4852      	ldr	r0, [pc, #328]	; (8007df4 <_printf_i+0x21c>)
 8007caa:	2100      	movs	r1, #0
 8007cac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cb0:	6865      	ldr	r5, [r4, #4]
 8007cb2:	2d00      	cmp	r5, #0
 8007cb4:	60a5      	str	r5, [r4, #8]
 8007cb6:	f2c0 8095 	blt.w	8007de4 <_printf_i+0x20c>
 8007cba:	6821      	ldr	r1, [r4, #0]
 8007cbc:	f021 0104 	bic.w	r1, r1, #4
 8007cc0:	6021      	str	r1, [r4, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d13d      	bne.n	8007d42 <_printf_i+0x16a>
 8007cc6:	2d00      	cmp	r5, #0
 8007cc8:	f040 808e 	bne.w	8007de8 <_printf_i+0x210>
 8007ccc:	4665      	mov	r5, ip
 8007cce:	2a08      	cmp	r2, #8
 8007cd0:	d10b      	bne.n	8007cea <_printf_i+0x112>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	07db      	lsls	r3, r3, #31
 8007cd6:	d508      	bpl.n	8007cea <_printf_i+0x112>
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	6862      	ldr	r2, [r4, #4]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	bfde      	ittt	le
 8007ce0:	2330      	movle	r3, #48	; 0x30
 8007ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cea:	ebac 0305 	sub.w	r3, ip, r5
 8007cee:	6123      	str	r3, [r4, #16]
 8007cf0:	f8cd 8000 	str.w	r8, [sp]
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	aa03      	add	r2, sp, #12
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7ff fef6 	bl	8007aec <_printf_common>
 8007d00:	3001      	adds	r0, #1
 8007d02:	d14d      	bne.n	8007da0 <_printf_i+0x1c8>
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
 8007d08:	b005      	add	sp, #20
 8007d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d0e:	4839      	ldr	r0, [pc, #228]	; (8007df4 <_printf_i+0x21c>)
 8007d10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007d14:	6813      	ldr	r3, [r2, #0]
 8007d16:	6821      	ldr	r1, [r4, #0]
 8007d18:	1d1d      	adds	r5, r3, #4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6015      	str	r5, [r2, #0]
 8007d1e:	060a      	lsls	r2, r1, #24
 8007d20:	d50b      	bpl.n	8007d3a <_printf_i+0x162>
 8007d22:	07ca      	lsls	r2, r1, #31
 8007d24:	bf44      	itt	mi
 8007d26:	f041 0120 	orrmi.w	r1, r1, #32
 8007d2a:	6021      	strmi	r1, [r4, #0]
 8007d2c:	b91b      	cbnz	r3, 8007d36 <_printf_i+0x15e>
 8007d2e:	6822      	ldr	r2, [r4, #0]
 8007d30:	f022 0220 	bic.w	r2, r2, #32
 8007d34:	6022      	str	r2, [r4, #0]
 8007d36:	2210      	movs	r2, #16
 8007d38:	e7b7      	b.n	8007caa <_printf_i+0xd2>
 8007d3a:	064d      	lsls	r5, r1, #25
 8007d3c:	bf48      	it	mi
 8007d3e:	b29b      	uxthmi	r3, r3
 8007d40:	e7ef      	b.n	8007d22 <_printf_i+0x14a>
 8007d42:	4665      	mov	r5, ip
 8007d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d48:	fb02 3311 	mls	r3, r2, r1, r3
 8007d4c:	5cc3      	ldrb	r3, [r0, r3]
 8007d4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d52:	460b      	mov	r3, r1
 8007d54:	2900      	cmp	r1, #0
 8007d56:	d1f5      	bne.n	8007d44 <_printf_i+0x16c>
 8007d58:	e7b9      	b.n	8007cce <_printf_i+0xf6>
 8007d5a:	6813      	ldr	r3, [r2, #0]
 8007d5c:	6825      	ldr	r5, [r4, #0]
 8007d5e:	1d18      	adds	r0, r3, #4
 8007d60:	6961      	ldr	r1, [r4, #20]
 8007d62:	6010      	str	r0, [r2, #0]
 8007d64:	0628      	lsls	r0, r5, #24
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	d501      	bpl.n	8007d6e <_printf_i+0x196>
 8007d6a:	6019      	str	r1, [r3, #0]
 8007d6c:	e002      	b.n	8007d74 <_printf_i+0x19c>
 8007d6e:	066a      	lsls	r2, r5, #25
 8007d70:	d5fb      	bpl.n	8007d6a <_printf_i+0x192>
 8007d72:	8019      	strh	r1, [r3, #0]
 8007d74:	2300      	movs	r3, #0
 8007d76:	4665      	mov	r5, ip
 8007d78:	6123      	str	r3, [r4, #16]
 8007d7a:	e7b9      	b.n	8007cf0 <_printf_i+0x118>
 8007d7c:	6813      	ldr	r3, [r2, #0]
 8007d7e:	1d19      	adds	r1, r3, #4
 8007d80:	6011      	str	r1, [r2, #0]
 8007d82:	681d      	ldr	r5, [r3, #0]
 8007d84:	6862      	ldr	r2, [r4, #4]
 8007d86:	2100      	movs	r1, #0
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f000 feaf 	bl	8008aec <memchr>
 8007d8e:	b108      	cbz	r0, 8007d94 <_printf_i+0x1bc>
 8007d90:	1b40      	subs	r0, r0, r5
 8007d92:	6060      	str	r0, [r4, #4]
 8007d94:	6863      	ldr	r3, [r4, #4]
 8007d96:	6123      	str	r3, [r4, #16]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9e:	e7a7      	b.n	8007cf0 <_printf_i+0x118>
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	462a      	mov	r2, r5
 8007da4:	4639      	mov	r1, r7
 8007da6:	4630      	mov	r0, r6
 8007da8:	47c0      	blx	r8
 8007daa:	3001      	adds	r0, #1
 8007dac:	d0aa      	beq.n	8007d04 <_printf_i+0x12c>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	079b      	lsls	r3, r3, #30
 8007db2:	d413      	bmi.n	8007ddc <_printf_i+0x204>
 8007db4:	68e0      	ldr	r0, [r4, #12]
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	4298      	cmp	r0, r3
 8007dba:	bfb8      	it	lt
 8007dbc:	4618      	movlt	r0, r3
 8007dbe:	e7a3      	b.n	8007d08 <_printf_i+0x130>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	464a      	mov	r2, r9
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	47c0      	blx	r8
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d09a      	beq.n	8007d04 <_printf_i+0x12c>
 8007dce:	3501      	adds	r5, #1
 8007dd0:	68e3      	ldr	r3, [r4, #12]
 8007dd2:	9a03      	ldr	r2, [sp, #12]
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	42ab      	cmp	r3, r5
 8007dd8:	dcf2      	bgt.n	8007dc0 <_printf_i+0x1e8>
 8007dda:	e7eb      	b.n	8007db4 <_printf_i+0x1dc>
 8007ddc:	2500      	movs	r5, #0
 8007dde:	f104 0919 	add.w	r9, r4, #25
 8007de2:	e7f5      	b.n	8007dd0 <_printf_i+0x1f8>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1ac      	bne.n	8007d42 <_printf_i+0x16a>
 8007de8:	7803      	ldrb	r3, [r0, #0]
 8007dea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007df2:	e76c      	b.n	8007cce <_printf_i+0xf6>
 8007df4:	08009d42 	.word	0x08009d42
 8007df8:	08009d53 	.word	0x08009d53

08007dfc <siprintf>:
 8007dfc:	b40e      	push	{r1, r2, r3}
 8007dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e02:	b500      	push	{lr}
 8007e04:	b09c      	sub	sp, #112	; 0x70
 8007e06:	ab1d      	add	r3, sp, #116	; 0x74
 8007e08:	9002      	str	r0, [sp, #8]
 8007e0a:	9006      	str	r0, [sp, #24]
 8007e0c:	9107      	str	r1, [sp, #28]
 8007e0e:	9104      	str	r1, [sp, #16]
 8007e10:	4808      	ldr	r0, [pc, #32]	; (8007e34 <siprintf+0x38>)
 8007e12:	4909      	ldr	r1, [pc, #36]	; (8007e38 <siprintf+0x3c>)
 8007e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e18:	9105      	str	r1, [sp, #20]
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	a902      	add	r1, sp, #8
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	f001 fa68 	bl	80092f4 <_svfiprintf_r>
 8007e24:	2200      	movs	r2, #0
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	b01c      	add	sp, #112	; 0x70
 8007e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e30:	b003      	add	sp, #12
 8007e32:	4770      	bx	lr
 8007e34:	20000024 	.word	0x20000024
 8007e38:	ffff0208 	.word	0xffff0208

08007e3c <quorem>:
 8007e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	6903      	ldr	r3, [r0, #16]
 8007e42:	690c      	ldr	r4, [r1, #16]
 8007e44:	4680      	mov	r8, r0
 8007e46:	42a3      	cmp	r3, r4
 8007e48:	f2c0 8084 	blt.w	8007f54 <quorem+0x118>
 8007e4c:	3c01      	subs	r4, #1
 8007e4e:	f101 0714 	add.w	r7, r1, #20
 8007e52:	f100 0614 	add.w	r6, r0, #20
 8007e56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007e5e:	3501      	adds	r5, #1
 8007e60:	fbb0 f5f5 	udiv	r5, r0, r5
 8007e64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e68:	eb06 030c 	add.w	r3, r6, ip
 8007e6c:	eb07 090c 	add.w	r9, r7, ip
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	b39d      	cbz	r5, 8007edc <quorem+0xa0>
 8007e74:	f04f 0a00 	mov.w	sl, #0
 8007e78:	4638      	mov	r0, r7
 8007e7a:	46b6      	mov	lr, r6
 8007e7c:	46d3      	mov	fp, sl
 8007e7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e82:	b293      	uxth	r3, r2
 8007e84:	fb05 a303 	mla	r3, r5, r3, sl
 8007e88:	0c12      	lsrs	r2, r2, #16
 8007e8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e8e:	fb05 a202 	mla	r2, r5, r2, sl
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	ebab 0303 	sub.w	r3, fp, r3
 8007e98:	f8de b000 	ldr.w	fp, [lr]
 8007e9c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ea0:	fa1f fb8b 	uxth.w	fp, fp
 8007ea4:	445b      	add	r3, fp
 8007ea6:	fa1f fb82 	uxth.w	fp, r2
 8007eaa:	f8de 2000 	ldr.w	r2, [lr]
 8007eae:	4581      	cmp	r9, r0
 8007eb0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ebe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ec2:	f84e 3b04 	str.w	r3, [lr], #4
 8007ec6:	d2da      	bcs.n	8007e7e <quorem+0x42>
 8007ec8:	f856 300c 	ldr.w	r3, [r6, ip]
 8007ecc:	b933      	cbnz	r3, 8007edc <quorem+0xa0>
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	429e      	cmp	r6, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	d331      	bcc.n	8007f3c <quorem+0x100>
 8007ed8:	f8c8 4010 	str.w	r4, [r8, #16]
 8007edc:	4640      	mov	r0, r8
 8007ede:	f001 f833 	bl	8008f48 <__mcmp>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	db26      	blt.n	8007f34 <quorem+0xf8>
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f04f 0c00 	mov.w	ip, #0
 8007eec:	3501      	adds	r5, #1
 8007eee:	f857 1b04 	ldr.w	r1, [r7], #4
 8007ef2:	f8d0 e000 	ldr.w	lr, [r0]
 8007ef6:	b28b      	uxth	r3, r1
 8007ef8:	ebac 0303 	sub.w	r3, ip, r3
 8007efc:	fa1f f28e 	uxth.w	r2, lr
 8007f00:	4413      	add	r3, r2
 8007f02:	0c0a      	lsrs	r2, r1, #16
 8007f04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f12:	45b9      	cmp	r9, r7
 8007f14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f18:	f840 3b04 	str.w	r3, [r0], #4
 8007f1c:	d2e7      	bcs.n	8007eee <quorem+0xb2>
 8007f1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f26:	b92a      	cbnz	r2, 8007f34 <quorem+0xf8>
 8007f28:	3b04      	subs	r3, #4
 8007f2a:	429e      	cmp	r6, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	d30b      	bcc.n	8007f48 <quorem+0x10c>
 8007f30:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f34:	4628      	mov	r0, r5
 8007f36:	b003      	add	sp, #12
 8007f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	3b04      	subs	r3, #4
 8007f40:	2a00      	cmp	r2, #0
 8007f42:	d1c9      	bne.n	8007ed8 <quorem+0x9c>
 8007f44:	3c01      	subs	r4, #1
 8007f46:	e7c4      	b.n	8007ed2 <quorem+0x96>
 8007f48:	6812      	ldr	r2, [r2, #0]
 8007f4a:	3b04      	subs	r3, #4
 8007f4c:	2a00      	cmp	r2, #0
 8007f4e:	d1ef      	bne.n	8007f30 <quorem+0xf4>
 8007f50:	3c01      	subs	r4, #1
 8007f52:	e7ea      	b.n	8007f2a <quorem+0xee>
 8007f54:	2000      	movs	r0, #0
 8007f56:	e7ee      	b.n	8007f36 <quorem+0xfa>

08007f58 <_dtoa_r>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	461f      	mov	r7, r3
 8007f60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f62:	b095      	sub	sp, #84	; 0x54
 8007f64:	4604      	mov	r4, r0
 8007f66:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007f6a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007f6e:	b93d      	cbnz	r5, 8007f80 <_dtoa_r+0x28>
 8007f70:	2010      	movs	r0, #16
 8007f72:	f000 fdb3 	bl	8008adc <malloc>
 8007f76:	6260      	str	r0, [r4, #36]	; 0x24
 8007f78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f7c:	6005      	str	r5, [r0, #0]
 8007f7e:	60c5      	str	r5, [r0, #12]
 8007f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f82:	6819      	ldr	r1, [r3, #0]
 8007f84:	b151      	cbz	r1, 8007f9c <_dtoa_r+0x44>
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	2301      	movs	r3, #1
 8007f8a:	4093      	lsls	r3, r2
 8007f8c:	604a      	str	r2, [r1, #4]
 8007f8e:	608b      	str	r3, [r1, #8]
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 fdf8 	bl	8008b86 <_Bfree>
 8007f96:	2200      	movs	r2, #0
 8007f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	1e3b      	subs	r3, r7, #0
 8007f9e:	bfaf      	iteee	ge
 8007fa0:	2300      	movge	r3, #0
 8007fa2:	2201      	movlt	r2, #1
 8007fa4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fa8:	9303      	strlt	r3, [sp, #12]
 8007faa:	bfac      	ite	ge
 8007fac:	f8c8 3000 	strge.w	r3, [r8]
 8007fb0:	f8c8 2000 	strlt.w	r2, [r8]
 8007fb4:	4bae      	ldr	r3, [pc, #696]	; (8008270 <_dtoa_r+0x318>)
 8007fb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007fba:	ea33 0308 	bics.w	r3, r3, r8
 8007fbe:	d11b      	bne.n	8007ff8 <_dtoa_r+0xa0>
 8007fc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	9b02      	ldr	r3, [sp, #8]
 8007fca:	b923      	cbnz	r3, 8007fd6 <_dtoa_r+0x7e>
 8007fcc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f000 8545 	beq.w	8008a60 <_dtoa_r+0xb08>
 8007fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fd8:	b953      	cbnz	r3, 8007ff0 <_dtoa_r+0x98>
 8007fda:	4ba6      	ldr	r3, [pc, #664]	; (8008274 <_dtoa_r+0x31c>)
 8007fdc:	e021      	b.n	8008022 <_dtoa_r+0xca>
 8007fde:	4ba6      	ldr	r3, [pc, #664]	; (8008278 <_dtoa_r+0x320>)
 8007fe0:	9306      	str	r3, [sp, #24]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	9806      	ldr	r0, [sp, #24]
 8007fea:	b015      	add	sp, #84	; 0x54
 8007fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff0:	4ba0      	ldr	r3, [pc, #640]	; (8008274 <_dtoa_r+0x31c>)
 8007ff2:	9306      	str	r3, [sp, #24]
 8007ff4:	3303      	adds	r3, #3
 8007ff6:	e7f5      	b.n	8007fe4 <_dtoa_r+0x8c>
 8007ff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2300      	movs	r3, #0
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 fcd0 	bl	80009a8 <__aeabi_dcmpeq>
 8008008:	4682      	mov	sl, r0
 800800a:	b160      	cbz	r0, 8008026 <_dtoa_r+0xce>
 800800c:	2301      	movs	r3, #1
 800800e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 8520 	beq.w	8008a5a <_dtoa_r+0xb02>
 800801a:	4b98      	ldr	r3, [pc, #608]	; (800827c <_dtoa_r+0x324>)
 800801c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	3b01      	subs	r3, #1
 8008022:	9306      	str	r3, [sp, #24]
 8008024:	e7e0      	b.n	8007fe8 <_dtoa_r+0x90>
 8008026:	ab12      	add	r3, sp, #72	; 0x48
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	ab13      	add	r3, sp, #76	; 0x4c
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4632      	mov	r2, r6
 8008030:	463b      	mov	r3, r7
 8008032:	4620      	mov	r0, r4
 8008034:	f001 f800 	bl	8009038 <__d2b>
 8008038:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800803c:	4683      	mov	fp, r0
 800803e:	2d00      	cmp	r5, #0
 8008040:	d07d      	beq.n	800813e <_dtoa_r+0x1e6>
 8008042:	46b0      	mov	r8, r6
 8008044:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008048:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800804c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008050:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008054:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008058:	2200      	movs	r2, #0
 800805a:	4b89      	ldr	r3, [pc, #548]	; (8008280 <_dtoa_r+0x328>)
 800805c:	4640      	mov	r0, r8
 800805e:	4649      	mov	r1, r9
 8008060:	f7f8 f882 	bl	8000168 <__aeabi_dsub>
 8008064:	a37c      	add	r3, pc, #496	; (adr r3, 8008258 <_dtoa_r+0x300>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 fa35 	bl	80004d8 <__aeabi_dmul>
 800806e:	a37c      	add	r3, pc, #496	; (adr r3, 8008260 <_dtoa_r+0x308>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f87a 	bl	800016c <__adddf3>
 8008078:	4606      	mov	r6, r0
 800807a:	4628      	mov	r0, r5
 800807c:	460f      	mov	r7, r1
 800807e:	f7f8 f9c1 	bl	8000404 <__aeabi_i2d>
 8008082:	a379      	add	r3, pc, #484	; (adr r3, 8008268 <_dtoa_r+0x310>)
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f7f8 fa26 	bl	80004d8 <__aeabi_dmul>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 f86a 	bl	800016c <__adddf3>
 8008098:	4606      	mov	r6, r0
 800809a:	460f      	mov	r7, r1
 800809c:	f7f8 fccc 	bl	8000a38 <__aeabi_d2iz>
 80080a0:	2200      	movs	r2, #0
 80080a2:	4682      	mov	sl, r0
 80080a4:	2300      	movs	r3, #0
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 fc87 	bl	80009bc <__aeabi_dcmplt>
 80080ae:	b148      	cbz	r0, 80080c4 <_dtoa_r+0x16c>
 80080b0:	4650      	mov	r0, sl
 80080b2:	f7f8 f9a7 	bl	8000404 <__aeabi_i2d>
 80080b6:	4632      	mov	r2, r6
 80080b8:	463b      	mov	r3, r7
 80080ba:	f7f8 fc75 	bl	80009a8 <__aeabi_dcmpeq>
 80080be:	b908      	cbnz	r0, 80080c4 <_dtoa_r+0x16c>
 80080c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080c4:	f1ba 0f16 	cmp.w	sl, #22
 80080c8:	d85a      	bhi.n	8008180 <_dtoa_r+0x228>
 80080ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080ce:	496d      	ldr	r1, [pc, #436]	; (8008284 <_dtoa_r+0x32c>)
 80080d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d8:	f7f8 fc8e 	bl	80009f8 <__aeabi_dcmpgt>
 80080dc:	2800      	cmp	r0, #0
 80080de:	d051      	beq.n	8008184 <_dtoa_r+0x22c>
 80080e0:	2300      	movs	r3, #0
 80080e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080e6:	930d      	str	r3, [sp, #52]	; 0x34
 80080e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080ea:	1b5d      	subs	r5, r3, r5
 80080ec:	1e6b      	subs	r3, r5, #1
 80080ee:	9307      	str	r3, [sp, #28]
 80080f0:	bf43      	ittte	mi
 80080f2:	2300      	movmi	r3, #0
 80080f4:	f1c5 0901 	rsbmi	r9, r5, #1
 80080f8:	9307      	strmi	r3, [sp, #28]
 80080fa:	f04f 0900 	movpl.w	r9, #0
 80080fe:	f1ba 0f00 	cmp.w	sl, #0
 8008102:	db41      	blt.n	8008188 <_dtoa_r+0x230>
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800810a:	4453      	add	r3, sl
 800810c:	9307      	str	r3, [sp, #28]
 800810e:	2300      	movs	r3, #0
 8008110:	9308      	str	r3, [sp, #32]
 8008112:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008114:	2b09      	cmp	r3, #9
 8008116:	f200 808f 	bhi.w	8008238 <_dtoa_r+0x2e0>
 800811a:	2b05      	cmp	r3, #5
 800811c:	bfc4      	itt	gt
 800811e:	3b04      	subgt	r3, #4
 8008120:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008122:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008124:	bfc8      	it	gt
 8008126:	2500      	movgt	r5, #0
 8008128:	f1a3 0302 	sub.w	r3, r3, #2
 800812c:	bfd8      	it	le
 800812e:	2501      	movle	r5, #1
 8008130:	2b03      	cmp	r3, #3
 8008132:	f200 808d 	bhi.w	8008250 <_dtoa_r+0x2f8>
 8008136:	e8df f003 	tbb	[pc, r3]
 800813a:	7d7b      	.short	0x7d7b
 800813c:	6f2f      	.short	0x6f2f
 800813e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008142:	441d      	add	r5, r3
 8008144:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008148:	2820      	cmp	r0, #32
 800814a:	dd13      	ble.n	8008174 <_dtoa_r+0x21c>
 800814c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008150:	9b02      	ldr	r3, [sp, #8]
 8008152:	fa08 f800 	lsl.w	r8, r8, r0
 8008156:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800815a:	fa23 f000 	lsr.w	r0, r3, r0
 800815e:	ea48 0000 	orr.w	r0, r8, r0
 8008162:	f7f8 f93f 	bl	80003e4 <__aeabi_ui2d>
 8008166:	2301      	movs	r3, #1
 8008168:	4680      	mov	r8, r0
 800816a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800816e:	3d01      	subs	r5, #1
 8008170:	9310      	str	r3, [sp, #64]	; 0x40
 8008172:	e771      	b.n	8008058 <_dtoa_r+0x100>
 8008174:	9b02      	ldr	r3, [sp, #8]
 8008176:	f1c0 0020 	rsb	r0, r0, #32
 800817a:	fa03 f000 	lsl.w	r0, r3, r0
 800817e:	e7f0      	b.n	8008162 <_dtoa_r+0x20a>
 8008180:	2301      	movs	r3, #1
 8008182:	e7b0      	b.n	80080e6 <_dtoa_r+0x18e>
 8008184:	900d      	str	r0, [sp, #52]	; 0x34
 8008186:	e7af      	b.n	80080e8 <_dtoa_r+0x190>
 8008188:	f1ca 0300 	rsb	r3, sl, #0
 800818c:	9308      	str	r3, [sp, #32]
 800818e:	2300      	movs	r3, #0
 8008190:	eba9 090a 	sub.w	r9, r9, sl
 8008194:	930c      	str	r3, [sp, #48]	; 0x30
 8008196:	e7bc      	b.n	8008112 <_dtoa_r+0x1ba>
 8008198:	2301      	movs	r3, #1
 800819a:	9309      	str	r3, [sp, #36]	; 0x24
 800819c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dd74      	ble.n	800828c <_dtoa_r+0x334>
 80081a2:	4698      	mov	r8, r3
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	2200      	movs	r2, #0
 80081a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081aa:	6072      	str	r2, [r6, #4]
 80081ac:	2204      	movs	r2, #4
 80081ae:	f102 0014 	add.w	r0, r2, #20
 80081b2:	4298      	cmp	r0, r3
 80081b4:	6871      	ldr	r1, [r6, #4]
 80081b6:	d96e      	bls.n	8008296 <_dtoa_r+0x33e>
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fcb0 	bl	8008b1e <_Balloc>
 80081be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c0:	6030      	str	r0, [r6, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f1b8 0f0e 	cmp.w	r8, #14
 80081c8:	9306      	str	r3, [sp, #24]
 80081ca:	f200 80ed 	bhi.w	80083a8 <_dtoa_r+0x450>
 80081ce:	2d00      	cmp	r5, #0
 80081d0:	f000 80ea 	beq.w	80083a8 <_dtoa_r+0x450>
 80081d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081d8:	f1ba 0f00 	cmp.w	sl, #0
 80081dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80081e0:	dd77      	ble.n	80082d2 <_dtoa_r+0x37a>
 80081e2:	4a28      	ldr	r2, [pc, #160]	; (8008284 <_dtoa_r+0x32c>)
 80081e4:	f00a 030f 	and.w	r3, sl, #15
 80081e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80081ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081f0:	06f0      	lsls	r0, r6, #27
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80081fa:	d568      	bpl.n	80082ce <_dtoa_r+0x376>
 80081fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008200:	4b21      	ldr	r3, [pc, #132]	; (8008288 <_dtoa_r+0x330>)
 8008202:	2503      	movs	r5, #3
 8008204:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008208:	f7f8 fa90 	bl	800072c <__aeabi_ddiv>
 800820c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008210:	f006 060f 	and.w	r6, r6, #15
 8008214:	4f1c      	ldr	r7, [pc, #112]	; (8008288 <_dtoa_r+0x330>)
 8008216:	e04f      	b.n	80082b8 <_dtoa_r+0x360>
 8008218:	2301      	movs	r3, #1
 800821a:	9309      	str	r3, [sp, #36]	; 0x24
 800821c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800821e:	4453      	add	r3, sl
 8008220:	f103 0801 	add.w	r8, r3, #1
 8008224:	9304      	str	r3, [sp, #16]
 8008226:	4643      	mov	r3, r8
 8008228:	2b01      	cmp	r3, #1
 800822a:	bfb8      	it	lt
 800822c:	2301      	movlt	r3, #1
 800822e:	e7ba      	b.n	80081a6 <_dtoa_r+0x24e>
 8008230:	2300      	movs	r3, #0
 8008232:	e7b2      	b.n	800819a <_dtoa_r+0x242>
 8008234:	2300      	movs	r3, #0
 8008236:	e7f0      	b.n	800821a <_dtoa_r+0x2c2>
 8008238:	2501      	movs	r5, #1
 800823a:	2300      	movs	r3, #0
 800823c:	9509      	str	r5, [sp, #36]	; 0x24
 800823e:	931e      	str	r3, [sp, #120]	; 0x78
 8008240:	f04f 33ff 	mov.w	r3, #4294967295
 8008244:	2200      	movs	r2, #0
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	4698      	mov	r8, r3
 800824a:	2312      	movs	r3, #18
 800824c:	921f      	str	r2, [sp, #124]	; 0x7c
 800824e:	e7aa      	b.n	80081a6 <_dtoa_r+0x24e>
 8008250:	2301      	movs	r3, #1
 8008252:	9309      	str	r3, [sp, #36]	; 0x24
 8008254:	e7f4      	b.n	8008240 <_dtoa_r+0x2e8>
 8008256:	bf00      	nop
 8008258:	636f4361 	.word	0x636f4361
 800825c:	3fd287a7 	.word	0x3fd287a7
 8008260:	8b60c8b3 	.word	0x8b60c8b3
 8008264:	3fc68a28 	.word	0x3fc68a28
 8008268:	509f79fb 	.word	0x509f79fb
 800826c:	3fd34413 	.word	0x3fd34413
 8008270:	7ff00000 	.word	0x7ff00000
 8008274:	08009d6d 	.word	0x08009d6d
 8008278:	08009d64 	.word	0x08009d64
 800827c:	08009d41 	.word	0x08009d41
 8008280:	3ff80000 	.word	0x3ff80000
 8008284:	08009da0 	.word	0x08009da0
 8008288:	08009d78 	.word	0x08009d78
 800828c:	2301      	movs	r3, #1
 800828e:	9304      	str	r3, [sp, #16]
 8008290:	4698      	mov	r8, r3
 8008292:	461a      	mov	r2, r3
 8008294:	e7da      	b.n	800824c <_dtoa_r+0x2f4>
 8008296:	3101      	adds	r1, #1
 8008298:	6071      	str	r1, [r6, #4]
 800829a:	0052      	lsls	r2, r2, #1
 800829c:	e787      	b.n	80081ae <_dtoa_r+0x256>
 800829e:	07f1      	lsls	r1, r6, #31
 80082a0:	d508      	bpl.n	80082b4 <_dtoa_r+0x35c>
 80082a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082aa:	f7f8 f915 	bl	80004d8 <__aeabi_dmul>
 80082ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80082b2:	3501      	adds	r5, #1
 80082b4:	1076      	asrs	r6, r6, #1
 80082b6:	3708      	adds	r7, #8
 80082b8:	2e00      	cmp	r6, #0
 80082ba:	d1f0      	bne.n	800829e <_dtoa_r+0x346>
 80082bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c4:	f7f8 fa32 	bl	800072c <__aeabi_ddiv>
 80082c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082cc:	e01b      	b.n	8008306 <_dtoa_r+0x3ae>
 80082ce:	2502      	movs	r5, #2
 80082d0:	e7a0      	b.n	8008214 <_dtoa_r+0x2bc>
 80082d2:	f000 80a4 	beq.w	800841e <_dtoa_r+0x4c6>
 80082d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80082da:	f1ca 0600 	rsb	r6, sl, #0
 80082de:	4ba0      	ldr	r3, [pc, #640]	; (8008560 <_dtoa_r+0x608>)
 80082e0:	f006 020f 	and.w	r2, r6, #15
 80082e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f8 f8f4 	bl	80004d8 <__aeabi_dmul>
 80082f0:	2502      	movs	r5, #2
 80082f2:	2300      	movs	r3, #0
 80082f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082f8:	4f9a      	ldr	r7, [pc, #616]	; (8008564 <_dtoa_r+0x60c>)
 80082fa:	1136      	asrs	r6, r6, #4
 80082fc:	2e00      	cmp	r6, #0
 80082fe:	f040 8083 	bne.w	8008408 <_dtoa_r+0x4b0>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e0      	bne.n	80082c8 <_dtoa_r+0x370>
 8008306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 808a 	beq.w	8008422 <_dtoa_r+0x4ca>
 800830e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008312:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008316:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800831a:	2200      	movs	r2, #0
 800831c:	4b92      	ldr	r3, [pc, #584]	; (8008568 <_dtoa_r+0x610>)
 800831e:	f7f8 fb4d 	bl	80009bc <__aeabi_dcmplt>
 8008322:	2800      	cmp	r0, #0
 8008324:	d07d      	beq.n	8008422 <_dtoa_r+0x4ca>
 8008326:	f1b8 0f00 	cmp.w	r8, #0
 800832a:	d07a      	beq.n	8008422 <_dtoa_r+0x4ca>
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	dd36      	ble.n	80083a0 <_dtoa_r+0x448>
 8008332:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008336:	2200      	movs	r2, #0
 8008338:	4b8c      	ldr	r3, [pc, #560]	; (800856c <_dtoa_r+0x614>)
 800833a:	f7f8 f8cd 	bl	80004d8 <__aeabi_dmul>
 800833e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008342:	9e04      	ldr	r6, [sp, #16]
 8008344:	f10a 37ff 	add.w	r7, sl, #4294967295
 8008348:	3501      	adds	r5, #1
 800834a:	4628      	mov	r0, r5
 800834c:	f7f8 f85a 	bl	8000404 <__aeabi_i2d>
 8008350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008354:	f7f8 f8c0 	bl	80004d8 <__aeabi_dmul>
 8008358:	2200      	movs	r2, #0
 800835a:	4b85      	ldr	r3, [pc, #532]	; (8008570 <_dtoa_r+0x618>)
 800835c:	f7f7 ff06 	bl	800016c <__adddf3>
 8008360:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008364:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008368:	950b      	str	r5, [sp, #44]	; 0x2c
 800836a:	2e00      	cmp	r6, #0
 800836c:	d15c      	bne.n	8008428 <_dtoa_r+0x4d0>
 800836e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008372:	2200      	movs	r2, #0
 8008374:	4b7f      	ldr	r3, [pc, #508]	; (8008574 <_dtoa_r+0x61c>)
 8008376:	f7f7 fef7 	bl	8000168 <__aeabi_dsub>
 800837a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800837c:	462b      	mov	r3, r5
 800837e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008382:	f7f8 fb39 	bl	80009f8 <__aeabi_dcmpgt>
 8008386:	2800      	cmp	r0, #0
 8008388:	f040 8281 	bne.w	800888e <_dtoa_r+0x936>
 800838c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008392:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008396:	f7f8 fb11 	bl	80009bc <__aeabi_dcmplt>
 800839a:	2800      	cmp	r0, #0
 800839c:	f040 8275 	bne.w	800888a <_dtoa_r+0x932>
 80083a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80083a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f2c0 814b 	blt.w	8008646 <_dtoa_r+0x6ee>
 80083b0:	f1ba 0f0e 	cmp.w	sl, #14
 80083b4:	f300 8147 	bgt.w	8008646 <_dtoa_r+0x6ee>
 80083b8:	4b69      	ldr	r3, [pc, #420]	; (8008560 <_dtoa_r+0x608>)
 80083ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f280 80d7 	bge.w	800857c <_dtoa_r+0x624>
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	f300 80d3 	bgt.w	800857c <_dtoa_r+0x624>
 80083d6:	f040 8257 	bne.w	8008888 <_dtoa_r+0x930>
 80083da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083de:	2200      	movs	r2, #0
 80083e0:	4b64      	ldr	r3, [pc, #400]	; (8008574 <_dtoa_r+0x61c>)
 80083e2:	f7f8 f879 	bl	80004d8 <__aeabi_dmul>
 80083e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083ea:	f7f8 fafb 	bl	80009e4 <__aeabi_dcmpge>
 80083ee:	4646      	mov	r6, r8
 80083f0:	4647      	mov	r7, r8
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f040 822d 	bne.w	8008852 <_dtoa_r+0x8fa>
 80083f8:	9b06      	ldr	r3, [sp, #24]
 80083fa:	9a06      	ldr	r2, [sp, #24]
 80083fc:	1c5d      	adds	r5, r3, #1
 80083fe:	2331      	movs	r3, #49	; 0x31
 8008400:	f10a 0a01 	add.w	sl, sl, #1
 8008404:	7013      	strb	r3, [r2, #0]
 8008406:	e228      	b.n	800885a <_dtoa_r+0x902>
 8008408:	07f2      	lsls	r2, r6, #31
 800840a:	d505      	bpl.n	8008418 <_dtoa_r+0x4c0>
 800840c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008410:	f7f8 f862 	bl	80004d8 <__aeabi_dmul>
 8008414:	2301      	movs	r3, #1
 8008416:	3501      	adds	r5, #1
 8008418:	1076      	asrs	r6, r6, #1
 800841a:	3708      	adds	r7, #8
 800841c:	e76e      	b.n	80082fc <_dtoa_r+0x3a4>
 800841e:	2502      	movs	r5, #2
 8008420:	e771      	b.n	8008306 <_dtoa_r+0x3ae>
 8008422:	4657      	mov	r7, sl
 8008424:	4646      	mov	r6, r8
 8008426:	e790      	b.n	800834a <_dtoa_r+0x3f2>
 8008428:	4b4d      	ldr	r3, [pc, #308]	; (8008560 <_dtoa_r+0x608>)
 800842a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800842e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d048      	beq.n	80084ca <_dtoa_r+0x572>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	2000      	movs	r0, #0
 800843e:	494e      	ldr	r1, [pc, #312]	; (8008578 <_dtoa_r+0x620>)
 8008440:	f7f8 f974 	bl	800072c <__aeabi_ddiv>
 8008444:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008448:	f7f7 fe8e 	bl	8000168 <__aeabi_dsub>
 800844c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008450:	9d06      	ldr	r5, [sp, #24]
 8008452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008456:	f7f8 faef 	bl	8000a38 <__aeabi_d2iz>
 800845a:	9011      	str	r0, [sp, #68]	; 0x44
 800845c:	f7f7 ffd2 	bl	8000404 <__aeabi_i2d>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008468:	f7f7 fe7e 	bl	8000168 <__aeabi_dsub>
 800846c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800846e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008472:	3330      	adds	r3, #48	; 0x30
 8008474:	f805 3b01 	strb.w	r3, [r5], #1
 8008478:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800847c:	f7f8 fa9e 	bl	80009bc <__aeabi_dcmplt>
 8008480:	2800      	cmp	r0, #0
 8008482:	d163      	bne.n	800854c <_dtoa_r+0x5f4>
 8008484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008488:	2000      	movs	r0, #0
 800848a:	4937      	ldr	r1, [pc, #220]	; (8008568 <_dtoa_r+0x610>)
 800848c:	f7f7 fe6c 	bl	8000168 <__aeabi_dsub>
 8008490:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008494:	f7f8 fa92 	bl	80009bc <__aeabi_dcmplt>
 8008498:	2800      	cmp	r0, #0
 800849a:	f040 80b5 	bne.w	8008608 <_dtoa_r+0x6b0>
 800849e:	9b06      	ldr	r3, [sp, #24]
 80084a0:	1aeb      	subs	r3, r5, r3
 80084a2:	429e      	cmp	r6, r3
 80084a4:	f77f af7c 	ble.w	80083a0 <_dtoa_r+0x448>
 80084a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084ac:	2200      	movs	r2, #0
 80084ae:	4b2f      	ldr	r3, [pc, #188]	; (800856c <_dtoa_r+0x614>)
 80084b0:	f7f8 f812 	bl	80004d8 <__aeabi_dmul>
 80084b4:	2200      	movs	r2, #0
 80084b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80084ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084be:	4b2b      	ldr	r3, [pc, #172]	; (800856c <_dtoa_r+0x614>)
 80084c0:	f7f8 f80a 	bl	80004d8 <__aeabi_dmul>
 80084c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c8:	e7c3      	b.n	8008452 <_dtoa_r+0x4fa>
 80084ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084ce:	f7f8 f803 	bl	80004d8 <__aeabi_dmul>
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80084d8:	199d      	adds	r5, r3, r6
 80084da:	461e      	mov	r6, r3
 80084dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e0:	f7f8 faaa 	bl	8000a38 <__aeabi_d2iz>
 80084e4:	9011      	str	r0, [sp, #68]	; 0x44
 80084e6:	f7f7 ff8d 	bl	8000404 <__aeabi_i2d>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084f2:	f7f7 fe39 	bl	8000168 <__aeabi_dsub>
 80084f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084fc:	3330      	adds	r3, #48	; 0x30
 80084fe:	f806 3b01 	strb.w	r3, [r6], #1
 8008502:	42ae      	cmp	r6, r5
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	d124      	bne.n	8008554 <_dtoa_r+0x5fc>
 800850a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800850e:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <_dtoa_r+0x620>)
 8008510:	f7f7 fe2c 	bl	800016c <__adddf3>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800851c:	f7f8 fa6c 	bl	80009f8 <__aeabi_dcmpgt>
 8008520:	2800      	cmp	r0, #0
 8008522:	d171      	bne.n	8008608 <_dtoa_r+0x6b0>
 8008524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008528:	2000      	movs	r0, #0
 800852a:	4913      	ldr	r1, [pc, #76]	; (8008578 <_dtoa_r+0x620>)
 800852c:	f7f7 fe1c 	bl	8000168 <__aeabi_dsub>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008538:	f7f8 fa40 	bl	80009bc <__aeabi_dcmplt>
 800853c:	2800      	cmp	r0, #0
 800853e:	f43f af2f 	beq.w	80083a0 <_dtoa_r+0x448>
 8008542:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008546:	1e6a      	subs	r2, r5, #1
 8008548:	2b30      	cmp	r3, #48	; 0x30
 800854a:	d001      	beq.n	8008550 <_dtoa_r+0x5f8>
 800854c:	46ba      	mov	sl, r7
 800854e:	e04a      	b.n	80085e6 <_dtoa_r+0x68e>
 8008550:	4615      	mov	r5, r2
 8008552:	e7f6      	b.n	8008542 <_dtoa_r+0x5ea>
 8008554:	4b05      	ldr	r3, [pc, #20]	; (800856c <_dtoa_r+0x614>)
 8008556:	f7f7 ffbf 	bl	80004d8 <__aeabi_dmul>
 800855a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800855e:	e7bd      	b.n	80084dc <_dtoa_r+0x584>
 8008560:	08009da0 	.word	0x08009da0
 8008564:	08009d78 	.word	0x08009d78
 8008568:	3ff00000 	.word	0x3ff00000
 800856c:	40240000 	.word	0x40240000
 8008570:	401c0000 	.word	0x401c0000
 8008574:	40140000 	.word	0x40140000
 8008578:	3fe00000 	.word	0x3fe00000
 800857c:	9d06      	ldr	r5, [sp, #24]
 800857e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008586:	4630      	mov	r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	f7f8 f8cf 	bl	800072c <__aeabi_ddiv>
 800858e:	f7f8 fa53 	bl	8000a38 <__aeabi_d2iz>
 8008592:	4681      	mov	r9, r0
 8008594:	f7f7 ff36 	bl	8000404 <__aeabi_i2d>
 8008598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800859c:	f7f7 ff9c 	bl	80004d8 <__aeabi_dmul>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4630      	mov	r0, r6
 80085a6:	4639      	mov	r1, r7
 80085a8:	f7f7 fdde 	bl	8000168 <__aeabi_dsub>
 80085ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80085b0:	f805 6b01 	strb.w	r6, [r5], #1
 80085b4:	9e06      	ldr	r6, [sp, #24]
 80085b6:	4602      	mov	r2, r0
 80085b8:	1bae      	subs	r6, r5, r6
 80085ba:	45b0      	cmp	r8, r6
 80085bc:	460b      	mov	r3, r1
 80085be:	d135      	bne.n	800862c <_dtoa_r+0x6d4>
 80085c0:	f7f7 fdd4 	bl	800016c <__adddf3>
 80085c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085c8:	4606      	mov	r6, r0
 80085ca:	460f      	mov	r7, r1
 80085cc:	f7f8 fa14 	bl	80009f8 <__aeabi_dcmpgt>
 80085d0:	b9c8      	cbnz	r0, 8008606 <_dtoa_r+0x6ae>
 80085d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085d6:	4630      	mov	r0, r6
 80085d8:	4639      	mov	r1, r7
 80085da:	f7f8 f9e5 	bl	80009a8 <__aeabi_dcmpeq>
 80085de:	b110      	cbz	r0, 80085e6 <_dtoa_r+0x68e>
 80085e0:	f019 0f01 	tst.w	r9, #1
 80085e4:	d10f      	bne.n	8008606 <_dtoa_r+0x6ae>
 80085e6:	4659      	mov	r1, fp
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 facc 	bl	8008b86 <_Bfree>
 80085ee:	2300      	movs	r3, #0
 80085f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80085f2:	702b      	strb	r3, [r5, #0]
 80085f4:	f10a 0301 	add.w	r3, sl, #1
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f43f acf3 	beq.w	8007fe8 <_dtoa_r+0x90>
 8008602:	601d      	str	r5, [r3, #0]
 8008604:	e4f0      	b.n	8007fe8 <_dtoa_r+0x90>
 8008606:	4657      	mov	r7, sl
 8008608:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800860c:	1e6b      	subs	r3, r5, #1
 800860e:	2a39      	cmp	r2, #57	; 0x39
 8008610:	d106      	bne.n	8008620 <_dtoa_r+0x6c8>
 8008612:	9a06      	ldr	r2, [sp, #24]
 8008614:	429a      	cmp	r2, r3
 8008616:	d107      	bne.n	8008628 <_dtoa_r+0x6d0>
 8008618:	2330      	movs	r3, #48	; 0x30
 800861a:	7013      	strb	r3, [r2, #0]
 800861c:	4613      	mov	r3, r2
 800861e:	3701      	adds	r7, #1
 8008620:	781a      	ldrb	r2, [r3, #0]
 8008622:	3201      	adds	r2, #1
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	e791      	b.n	800854c <_dtoa_r+0x5f4>
 8008628:	461d      	mov	r5, r3
 800862a:	e7ed      	b.n	8008608 <_dtoa_r+0x6b0>
 800862c:	2200      	movs	r2, #0
 800862e:	4b99      	ldr	r3, [pc, #612]	; (8008894 <_dtoa_r+0x93c>)
 8008630:	f7f7 ff52 	bl	80004d8 <__aeabi_dmul>
 8008634:	2200      	movs	r2, #0
 8008636:	2300      	movs	r3, #0
 8008638:	4606      	mov	r6, r0
 800863a:	460f      	mov	r7, r1
 800863c:	f7f8 f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 8008640:	2800      	cmp	r0, #0
 8008642:	d09e      	beq.n	8008582 <_dtoa_r+0x62a>
 8008644:	e7cf      	b.n	80085e6 <_dtoa_r+0x68e>
 8008646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008648:	2a00      	cmp	r2, #0
 800864a:	f000 8088 	beq.w	800875e <_dtoa_r+0x806>
 800864e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008650:	2a01      	cmp	r2, #1
 8008652:	dc6d      	bgt.n	8008730 <_dtoa_r+0x7d8>
 8008654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008656:	2a00      	cmp	r2, #0
 8008658:	d066      	beq.n	8008728 <_dtoa_r+0x7d0>
 800865a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800865e:	464d      	mov	r5, r9
 8008660:	9e08      	ldr	r6, [sp, #32]
 8008662:	9a07      	ldr	r2, [sp, #28]
 8008664:	2101      	movs	r1, #1
 8008666:	441a      	add	r2, r3
 8008668:	4620      	mov	r0, r4
 800866a:	4499      	add	r9, r3
 800866c:	9207      	str	r2, [sp, #28]
 800866e:	f000 fb2a 	bl	8008cc6 <__i2b>
 8008672:	4607      	mov	r7, r0
 8008674:	2d00      	cmp	r5, #0
 8008676:	dd0b      	ble.n	8008690 <_dtoa_r+0x738>
 8008678:	9b07      	ldr	r3, [sp, #28]
 800867a:	2b00      	cmp	r3, #0
 800867c:	dd08      	ble.n	8008690 <_dtoa_r+0x738>
 800867e:	42ab      	cmp	r3, r5
 8008680:	bfa8      	it	ge
 8008682:	462b      	movge	r3, r5
 8008684:	9a07      	ldr	r2, [sp, #28]
 8008686:	eba9 0903 	sub.w	r9, r9, r3
 800868a:	1aed      	subs	r5, r5, r3
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	9307      	str	r3, [sp, #28]
 8008690:	9b08      	ldr	r3, [sp, #32]
 8008692:	b1eb      	cbz	r3, 80086d0 <_dtoa_r+0x778>
 8008694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008696:	2b00      	cmp	r3, #0
 8008698:	d065      	beq.n	8008766 <_dtoa_r+0x80e>
 800869a:	b18e      	cbz	r6, 80086c0 <_dtoa_r+0x768>
 800869c:	4639      	mov	r1, r7
 800869e:	4632      	mov	r2, r6
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 fbaf 	bl	8008e04 <__pow5mult>
 80086a6:	465a      	mov	r2, fp
 80086a8:	4601      	mov	r1, r0
 80086aa:	4607      	mov	r7, r0
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fb13 	bl	8008cd8 <__multiply>
 80086b2:	4659      	mov	r1, fp
 80086b4:	900a      	str	r0, [sp, #40]	; 0x28
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 fa65 	bl	8008b86 <_Bfree>
 80086bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086be:	469b      	mov	fp, r3
 80086c0:	9b08      	ldr	r3, [sp, #32]
 80086c2:	1b9a      	subs	r2, r3, r6
 80086c4:	d004      	beq.n	80086d0 <_dtoa_r+0x778>
 80086c6:	4659      	mov	r1, fp
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fb9b 	bl	8008e04 <__pow5mult>
 80086ce:	4683      	mov	fp, r0
 80086d0:	2101      	movs	r1, #1
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 faf7 	bl	8008cc6 <__i2b>
 80086d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086da:	4606      	mov	r6, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 81c6 	beq.w	8008a6e <_dtoa_r+0xb16>
 80086e2:	461a      	mov	r2, r3
 80086e4:	4601      	mov	r1, r0
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 fb8c 	bl	8008e04 <__pow5mult>
 80086ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80086ee:	4606      	mov	r6, r0
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	dc3e      	bgt.n	8008772 <_dtoa_r+0x81a>
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d137      	bne.n	800876a <_dtoa_r+0x812>
 80086fa:	9b03      	ldr	r3, [sp, #12]
 80086fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008700:	2b00      	cmp	r3, #0
 8008702:	d134      	bne.n	800876e <_dtoa_r+0x816>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800870a:	0d1b      	lsrs	r3, r3, #20
 800870c:	051b      	lsls	r3, r3, #20
 800870e:	b12b      	cbz	r3, 800871c <_dtoa_r+0x7c4>
 8008710:	9b07      	ldr	r3, [sp, #28]
 8008712:	f109 0901 	add.w	r9, r9, #1
 8008716:	3301      	adds	r3, #1
 8008718:	9307      	str	r3, [sp, #28]
 800871a:	2301      	movs	r3, #1
 800871c:	9308      	str	r3, [sp, #32]
 800871e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008720:	2b00      	cmp	r3, #0
 8008722:	d128      	bne.n	8008776 <_dtoa_r+0x81e>
 8008724:	2001      	movs	r0, #1
 8008726:	e02e      	b.n	8008786 <_dtoa_r+0x82e>
 8008728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800872a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800872e:	e796      	b.n	800865e <_dtoa_r+0x706>
 8008730:	9b08      	ldr	r3, [sp, #32]
 8008732:	f108 36ff 	add.w	r6, r8, #4294967295
 8008736:	42b3      	cmp	r3, r6
 8008738:	bfb7      	itett	lt
 800873a:	9b08      	ldrlt	r3, [sp, #32]
 800873c:	1b9e      	subge	r6, r3, r6
 800873e:	1af2      	sublt	r2, r6, r3
 8008740:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008742:	bfbf      	itttt	lt
 8008744:	9608      	strlt	r6, [sp, #32]
 8008746:	189b      	addlt	r3, r3, r2
 8008748:	930c      	strlt	r3, [sp, #48]	; 0x30
 800874a:	2600      	movlt	r6, #0
 800874c:	f1b8 0f00 	cmp.w	r8, #0
 8008750:	bfb9      	ittee	lt
 8008752:	eba9 0508 	sublt.w	r5, r9, r8
 8008756:	2300      	movlt	r3, #0
 8008758:	464d      	movge	r5, r9
 800875a:	4643      	movge	r3, r8
 800875c:	e781      	b.n	8008662 <_dtoa_r+0x70a>
 800875e:	9e08      	ldr	r6, [sp, #32]
 8008760:	464d      	mov	r5, r9
 8008762:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008764:	e786      	b.n	8008674 <_dtoa_r+0x71c>
 8008766:	9a08      	ldr	r2, [sp, #32]
 8008768:	e7ad      	b.n	80086c6 <_dtoa_r+0x76e>
 800876a:	2300      	movs	r3, #0
 800876c:	e7d6      	b.n	800871c <_dtoa_r+0x7c4>
 800876e:	9b02      	ldr	r3, [sp, #8]
 8008770:	e7d4      	b.n	800871c <_dtoa_r+0x7c4>
 8008772:	2300      	movs	r3, #0
 8008774:	9308      	str	r3, [sp, #32]
 8008776:	6933      	ldr	r3, [r6, #16]
 8008778:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800877c:	6918      	ldr	r0, [r3, #16]
 800877e:	f000 fa54 	bl	8008c2a <__hi0bits>
 8008782:	f1c0 0020 	rsb	r0, r0, #32
 8008786:	9b07      	ldr	r3, [sp, #28]
 8008788:	4418      	add	r0, r3
 800878a:	f010 001f 	ands.w	r0, r0, #31
 800878e:	d047      	beq.n	8008820 <_dtoa_r+0x8c8>
 8008790:	f1c0 0320 	rsb	r3, r0, #32
 8008794:	2b04      	cmp	r3, #4
 8008796:	dd3b      	ble.n	8008810 <_dtoa_r+0x8b8>
 8008798:	9b07      	ldr	r3, [sp, #28]
 800879a:	f1c0 001c 	rsb	r0, r0, #28
 800879e:	4481      	add	r9, r0
 80087a0:	4405      	add	r5, r0
 80087a2:	4403      	add	r3, r0
 80087a4:	9307      	str	r3, [sp, #28]
 80087a6:	f1b9 0f00 	cmp.w	r9, #0
 80087aa:	dd05      	ble.n	80087b8 <_dtoa_r+0x860>
 80087ac:	4659      	mov	r1, fp
 80087ae:	464a      	mov	r2, r9
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fb75 	bl	8008ea0 <__lshift>
 80087b6:	4683      	mov	fp, r0
 80087b8:	9b07      	ldr	r3, [sp, #28]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dd05      	ble.n	80087ca <_dtoa_r+0x872>
 80087be:	4631      	mov	r1, r6
 80087c0:	461a      	mov	r2, r3
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 fb6c 	bl	8008ea0 <__lshift>
 80087c8:	4606      	mov	r6, r0
 80087ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087cc:	b353      	cbz	r3, 8008824 <_dtoa_r+0x8cc>
 80087ce:	4631      	mov	r1, r6
 80087d0:	4658      	mov	r0, fp
 80087d2:	f000 fbb9 	bl	8008f48 <__mcmp>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	da24      	bge.n	8008824 <_dtoa_r+0x8cc>
 80087da:	2300      	movs	r3, #0
 80087dc:	4659      	mov	r1, fp
 80087de:	220a      	movs	r2, #10
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 f9e7 	bl	8008bb4 <__multadd>
 80087e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087ec:	4683      	mov	fp, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8144 	beq.w	8008a7c <_dtoa_r+0xb24>
 80087f4:	2300      	movs	r3, #0
 80087f6:	4639      	mov	r1, r7
 80087f8:	220a      	movs	r2, #10
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 f9da 	bl	8008bb4 <__multadd>
 8008800:	9b04      	ldr	r3, [sp, #16]
 8008802:	4607      	mov	r7, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	dc4d      	bgt.n	80088a4 <_dtoa_r+0x94c>
 8008808:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800880a:	2b02      	cmp	r3, #2
 800880c:	dd4a      	ble.n	80088a4 <_dtoa_r+0x94c>
 800880e:	e011      	b.n	8008834 <_dtoa_r+0x8dc>
 8008810:	d0c9      	beq.n	80087a6 <_dtoa_r+0x84e>
 8008812:	9a07      	ldr	r2, [sp, #28]
 8008814:	331c      	adds	r3, #28
 8008816:	441a      	add	r2, r3
 8008818:	4499      	add	r9, r3
 800881a:	441d      	add	r5, r3
 800881c:	4613      	mov	r3, r2
 800881e:	e7c1      	b.n	80087a4 <_dtoa_r+0x84c>
 8008820:	4603      	mov	r3, r0
 8008822:	e7f6      	b.n	8008812 <_dtoa_r+0x8ba>
 8008824:	f1b8 0f00 	cmp.w	r8, #0
 8008828:	dc36      	bgt.n	8008898 <_dtoa_r+0x940>
 800882a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800882c:	2b02      	cmp	r3, #2
 800882e:	dd33      	ble.n	8008898 <_dtoa_r+0x940>
 8008830:	f8cd 8010 	str.w	r8, [sp, #16]
 8008834:	9b04      	ldr	r3, [sp, #16]
 8008836:	b963      	cbnz	r3, 8008852 <_dtoa_r+0x8fa>
 8008838:	4631      	mov	r1, r6
 800883a:	2205      	movs	r2, #5
 800883c:	4620      	mov	r0, r4
 800883e:	f000 f9b9 	bl	8008bb4 <__multadd>
 8008842:	4601      	mov	r1, r0
 8008844:	4606      	mov	r6, r0
 8008846:	4658      	mov	r0, fp
 8008848:	f000 fb7e 	bl	8008f48 <__mcmp>
 800884c:	2800      	cmp	r0, #0
 800884e:	f73f add3 	bgt.w	80083f8 <_dtoa_r+0x4a0>
 8008852:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008854:	9d06      	ldr	r5, [sp, #24]
 8008856:	ea6f 0a03 	mvn.w	sl, r3
 800885a:	f04f 0900 	mov.w	r9, #0
 800885e:	4631      	mov	r1, r6
 8008860:	4620      	mov	r0, r4
 8008862:	f000 f990 	bl	8008b86 <_Bfree>
 8008866:	2f00      	cmp	r7, #0
 8008868:	f43f aebd 	beq.w	80085e6 <_dtoa_r+0x68e>
 800886c:	f1b9 0f00 	cmp.w	r9, #0
 8008870:	d005      	beq.n	800887e <_dtoa_r+0x926>
 8008872:	45b9      	cmp	r9, r7
 8008874:	d003      	beq.n	800887e <_dtoa_r+0x926>
 8008876:	4649      	mov	r1, r9
 8008878:	4620      	mov	r0, r4
 800887a:	f000 f984 	bl	8008b86 <_Bfree>
 800887e:	4639      	mov	r1, r7
 8008880:	4620      	mov	r0, r4
 8008882:	f000 f980 	bl	8008b86 <_Bfree>
 8008886:	e6ae      	b.n	80085e6 <_dtoa_r+0x68e>
 8008888:	2600      	movs	r6, #0
 800888a:	4637      	mov	r7, r6
 800888c:	e7e1      	b.n	8008852 <_dtoa_r+0x8fa>
 800888e:	46ba      	mov	sl, r7
 8008890:	4637      	mov	r7, r6
 8008892:	e5b1      	b.n	80083f8 <_dtoa_r+0x4a0>
 8008894:	40240000 	.word	0x40240000
 8008898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889a:	f8cd 8010 	str.w	r8, [sp, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 80f3 	beq.w	8008a8a <_dtoa_r+0xb32>
 80088a4:	2d00      	cmp	r5, #0
 80088a6:	dd05      	ble.n	80088b4 <_dtoa_r+0x95c>
 80088a8:	4639      	mov	r1, r7
 80088aa:	462a      	mov	r2, r5
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 faf7 	bl	8008ea0 <__lshift>
 80088b2:	4607      	mov	r7, r0
 80088b4:	9b08      	ldr	r3, [sp, #32]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d04c      	beq.n	8008954 <_dtoa_r+0x9fc>
 80088ba:	6879      	ldr	r1, [r7, #4]
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 f92e 	bl	8008b1e <_Balloc>
 80088c2:	4605      	mov	r5, r0
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	f107 010c 	add.w	r1, r7, #12
 80088ca:	3202      	adds	r2, #2
 80088cc:	0092      	lsls	r2, r2, #2
 80088ce:	300c      	adds	r0, #12
 80088d0:	f000 f91a 	bl	8008b08 <memcpy>
 80088d4:	2201      	movs	r2, #1
 80088d6:	4629      	mov	r1, r5
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fae1 	bl	8008ea0 <__lshift>
 80088de:	46b9      	mov	r9, r7
 80088e0:	4607      	mov	r7, r0
 80088e2:	9b06      	ldr	r3, [sp, #24]
 80088e4:	9307      	str	r3, [sp, #28]
 80088e6:	9b02      	ldr	r3, [sp, #8]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	9308      	str	r3, [sp, #32]
 80088ee:	4631      	mov	r1, r6
 80088f0:	4658      	mov	r0, fp
 80088f2:	f7ff faa3 	bl	8007e3c <quorem>
 80088f6:	4649      	mov	r1, r9
 80088f8:	4605      	mov	r5, r0
 80088fa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80088fe:	4658      	mov	r0, fp
 8008900:	f000 fb22 	bl	8008f48 <__mcmp>
 8008904:	463a      	mov	r2, r7
 8008906:	9002      	str	r0, [sp, #8]
 8008908:	4631      	mov	r1, r6
 800890a:	4620      	mov	r0, r4
 800890c:	f000 fb36 	bl	8008f7c <__mdiff>
 8008910:	68c3      	ldr	r3, [r0, #12]
 8008912:	4602      	mov	r2, r0
 8008914:	bb03      	cbnz	r3, 8008958 <_dtoa_r+0xa00>
 8008916:	4601      	mov	r1, r0
 8008918:	9009      	str	r0, [sp, #36]	; 0x24
 800891a:	4658      	mov	r0, fp
 800891c:	f000 fb14 	bl	8008f48 <__mcmp>
 8008920:	4603      	mov	r3, r0
 8008922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008924:	4611      	mov	r1, r2
 8008926:	4620      	mov	r0, r4
 8008928:	9309      	str	r3, [sp, #36]	; 0x24
 800892a:	f000 f92c 	bl	8008b86 <_Bfree>
 800892e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008930:	b9a3      	cbnz	r3, 800895c <_dtoa_r+0xa04>
 8008932:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008934:	b992      	cbnz	r2, 800895c <_dtoa_r+0xa04>
 8008936:	9a08      	ldr	r2, [sp, #32]
 8008938:	b982      	cbnz	r2, 800895c <_dtoa_r+0xa04>
 800893a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800893e:	d029      	beq.n	8008994 <_dtoa_r+0xa3c>
 8008940:	9b02      	ldr	r3, [sp, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	dd01      	ble.n	800894a <_dtoa_r+0x9f2>
 8008946:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800894a:	9b07      	ldr	r3, [sp, #28]
 800894c:	1c5d      	adds	r5, r3, #1
 800894e:	f883 8000 	strb.w	r8, [r3]
 8008952:	e784      	b.n	800885e <_dtoa_r+0x906>
 8008954:	4638      	mov	r0, r7
 8008956:	e7c2      	b.n	80088de <_dtoa_r+0x986>
 8008958:	2301      	movs	r3, #1
 800895a:	e7e3      	b.n	8008924 <_dtoa_r+0x9cc>
 800895c:	9a02      	ldr	r2, [sp, #8]
 800895e:	2a00      	cmp	r2, #0
 8008960:	db04      	blt.n	800896c <_dtoa_r+0xa14>
 8008962:	d123      	bne.n	80089ac <_dtoa_r+0xa54>
 8008964:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008966:	bb0a      	cbnz	r2, 80089ac <_dtoa_r+0xa54>
 8008968:	9a08      	ldr	r2, [sp, #32]
 800896a:	b9fa      	cbnz	r2, 80089ac <_dtoa_r+0xa54>
 800896c:	2b00      	cmp	r3, #0
 800896e:	ddec      	ble.n	800894a <_dtoa_r+0x9f2>
 8008970:	4659      	mov	r1, fp
 8008972:	2201      	movs	r2, #1
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fa93 	bl	8008ea0 <__lshift>
 800897a:	4631      	mov	r1, r6
 800897c:	4683      	mov	fp, r0
 800897e:	f000 fae3 	bl	8008f48 <__mcmp>
 8008982:	2800      	cmp	r0, #0
 8008984:	dc03      	bgt.n	800898e <_dtoa_r+0xa36>
 8008986:	d1e0      	bne.n	800894a <_dtoa_r+0x9f2>
 8008988:	f018 0f01 	tst.w	r8, #1
 800898c:	d0dd      	beq.n	800894a <_dtoa_r+0x9f2>
 800898e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008992:	d1d8      	bne.n	8008946 <_dtoa_r+0x9ee>
 8008994:	9b07      	ldr	r3, [sp, #28]
 8008996:	9a07      	ldr	r2, [sp, #28]
 8008998:	1c5d      	adds	r5, r3, #1
 800899a:	2339      	movs	r3, #57	; 0x39
 800899c:	7013      	strb	r3, [r2, #0]
 800899e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089a2:	1e6a      	subs	r2, r5, #1
 80089a4:	2b39      	cmp	r3, #57	; 0x39
 80089a6:	d04d      	beq.n	8008a44 <_dtoa_r+0xaec>
 80089a8:	3301      	adds	r3, #1
 80089aa:	e052      	b.n	8008a52 <_dtoa_r+0xafa>
 80089ac:	9a07      	ldr	r2, [sp, #28]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f102 0501 	add.w	r5, r2, #1
 80089b4:	dd06      	ble.n	80089c4 <_dtoa_r+0xa6c>
 80089b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089ba:	d0eb      	beq.n	8008994 <_dtoa_r+0xa3c>
 80089bc:	f108 0801 	add.w	r8, r8, #1
 80089c0:	9b07      	ldr	r3, [sp, #28]
 80089c2:	e7c4      	b.n	800894e <_dtoa_r+0x9f6>
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	9a04      	ldr	r2, [sp, #16]
 80089c8:	1aeb      	subs	r3, r5, r3
 80089ca:	4293      	cmp	r3, r2
 80089cc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80089d0:	d021      	beq.n	8008a16 <_dtoa_r+0xabe>
 80089d2:	4659      	mov	r1, fp
 80089d4:	2300      	movs	r3, #0
 80089d6:	220a      	movs	r2, #10
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 f8eb 	bl	8008bb4 <__multadd>
 80089de:	45b9      	cmp	r9, r7
 80089e0:	4683      	mov	fp, r0
 80089e2:	f04f 0300 	mov.w	r3, #0
 80089e6:	f04f 020a 	mov.w	r2, #10
 80089ea:	4649      	mov	r1, r9
 80089ec:	4620      	mov	r0, r4
 80089ee:	d105      	bne.n	80089fc <_dtoa_r+0xaa4>
 80089f0:	f000 f8e0 	bl	8008bb4 <__multadd>
 80089f4:	4681      	mov	r9, r0
 80089f6:	4607      	mov	r7, r0
 80089f8:	9507      	str	r5, [sp, #28]
 80089fa:	e778      	b.n	80088ee <_dtoa_r+0x996>
 80089fc:	f000 f8da 	bl	8008bb4 <__multadd>
 8008a00:	4639      	mov	r1, r7
 8008a02:	4681      	mov	r9, r0
 8008a04:	2300      	movs	r3, #0
 8008a06:	220a      	movs	r2, #10
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 f8d3 	bl	8008bb4 <__multadd>
 8008a0e:	4607      	mov	r7, r0
 8008a10:	e7f2      	b.n	80089f8 <_dtoa_r+0xaa0>
 8008a12:	f04f 0900 	mov.w	r9, #0
 8008a16:	4659      	mov	r1, fp
 8008a18:	2201      	movs	r2, #1
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fa40 	bl	8008ea0 <__lshift>
 8008a20:	4631      	mov	r1, r6
 8008a22:	4683      	mov	fp, r0
 8008a24:	f000 fa90 	bl	8008f48 <__mcmp>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	dcb8      	bgt.n	800899e <_dtoa_r+0xa46>
 8008a2c:	d102      	bne.n	8008a34 <_dtoa_r+0xadc>
 8008a2e:	f018 0f01 	tst.w	r8, #1
 8008a32:	d1b4      	bne.n	800899e <_dtoa_r+0xa46>
 8008a34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a38:	1e6a      	subs	r2, r5, #1
 8008a3a:	2b30      	cmp	r3, #48	; 0x30
 8008a3c:	f47f af0f 	bne.w	800885e <_dtoa_r+0x906>
 8008a40:	4615      	mov	r5, r2
 8008a42:	e7f7      	b.n	8008a34 <_dtoa_r+0xadc>
 8008a44:	9b06      	ldr	r3, [sp, #24]
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d105      	bne.n	8008a56 <_dtoa_r+0xafe>
 8008a4a:	2331      	movs	r3, #49	; 0x31
 8008a4c:	9a06      	ldr	r2, [sp, #24]
 8008a4e:	f10a 0a01 	add.w	sl, sl, #1
 8008a52:	7013      	strb	r3, [r2, #0]
 8008a54:	e703      	b.n	800885e <_dtoa_r+0x906>
 8008a56:	4615      	mov	r5, r2
 8008a58:	e7a1      	b.n	800899e <_dtoa_r+0xa46>
 8008a5a:	4b17      	ldr	r3, [pc, #92]	; (8008ab8 <_dtoa_r+0xb60>)
 8008a5c:	f7ff bae1 	b.w	8008022 <_dtoa_r+0xca>
 8008a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f47f aabb 	bne.w	8007fde <_dtoa_r+0x86>
 8008a68:	4b14      	ldr	r3, [pc, #80]	; (8008abc <_dtoa_r+0xb64>)
 8008a6a:	f7ff bada 	b.w	8008022 <_dtoa_r+0xca>
 8008a6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	f77f ae3f 	ble.w	80086f4 <_dtoa_r+0x79c>
 8008a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a78:	9308      	str	r3, [sp, #32]
 8008a7a:	e653      	b.n	8008724 <_dtoa_r+0x7cc>
 8008a7c:	9b04      	ldr	r3, [sp, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	dc03      	bgt.n	8008a8a <_dtoa_r+0xb32>
 8008a82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	f73f aed5 	bgt.w	8008834 <_dtoa_r+0x8dc>
 8008a8a:	9d06      	ldr	r5, [sp, #24]
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4658      	mov	r0, fp
 8008a90:	f7ff f9d4 	bl	8007e3c <quorem>
 8008a94:	9b06      	ldr	r3, [sp, #24]
 8008a96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a9a:	f805 8b01 	strb.w	r8, [r5], #1
 8008a9e:	9a04      	ldr	r2, [sp, #16]
 8008aa0:	1aeb      	subs	r3, r5, r3
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	ddb5      	ble.n	8008a12 <_dtoa_r+0xaba>
 8008aa6:	4659      	mov	r1, fp
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	220a      	movs	r2, #10
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 f881 	bl	8008bb4 <__multadd>
 8008ab2:	4683      	mov	fp, r0
 8008ab4:	e7ea      	b.n	8008a8c <_dtoa_r+0xb34>
 8008ab6:	bf00      	nop
 8008ab8:	08009d40 	.word	0x08009d40
 8008abc:	08009d64 	.word	0x08009d64

08008ac0 <_localeconv_r>:
 8008ac0:	4b04      	ldr	r3, [pc, #16]	; (8008ad4 <_localeconv_r+0x14>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6a18      	ldr	r0, [r3, #32]
 8008ac6:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <_localeconv_r+0x18>)
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	bf08      	it	eq
 8008acc:	4618      	moveq	r0, r3
 8008ace:	30f0      	adds	r0, #240	; 0xf0
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000024 	.word	0x20000024
 8008ad8:	20000088 	.word	0x20000088

08008adc <malloc>:
 8008adc:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <malloc+0xc>)
 8008ade:	4601      	mov	r1, r0
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	f000 bb53 	b.w	800918c <_malloc_r>
 8008ae6:	bf00      	nop
 8008ae8:	20000024 	.word	0x20000024

08008aec <memchr>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	b2c9      	uxtb	r1, r1
 8008af0:	4402      	add	r2, r0
 8008af2:	4290      	cmp	r0, r2
 8008af4:	4603      	mov	r3, r0
 8008af6:	d101      	bne.n	8008afc <memchr+0x10>
 8008af8:	2300      	movs	r3, #0
 8008afa:	e003      	b.n	8008b04 <memchr+0x18>
 8008afc:	781c      	ldrb	r4, [r3, #0]
 8008afe:	3001      	adds	r0, #1
 8008b00:	428c      	cmp	r4, r1
 8008b02:	d1f6      	bne.n	8008af2 <memchr+0x6>
 8008b04:	4618      	mov	r0, r3
 8008b06:	bd10      	pop	{r4, pc}

08008b08 <memcpy>:
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	1e43      	subs	r3, r0, #1
 8008b0c:	440a      	add	r2, r1
 8008b0e:	4291      	cmp	r1, r2
 8008b10:	d100      	bne.n	8008b14 <memcpy+0xc>
 8008b12:	bd10      	pop	{r4, pc}
 8008b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b1c:	e7f7      	b.n	8008b0e <memcpy+0x6>

08008b1e <_Balloc>:
 8008b1e:	b570      	push	{r4, r5, r6, lr}
 8008b20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b22:	4604      	mov	r4, r0
 8008b24:	460e      	mov	r6, r1
 8008b26:	b93d      	cbnz	r5, 8008b38 <_Balloc+0x1a>
 8008b28:	2010      	movs	r0, #16
 8008b2a:	f7ff ffd7 	bl	8008adc <malloc>
 8008b2e:	6260      	str	r0, [r4, #36]	; 0x24
 8008b30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b34:	6005      	str	r5, [r0, #0]
 8008b36:	60c5      	str	r5, [r0, #12]
 8008b38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b3a:	68eb      	ldr	r3, [r5, #12]
 8008b3c:	b183      	cbz	r3, 8008b60 <_Balloc+0x42>
 8008b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b46:	b9b8      	cbnz	r0, 8008b78 <_Balloc+0x5a>
 8008b48:	2101      	movs	r1, #1
 8008b4a:	fa01 f506 	lsl.w	r5, r1, r6
 8008b4e:	1d6a      	adds	r2, r5, #5
 8008b50:	0092      	lsls	r2, r2, #2
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 fabf 	bl	80090d6 <_calloc_r>
 8008b58:	b160      	cbz	r0, 8008b74 <_Balloc+0x56>
 8008b5a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008b5e:	e00e      	b.n	8008b7e <_Balloc+0x60>
 8008b60:	2221      	movs	r2, #33	; 0x21
 8008b62:	2104      	movs	r1, #4
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fab6 	bl	80090d6 <_calloc_r>
 8008b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b6c:	60e8      	str	r0, [r5, #12]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e4      	bne.n	8008b3e <_Balloc+0x20>
 8008b74:	2000      	movs	r0, #0
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	6802      	ldr	r2, [r0, #0]
 8008b7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b84:	e7f7      	b.n	8008b76 <_Balloc+0x58>

08008b86 <_Bfree>:
 8008b86:	b570      	push	{r4, r5, r6, lr}
 8008b88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	b93c      	cbnz	r4, 8008ba0 <_Bfree+0x1a>
 8008b90:	2010      	movs	r0, #16
 8008b92:	f7ff ffa3 	bl	8008adc <malloc>
 8008b96:	6270      	str	r0, [r6, #36]	; 0x24
 8008b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b9c:	6004      	str	r4, [r0, #0]
 8008b9e:	60c4      	str	r4, [r0, #12]
 8008ba0:	b13d      	cbz	r5, 8008bb2 <_Bfree+0x2c>
 8008ba2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ba4:	686a      	ldr	r2, [r5, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bac:	6029      	str	r1, [r5, #0]
 8008bae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}

08008bb4 <__multadd>:
 8008bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb8:	461f      	mov	r7, r3
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	690d      	ldr	r5, [r1, #16]
 8008bc2:	f101 0c14 	add.w	ip, r1, #20
 8008bc6:	f8dc 0000 	ldr.w	r0, [ip]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	b281      	uxth	r1, r0
 8008bce:	fb02 7101 	mla	r1, r2, r1, r7
 8008bd2:	0c00      	lsrs	r0, r0, #16
 8008bd4:	0c0f      	lsrs	r7, r1, #16
 8008bd6:	fb02 7000 	mla	r0, r2, r0, r7
 8008bda:	b289      	uxth	r1, r1
 8008bdc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008be0:	429d      	cmp	r5, r3
 8008be2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008be6:	f84c 1b04 	str.w	r1, [ip], #4
 8008bea:	dcec      	bgt.n	8008bc6 <__multadd+0x12>
 8008bec:	b1d7      	cbz	r7, 8008c24 <__multadd+0x70>
 8008bee:	68a3      	ldr	r3, [r4, #8]
 8008bf0:	42ab      	cmp	r3, r5
 8008bf2:	dc12      	bgt.n	8008c1a <__multadd+0x66>
 8008bf4:	6861      	ldr	r1, [r4, #4]
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	3101      	adds	r1, #1
 8008bfa:	f7ff ff90 	bl	8008b1e <_Balloc>
 8008bfe:	4680      	mov	r8, r0
 8008c00:	6922      	ldr	r2, [r4, #16]
 8008c02:	f104 010c 	add.w	r1, r4, #12
 8008c06:	3202      	adds	r2, #2
 8008c08:	0092      	lsls	r2, r2, #2
 8008c0a:	300c      	adds	r0, #12
 8008c0c:	f7ff ff7c 	bl	8008b08 <memcpy>
 8008c10:	4621      	mov	r1, r4
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff ffb7 	bl	8008b86 <_Bfree>
 8008c18:	4644      	mov	r4, r8
 8008c1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c1e:	3501      	adds	r5, #1
 8008c20:	615f      	str	r7, [r3, #20]
 8008c22:	6125      	str	r5, [r4, #16]
 8008c24:	4620      	mov	r0, r4
 8008c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c2a <__hi0bits>:
 8008c2a:	0c02      	lsrs	r2, r0, #16
 8008c2c:	0412      	lsls	r2, r2, #16
 8008c2e:	4603      	mov	r3, r0
 8008c30:	b9b2      	cbnz	r2, 8008c60 <__hi0bits+0x36>
 8008c32:	0403      	lsls	r3, r0, #16
 8008c34:	2010      	movs	r0, #16
 8008c36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c3a:	bf04      	itt	eq
 8008c3c:	021b      	lsleq	r3, r3, #8
 8008c3e:	3008      	addeq	r0, #8
 8008c40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c44:	bf04      	itt	eq
 8008c46:	011b      	lsleq	r3, r3, #4
 8008c48:	3004      	addeq	r0, #4
 8008c4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c4e:	bf04      	itt	eq
 8008c50:	009b      	lsleq	r3, r3, #2
 8008c52:	3002      	addeq	r0, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	db06      	blt.n	8008c66 <__hi0bits+0x3c>
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	d503      	bpl.n	8008c64 <__hi0bits+0x3a>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	4770      	bx	lr
 8008c60:	2000      	movs	r0, #0
 8008c62:	e7e8      	b.n	8008c36 <__hi0bits+0xc>
 8008c64:	2020      	movs	r0, #32
 8008c66:	4770      	bx	lr

08008c68 <__lo0bits>:
 8008c68:	6803      	ldr	r3, [r0, #0]
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	f013 0207 	ands.w	r2, r3, #7
 8008c70:	d00b      	beq.n	8008c8a <__lo0bits+0x22>
 8008c72:	07da      	lsls	r2, r3, #31
 8008c74:	d423      	bmi.n	8008cbe <__lo0bits+0x56>
 8008c76:	0798      	lsls	r0, r3, #30
 8008c78:	bf49      	itett	mi
 8008c7a:	085b      	lsrmi	r3, r3, #1
 8008c7c:	089b      	lsrpl	r3, r3, #2
 8008c7e:	2001      	movmi	r0, #1
 8008c80:	600b      	strmi	r3, [r1, #0]
 8008c82:	bf5c      	itt	pl
 8008c84:	600b      	strpl	r3, [r1, #0]
 8008c86:	2002      	movpl	r0, #2
 8008c88:	4770      	bx	lr
 8008c8a:	b298      	uxth	r0, r3
 8008c8c:	b9a8      	cbnz	r0, 8008cba <__lo0bits+0x52>
 8008c8e:	2010      	movs	r0, #16
 8008c90:	0c1b      	lsrs	r3, r3, #16
 8008c92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c96:	bf04      	itt	eq
 8008c98:	0a1b      	lsreq	r3, r3, #8
 8008c9a:	3008      	addeq	r0, #8
 8008c9c:	071a      	lsls	r2, r3, #28
 8008c9e:	bf04      	itt	eq
 8008ca0:	091b      	lsreq	r3, r3, #4
 8008ca2:	3004      	addeq	r0, #4
 8008ca4:	079a      	lsls	r2, r3, #30
 8008ca6:	bf04      	itt	eq
 8008ca8:	089b      	lsreq	r3, r3, #2
 8008caa:	3002      	addeq	r0, #2
 8008cac:	07da      	lsls	r2, r3, #31
 8008cae:	d402      	bmi.n	8008cb6 <__lo0bits+0x4e>
 8008cb0:	085b      	lsrs	r3, r3, #1
 8008cb2:	d006      	beq.n	8008cc2 <__lo0bits+0x5a>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	600b      	str	r3, [r1, #0]
 8008cb8:	4770      	bx	lr
 8008cba:	4610      	mov	r0, r2
 8008cbc:	e7e9      	b.n	8008c92 <__lo0bits+0x2a>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	4770      	bx	lr
 8008cc2:	2020      	movs	r0, #32
 8008cc4:	4770      	bx	lr

08008cc6 <__i2b>:
 8008cc6:	b510      	push	{r4, lr}
 8008cc8:	460c      	mov	r4, r1
 8008cca:	2101      	movs	r1, #1
 8008ccc:	f7ff ff27 	bl	8008b1e <_Balloc>
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	6144      	str	r4, [r0, #20]
 8008cd4:	6102      	str	r2, [r0, #16]
 8008cd6:	bd10      	pop	{r4, pc}

08008cd8 <__multiply>:
 8008cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	4614      	mov	r4, r2
 8008cde:	690a      	ldr	r2, [r1, #16]
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	4688      	mov	r8, r1
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	bfbe      	ittt	lt
 8008ce8:	460b      	movlt	r3, r1
 8008cea:	46a0      	movlt	r8, r4
 8008cec:	461c      	movlt	r4, r3
 8008cee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008cf2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008cf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cfa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cfe:	eb07 0609 	add.w	r6, r7, r9
 8008d02:	42b3      	cmp	r3, r6
 8008d04:	bfb8      	it	lt
 8008d06:	3101      	addlt	r1, #1
 8008d08:	f7ff ff09 	bl	8008b1e <_Balloc>
 8008d0c:	f100 0514 	add.w	r5, r0, #20
 8008d10:	462b      	mov	r3, r5
 8008d12:	2200      	movs	r2, #0
 8008d14:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d18:	4573      	cmp	r3, lr
 8008d1a:	d316      	bcc.n	8008d4a <__multiply+0x72>
 8008d1c:	f104 0214 	add.w	r2, r4, #20
 8008d20:	f108 0114 	add.w	r1, r8, #20
 8008d24:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d28:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	9b00      	ldr	r3, [sp, #0]
 8008d30:	9201      	str	r2, [sp, #4]
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d80c      	bhi.n	8008d50 <__multiply+0x78>
 8008d36:	2e00      	cmp	r6, #0
 8008d38:	dd03      	ble.n	8008d42 <__multiply+0x6a>
 8008d3a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d05d      	beq.n	8008dfe <__multiply+0x126>
 8008d42:	6106      	str	r6, [r0, #16]
 8008d44:	b003      	add	sp, #12
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	f843 2b04 	str.w	r2, [r3], #4
 8008d4e:	e7e3      	b.n	8008d18 <__multiply+0x40>
 8008d50:	f8b2 b000 	ldrh.w	fp, [r2]
 8008d54:	f1bb 0f00 	cmp.w	fp, #0
 8008d58:	d023      	beq.n	8008da2 <__multiply+0xca>
 8008d5a:	4689      	mov	r9, r1
 8008d5c:	46ac      	mov	ip, r5
 8008d5e:	f04f 0800 	mov.w	r8, #0
 8008d62:	f859 4b04 	ldr.w	r4, [r9], #4
 8008d66:	f8dc a000 	ldr.w	sl, [ip]
 8008d6a:	b2a3      	uxth	r3, r4
 8008d6c:	fa1f fa8a 	uxth.w	sl, sl
 8008d70:	fb0b a303 	mla	r3, fp, r3, sl
 8008d74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d78:	f8dc 4000 	ldr.w	r4, [ip]
 8008d7c:	4443      	add	r3, r8
 8008d7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008d82:	fb0b 840a 	mla	r4, fp, sl, r8
 8008d86:	46e2      	mov	sl, ip
 8008d88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008d92:	454f      	cmp	r7, r9
 8008d94:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008d98:	f84a 3b04 	str.w	r3, [sl], #4
 8008d9c:	d82b      	bhi.n	8008df6 <__multiply+0x11e>
 8008d9e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008da2:	9b01      	ldr	r3, [sp, #4]
 8008da4:	3204      	adds	r2, #4
 8008da6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008daa:	f1ba 0f00 	cmp.w	sl, #0
 8008dae:	d020      	beq.n	8008df2 <__multiply+0x11a>
 8008db0:	4689      	mov	r9, r1
 8008db2:	46a8      	mov	r8, r5
 8008db4:	f04f 0b00 	mov.w	fp, #0
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	f8b9 c000 	ldrh.w	ip, [r9]
 8008dbe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	fb0a 440c 	mla	r4, sl, ip, r4
 8008dc8:	46c4      	mov	ip, r8
 8008dca:	445c      	add	r4, fp
 8008dcc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008dd0:	f84c 3b04 	str.w	r3, [ip], #4
 8008dd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008dd8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008ddc:	0c1b      	lsrs	r3, r3, #16
 8008dde:	fb0a b303 	mla	r3, sl, r3, fp
 8008de2:	454f      	cmp	r7, r9
 8008de4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008de8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008dec:	d805      	bhi.n	8008dfa <__multiply+0x122>
 8008dee:	f8c8 3004 	str.w	r3, [r8, #4]
 8008df2:	3504      	adds	r5, #4
 8008df4:	e79b      	b.n	8008d2e <__multiply+0x56>
 8008df6:	46d4      	mov	ip, sl
 8008df8:	e7b3      	b.n	8008d62 <__multiply+0x8a>
 8008dfa:	46e0      	mov	r8, ip
 8008dfc:	e7dd      	b.n	8008dba <__multiply+0xe2>
 8008dfe:	3e01      	subs	r6, #1
 8008e00:	e799      	b.n	8008d36 <__multiply+0x5e>
	...

08008e04 <__pow5mult>:
 8008e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e08:	4615      	mov	r5, r2
 8008e0a:	f012 0203 	ands.w	r2, r2, #3
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	d007      	beq.n	8008e24 <__pow5mult+0x20>
 8008e14:	4c21      	ldr	r4, [pc, #132]	; (8008e9c <__pow5mult+0x98>)
 8008e16:	3a01      	subs	r2, #1
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e1e:	f7ff fec9 	bl	8008bb4 <__multadd>
 8008e22:	4607      	mov	r7, r0
 8008e24:	10ad      	asrs	r5, r5, #2
 8008e26:	d035      	beq.n	8008e94 <__pow5mult+0x90>
 8008e28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e2a:	b93c      	cbnz	r4, 8008e3c <__pow5mult+0x38>
 8008e2c:	2010      	movs	r0, #16
 8008e2e:	f7ff fe55 	bl	8008adc <malloc>
 8008e32:	6270      	str	r0, [r6, #36]	; 0x24
 8008e34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e38:	6004      	str	r4, [r0, #0]
 8008e3a:	60c4      	str	r4, [r0, #12]
 8008e3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e44:	b94c      	cbnz	r4, 8008e5a <__pow5mult+0x56>
 8008e46:	f240 2171 	movw	r1, #625	; 0x271
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f7ff ff3b 	bl	8008cc6 <__i2b>
 8008e50:	2300      	movs	r3, #0
 8008e52:	4604      	mov	r4, r0
 8008e54:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e58:	6003      	str	r3, [r0, #0]
 8008e5a:	f04f 0800 	mov.w	r8, #0
 8008e5e:	07eb      	lsls	r3, r5, #31
 8008e60:	d50a      	bpl.n	8008e78 <__pow5mult+0x74>
 8008e62:	4639      	mov	r1, r7
 8008e64:	4622      	mov	r2, r4
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7ff ff36 	bl	8008cd8 <__multiply>
 8008e6c:	4681      	mov	r9, r0
 8008e6e:	4639      	mov	r1, r7
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7ff fe88 	bl	8008b86 <_Bfree>
 8008e76:	464f      	mov	r7, r9
 8008e78:	106d      	asrs	r5, r5, #1
 8008e7a:	d00b      	beq.n	8008e94 <__pow5mult+0x90>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	b938      	cbnz	r0, 8008e90 <__pow5mult+0x8c>
 8008e80:	4622      	mov	r2, r4
 8008e82:	4621      	mov	r1, r4
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7ff ff27 	bl	8008cd8 <__multiply>
 8008e8a:	6020      	str	r0, [r4, #0]
 8008e8c:	f8c0 8000 	str.w	r8, [r0]
 8008e90:	4604      	mov	r4, r0
 8008e92:	e7e4      	b.n	8008e5e <__pow5mult+0x5a>
 8008e94:	4638      	mov	r0, r7
 8008e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e9a:	bf00      	nop
 8008e9c:	08009e68 	.word	0x08009e68

08008ea0 <__lshift>:
 8008ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	4607      	mov	r7, r0
 8008ea8:	4616      	mov	r6, r2
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eb0:	eb0a 0903 	add.w	r9, sl, r3
 8008eb4:	6849      	ldr	r1, [r1, #4]
 8008eb6:	68a3      	ldr	r3, [r4, #8]
 8008eb8:	f109 0501 	add.w	r5, r9, #1
 8008ebc:	42ab      	cmp	r3, r5
 8008ebe:	db32      	blt.n	8008f26 <__lshift+0x86>
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7ff fe2c 	bl	8008b1e <_Balloc>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4680      	mov	r8, r0
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f100 0114 	add.w	r1, r0, #20
 8008ed0:	4553      	cmp	r3, sl
 8008ed2:	db2b      	blt.n	8008f2c <__lshift+0x8c>
 8008ed4:	6920      	ldr	r0, [r4, #16]
 8008ed6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008eda:	f104 0314 	add.w	r3, r4, #20
 8008ede:	f016 021f 	ands.w	r2, r6, #31
 8008ee2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ee6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008eea:	d025      	beq.n	8008f38 <__lshift+0x98>
 8008eec:	2000      	movs	r0, #0
 8008eee:	f1c2 0e20 	rsb	lr, r2, #32
 8008ef2:	468a      	mov	sl, r1
 8008ef4:	681e      	ldr	r6, [r3, #0]
 8008ef6:	4096      	lsls	r6, r2
 8008ef8:	4330      	orrs	r0, r6
 8008efa:	f84a 0b04 	str.w	r0, [sl], #4
 8008efe:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f02:	459c      	cmp	ip, r3
 8008f04:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f08:	d814      	bhi.n	8008f34 <__lshift+0x94>
 8008f0a:	6048      	str	r0, [r1, #4]
 8008f0c:	b108      	cbz	r0, 8008f12 <__lshift+0x72>
 8008f0e:	f109 0502 	add.w	r5, r9, #2
 8008f12:	3d01      	subs	r5, #1
 8008f14:	4638      	mov	r0, r7
 8008f16:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	f7ff fe33 	bl	8008b86 <_Bfree>
 8008f20:	4640      	mov	r0, r8
 8008f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f26:	3101      	adds	r1, #1
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	e7c7      	b.n	8008ebc <__lshift+0x1c>
 8008f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f30:	3301      	adds	r3, #1
 8008f32:	e7cd      	b.n	8008ed0 <__lshift+0x30>
 8008f34:	4651      	mov	r1, sl
 8008f36:	e7dc      	b.n	8008ef2 <__lshift+0x52>
 8008f38:	3904      	subs	r1, #4
 8008f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3e:	459c      	cmp	ip, r3
 8008f40:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f44:	d8f9      	bhi.n	8008f3a <__lshift+0x9a>
 8008f46:	e7e4      	b.n	8008f12 <__lshift+0x72>

08008f48 <__mcmp>:
 8008f48:	6903      	ldr	r3, [r0, #16]
 8008f4a:	690a      	ldr	r2, [r1, #16]
 8008f4c:	b530      	push	{r4, r5, lr}
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	d10c      	bne.n	8008f6c <__mcmp+0x24>
 8008f52:	0092      	lsls	r2, r2, #2
 8008f54:	3014      	adds	r0, #20
 8008f56:	3114      	adds	r1, #20
 8008f58:	1884      	adds	r4, r0, r2
 8008f5a:	4411      	add	r1, r2
 8008f5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f64:	4295      	cmp	r5, r2
 8008f66:	d003      	beq.n	8008f70 <__mcmp+0x28>
 8008f68:	d305      	bcc.n	8008f76 <__mcmp+0x2e>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	bd30      	pop	{r4, r5, pc}
 8008f70:	42a0      	cmp	r0, r4
 8008f72:	d3f3      	bcc.n	8008f5c <__mcmp+0x14>
 8008f74:	e7fa      	b.n	8008f6c <__mcmp+0x24>
 8008f76:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7a:	e7f7      	b.n	8008f6c <__mcmp+0x24>

08008f7c <__mdiff>:
 8008f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	460d      	mov	r5, r1
 8008f82:	4607      	mov	r7, r0
 8008f84:	4611      	mov	r1, r2
 8008f86:	4628      	mov	r0, r5
 8008f88:	4614      	mov	r4, r2
 8008f8a:	f7ff ffdd 	bl	8008f48 <__mcmp>
 8008f8e:	1e06      	subs	r6, r0, #0
 8008f90:	d108      	bne.n	8008fa4 <__mdiff+0x28>
 8008f92:	4631      	mov	r1, r6
 8008f94:	4638      	mov	r0, r7
 8008f96:	f7ff fdc2 	bl	8008b1e <_Balloc>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa4:	bfa4      	itt	ge
 8008fa6:	4623      	movge	r3, r4
 8008fa8:	462c      	movge	r4, r5
 8008faa:	4638      	mov	r0, r7
 8008fac:	6861      	ldr	r1, [r4, #4]
 8008fae:	bfa6      	itte	ge
 8008fb0:	461d      	movge	r5, r3
 8008fb2:	2600      	movge	r6, #0
 8008fb4:	2601      	movlt	r6, #1
 8008fb6:	f7ff fdb2 	bl	8008b1e <_Balloc>
 8008fba:	f04f 0e00 	mov.w	lr, #0
 8008fbe:	60c6      	str	r6, [r0, #12]
 8008fc0:	692b      	ldr	r3, [r5, #16]
 8008fc2:	6926      	ldr	r6, [r4, #16]
 8008fc4:	f104 0214 	add.w	r2, r4, #20
 8008fc8:	f105 0914 	add.w	r9, r5, #20
 8008fcc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008fd0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008fd4:	f100 0114 	add.w	r1, r0, #20
 8008fd8:	f852 ab04 	ldr.w	sl, [r2], #4
 8008fdc:	f859 5b04 	ldr.w	r5, [r9], #4
 8008fe0:	fa1f f38a 	uxth.w	r3, sl
 8008fe4:	4473      	add	r3, lr
 8008fe6:	b2ac      	uxth	r4, r5
 8008fe8:	1b1b      	subs	r3, r3, r4
 8008fea:	0c2c      	lsrs	r4, r5, #16
 8008fec:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008ff0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008ffa:	45c8      	cmp	r8, r9
 8008ffc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009000:	4694      	mov	ip, r2
 8009002:	f841 4b04 	str.w	r4, [r1], #4
 8009006:	d8e7      	bhi.n	8008fd8 <__mdiff+0x5c>
 8009008:	45bc      	cmp	ip, r7
 800900a:	d304      	bcc.n	8009016 <__mdiff+0x9a>
 800900c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009010:	b183      	cbz	r3, 8009034 <__mdiff+0xb8>
 8009012:	6106      	str	r6, [r0, #16]
 8009014:	e7c4      	b.n	8008fa0 <__mdiff+0x24>
 8009016:	f85c 4b04 	ldr.w	r4, [ip], #4
 800901a:	b2a2      	uxth	r2, r4
 800901c:	4472      	add	r2, lr
 800901e:	1413      	asrs	r3, r2, #16
 8009020:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009024:	b292      	uxth	r2, r2
 8009026:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800902a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800902e:	f841 2b04 	str.w	r2, [r1], #4
 8009032:	e7e9      	b.n	8009008 <__mdiff+0x8c>
 8009034:	3e01      	subs	r6, #1
 8009036:	e7e9      	b.n	800900c <__mdiff+0x90>

08009038 <__d2b>:
 8009038:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800903c:	461c      	mov	r4, r3
 800903e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009042:	2101      	movs	r1, #1
 8009044:	4690      	mov	r8, r2
 8009046:	f7ff fd6a 	bl	8008b1e <_Balloc>
 800904a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800904e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009052:	4607      	mov	r7, r0
 8009054:	bb34      	cbnz	r4, 80090a4 <__d2b+0x6c>
 8009056:	9201      	str	r2, [sp, #4]
 8009058:	f1b8 0200 	subs.w	r2, r8, #0
 800905c:	d027      	beq.n	80090ae <__d2b+0x76>
 800905e:	a802      	add	r0, sp, #8
 8009060:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009064:	f7ff fe00 	bl	8008c68 <__lo0bits>
 8009068:	9900      	ldr	r1, [sp, #0]
 800906a:	b1f0      	cbz	r0, 80090aa <__d2b+0x72>
 800906c:	9a01      	ldr	r2, [sp, #4]
 800906e:	f1c0 0320 	rsb	r3, r0, #32
 8009072:	fa02 f303 	lsl.w	r3, r2, r3
 8009076:	430b      	orrs	r3, r1
 8009078:	40c2      	lsrs	r2, r0
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	9201      	str	r2, [sp, #4]
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	bf14      	ite	ne
 8009084:	2102      	movne	r1, #2
 8009086:	2101      	moveq	r1, #1
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	6139      	str	r1, [r7, #16]
 800908c:	b1c4      	cbz	r4, 80090c0 <__d2b+0x88>
 800908e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009092:	4404      	add	r4, r0
 8009094:	6034      	str	r4, [r6, #0]
 8009096:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800909a:	6028      	str	r0, [r5, #0]
 800909c:	4638      	mov	r0, r7
 800909e:	b002      	add	sp, #8
 80090a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80090a8:	e7d5      	b.n	8009056 <__d2b+0x1e>
 80090aa:	6179      	str	r1, [r7, #20]
 80090ac:	e7e7      	b.n	800907e <__d2b+0x46>
 80090ae:	a801      	add	r0, sp, #4
 80090b0:	f7ff fdda 	bl	8008c68 <__lo0bits>
 80090b4:	2101      	movs	r1, #1
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	6139      	str	r1, [r7, #16]
 80090ba:	617b      	str	r3, [r7, #20]
 80090bc:	3020      	adds	r0, #32
 80090be:	e7e5      	b.n	800908c <__d2b+0x54>
 80090c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80090c8:	6030      	str	r0, [r6, #0]
 80090ca:	6918      	ldr	r0, [r3, #16]
 80090cc:	f7ff fdad 	bl	8008c2a <__hi0bits>
 80090d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80090d4:	e7e1      	b.n	800909a <__d2b+0x62>

080090d6 <_calloc_r>:
 80090d6:	b538      	push	{r3, r4, r5, lr}
 80090d8:	fb02 f401 	mul.w	r4, r2, r1
 80090dc:	4621      	mov	r1, r4
 80090de:	f000 f855 	bl	800918c <_malloc_r>
 80090e2:	4605      	mov	r5, r0
 80090e4:	b118      	cbz	r0, 80090ee <_calloc_r+0x18>
 80090e6:	4622      	mov	r2, r4
 80090e8:	2100      	movs	r1, #0
 80090ea:	f7fe fa2f 	bl	800754c <memset>
 80090ee:	4628      	mov	r0, r5
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080090f4 <_free_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4605      	mov	r5, r0
 80090f8:	2900      	cmp	r1, #0
 80090fa:	d043      	beq.n	8009184 <_free_r+0x90>
 80090fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009100:	1f0c      	subs	r4, r1, #4
 8009102:	2b00      	cmp	r3, #0
 8009104:	bfb8      	it	lt
 8009106:	18e4      	addlt	r4, r4, r3
 8009108:	f000 fa27 	bl	800955a <__malloc_lock>
 800910c:	4a1e      	ldr	r2, [pc, #120]	; (8009188 <_free_r+0x94>)
 800910e:	6813      	ldr	r3, [r2, #0]
 8009110:	4610      	mov	r0, r2
 8009112:	b933      	cbnz	r3, 8009122 <_free_r+0x2e>
 8009114:	6063      	str	r3, [r4, #4]
 8009116:	6014      	str	r4, [r2, #0]
 8009118:	4628      	mov	r0, r5
 800911a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800911e:	f000 ba1d 	b.w	800955c <__malloc_unlock>
 8009122:	42a3      	cmp	r3, r4
 8009124:	d90b      	bls.n	800913e <_free_r+0x4a>
 8009126:	6821      	ldr	r1, [r4, #0]
 8009128:	1862      	adds	r2, r4, r1
 800912a:	4293      	cmp	r3, r2
 800912c:	bf01      	itttt	eq
 800912e:	681a      	ldreq	r2, [r3, #0]
 8009130:	685b      	ldreq	r3, [r3, #4]
 8009132:	1852      	addeq	r2, r2, r1
 8009134:	6022      	streq	r2, [r4, #0]
 8009136:	6063      	str	r3, [r4, #4]
 8009138:	6004      	str	r4, [r0, #0]
 800913a:	e7ed      	b.n	8009118 <_free_r+0x24>
 800913c:	4613      	mov	r3, r2
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	b10a      	cbz	r2, 8009146 <_free_r+0x52>
 8009142:	42a2      	cmp	r2, r4
 8009144:	d9fa      	bls.n	800913c <_free_r+0x48>
 8009146:	6819      	ldr	r1, [r3, #0]
 8009148:	1858      	adds	r0, r3, r1
 800914a:	42a0      	cmp	r0, r4
 800914c:	d10b      	bne.n	8009166 <_free_r+0x72>
 800914e:	6820      	ldr	r0, [r4, #0]
 8009150:	4401      	add	r1, r0
 8009152:	1858      	adds	r0, r3, r1
 8009154:	4282      	cmp	r2, r0
 8009156:	6019      	str	r1, [r3, #0]
 8009158:	d1de      	bne.n	8009118 <_free_r+0x24>
 800915a:	6810      	ldr	r0, [r2, #0]
 800915c:	6852      	ldr	r2, [r2, #4]
 800915e:	4401      	add	r1, r0
 8009160:	6019      	str	r1, [r3, #0]
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	e7d8      	b.n	8009118 <_free_r+0x24>
 8009166:	d902      	bls.n	800916e <_free_r+0x7a>
 8009168:	230c      	movs	r3, #12
 800916a:	602b      	str	r3, [r5, #0]
 800916c:	e7d4      	b.n	8009118 <_free_r+0x24>
 800916e:	6820      	ldr	r0, [r4, #0]
 8009170:	1821      	adds	r1, r4, r0
 8009172:	428a      	cmp	r2, r1
 8009174:	bf01      	itttt	eq
 8009176:	6811      	ldreq	r1, [r2, #0]
 8009178:	6852      	ldreq	r2, [r2, #4]
 800917a:	1809      	addeq	r1, r1, r0
 800917c:	6021      	streq	r1, [r4, #0]
 800917e:	6062      	str	r2, [r4, #4]
 8009180:	605c      	str	r4, [r3, #4]
 8009182:	e7c9      	b.n	8009118 <_free_r+0x24>
 8009184:	bd38      	pop	{r3, r4, r5, pc}
 8009186:	bf00      	nop
 8009188:	20000270 	.word	0x20000270

0800918c <_malloc_r>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	1ccd      	adds	r5, r1, #3
 8009190:	f025 0503 	bic.w	r5, r5, #3
 8009194:	3508      	adds	r5, #8
 8009196:	2d0c      	cmp	r5, #12
 8009198:	bf38      	it	cc
 800919a:	250c      	movcc	r5, #12
 800919c:	2d00      	cmp	r5, #0
 800919e:	4606      	mov	r6, r0
 80091a0:	db01      	blt.n	80091a6 <_malloc_r+0x1a>
 80091a2:	42a9      	cmp	r1, r5
 80091a4:	d903      	bls.n	80091ae <_malloc_r+0x22>
 80091a6:	230c      	movs	r3, #12
 80091a8:	6033      	str	r3, [r6, #0]
 80091aa:	2000      	movs	r0, #0
 80091ac:	bd70      	pop	{r4, r5, r6, pc}
 80091ae:	f000 f9d4 	bl	800955a <__malloc_lock>
 80091b2:	4a21      	ldr	r2, [pc, #132]	; (8009238 <_malloc_r+0xac>)
 80091b4:	6814      	ldr	r4, [r2, #0]
 80091b6:	4621      	mov	r1, r4
 80091b8:	b991      	cbnz	r1, 80091e0 <_malloc_r+0x54>
 80091ba:	4c20      	ldr	r4, [pc, #128]	; (800923c <_malloc_r+0xb0>)
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	b91b      	cbnz	r3, 80091c8 <_malloc_r+0x3c>
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f98f 	bl	80094e4 <_sbrk_r>
 80091c6:	6020      	str	r0, [r4, #0]
 80091c8:	4629      	mov	r1, r5
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 f98a 	bl	80094e4 <_sbrk_r>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d124      	bne.n	800921e <_malloc_r+0x92>
 80091d4:	230c      	movs	r3, #12
 80091d6:	4630      	mov	r0, r6
 80091d8:	6033      	str	r3, [r6, #0]
 80091da:	f000 f9bf 	bl	800955c <__malloc_unlock>
 80091de:	e7e4      	b.n	80091aa <_malloc_r+0x1e>
 80091e0:	680b      	ldr	r3, [r1, #0]
 80091e2:	1b5b      	subs	r3, r3, r5
 80091e4:	d418      	bmi.n	8009218 <_malloc_r+0x8c>
 80091e6:	2b0b      	cmp	r3, #11
 80091e8:	d90f      	bls.n	800920a <_malloc_r+0x7e>
 80091ea:	600b      	str	r3, [r1, #0]
 80091ec:	18cc      	adds	r4, r1, r3
 80091ee:	50cd      	str	r5, [r1, r3]
 80091f0:	4630      	mov	r0, r6
 80091f2:	f000 f9b3 	bl	800955c <__malloc_unlock>
 80091f6:	f104 000b 	add.w	r0, r4, #11
 80091fa:	1d23      	adds	r3, r4, #4
 80091fc:	f020 0007 	bic.w	r0, r0, #7
 8009200:	1ac3      	subs	r3, r0, r3
 8009202:	d0d3      	beq.n	80091ac <_malloc_r+0x20>
 8009204:	425a      	negs	r2, r3
 8009206:	50e2      	str	r2, [r4, r3]
 8009208:	e7d0      	b.n	80091ac <_malloc_r+0x20>
 800920a:	684b      	ldr	r3, [r1, #4]
 800920c:	428c      	cmp	r4, r1
 800920e:	bf16      	itet	ne
 8009210:	6063      	strne	r3, [r4, #4]
 8009212:	6013      	streq	r3, [r2, #0]
 8009214:	460c      	movne	r4, r1
 8009216:	e7eb      	b.n	80091f0 <_malloc_r+0x64>
 8009218:	460c      	mov	r4, r1
 800921a:	6849      	ldr	r1, [r1, #4]
 800921c:	e7cc      	b.n	80091b8 <_malloc_r+0x2c>
 800921e:	1cc4      	adds	r4, r0, #3
 8009220:	f024 0403 	bic.w	r4, r4, #3
 8009224:	42a0      	cmp	r0, r4
 8009226:	d005      	beq.n	8009234 <_malloc_r+0xa8>
 8009228:	1a21      	subs	r1, r4, r0
 800922a:	4630      	mov	r0, r6
 800922c:	f000 f95a 	bl	80094e4 <_sbrk_r>
 8009230:	3001      	adds	r0, #1
 8009232:	d0cf      	beq.n	80091d4 <_malloc_r+0x48>
 8009234:	6025      	str	r5, [r4, #0]
 8009236:	e7db      	b.n	80091f0 <_malloc_r+0x64>
 8009238:	20000270 	.word	0x20000270
 800923c:	20000274 	.word	0x20000274

08009240 <__ssputs_r>:
 8009240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009244:	688e      	ldr	r6, [r1, #8]
 8009246:	4682      	mov	sl, r0
 8009248:	429e      	cmp	r6, r3
 800924a:	460c      	mov	r4, r1
 800924c:	4690      	mov	r8, r2
 800924e:	4699      	mov	r9, r3
 8009250:	d837      	bhi.n	80092c2 <__ssputs_r+0x82>
 8009252:	898a      	ldrh	r2, [r1, #12]
 8009254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009258:	d031      	beq.n	80092be <__ssputs_r+0x7e>
 800925a:	2302      	movs	r3, #2
 800925c:	6825      	ldr	r5, [r4, #0]
 800925e:	6909      	ldr	r1, [r1, #16]
 8009260:	1a6f      	subs	r7, r5, r1
 8009262:	6965      	ldr	r5, [r4, #20]
 8009264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009268:	fb95 f5f3 	sdiv	r5, r5, r3
 800926c:	f109 0301 	add.w	r3, r9, #1
 8009270:	443b      	add	r3, r7
 8009272:	429d      	cmp	r5, r3
 8009274:	bf38      	it	cc
 8009276:	461d      	movcc	r5, r3
 8009278:	0553      	lsls	r3, r2, #21
 800927a:	d530      	bpl.n	80092de <__ssputs_r+0x9e>
 800927c:	4629      	mov	r1, r5
 800927e:	f7ff ff85 	bl	800918c <_malloc_r>
 8009282:	4606      	mov	r6, r0
 8009284:	b950      	cbnz	r0, 800929c <__ssputs_r+0x5c>
 8009286:	230c      	movs	r3, #12
 8009288:	f04f 30ff 	mov.w	r0, #4294967295
 800928c:	f8ca 3000 	str.w	r3, [sl]
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929c:	463a      	mov	r2, r7
 800929e:	6921      	ldr	r1, [r4, #16]
 80092a0:	f7ff fc32 	bl	8008b08 <memcpy>
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ae:	81a3      	strh	r3, [r4, #12]
 80092b0:	6126      	str	r6, [r4, #16]
 80092b2:	443e      	add	r6, r7
 80092b4:	6026      	str	r6, [r4, #0]
 80092b6:	464e      	mov	r6, r9
 80092b8:	6165      	str	r5, [r4, #20]
 80092ba:	1bed      	subs	r5, r5, r7
 80092bc:	60a5      	str	r5, [r4, #8]
 80092be:	454e      	cmp	r6, r9
 80092c0:	d900      	bls.n	80092c4 <__ssputs_r+0x84>
 80092c2:	464e      	mov	r6, r9
 80092c4:	4632      	mov	r2, r6
 80092c6:	4641      	mov	r1, r8
 80092c8:	6820      	ldr	r0, [r4, #0]
 80092ca:	f000 f92d 	bl	8009528 <memmove>
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	2000      	movs	r0, #0
 80092d2:	1b9b      	subs	r3, r3, r6
 80092d4:	60a3      	str	r3, [r4, #8]
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	441e      	add	r6, r3
 80092da:	6026      	str	r6, [r4, #0]
 80092dc:	e7dc      	b.n	8009298 <__ssputs_r+0x58>
 80092de:	462a      	mov	r2, r5
 80092e0:	f000 f93d 	bl	800955e <_realloc_r>
 80092e4:	4606      	mov	r6, r0
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d1e2      	bne.n	80092b0 <__ssputs_r+0x70>
 80092ea:	6921      	ldr	r1, [r4, #16]
 80092ec:	4650      	mov	r0, sl
 80092ee:	f7ff ff01 	bl	80090f4 <_free_r>
 80092f2:	e7c8      	b.n	8009286 <__ssputs_r+0x46>

080092f4 <_svfiprintf_r>:
 80092f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f8:	461d      	mov	r5, r3
 80092fa:	898b      	ldrh	r3, [r1, #12]
 80092fc:	b09d      	sub	sp, #116	; 0x74
 80092fe:	061f      	lsls	r7, r3, #24
 8009300:	4680      	mov	r8, r0
 8009302:	460c      	mov	r4, r1
 8009304:	4616      	mov	r6, r2
 8009306:	d50f      	bpl.n	8009328 <_svfiprintf_r+0x34>
 8009308:	690b      	ldr	r3, [r1, #16]
 800930a:	b96b      	cbnz	r3, 8009328 <_svfiprintf_r+0x34>
 800930c:	2140      	movs	r1, #64	; 0x40
 800930e:	f7ff ff3d 	bl	800918c <_malloc_r>
 8009312:	6020      	str	r0, [r4, #0]
 8009314:	6120      	str	r0, [r4, #16]
 8009316:	b928      	cbnz	r0, 8009324 <_svfiprintf_r+0x30>
 8009318:	230c      	movs	r3, #12
 800931a:	f8c8 3000 	str.w	r3, [r8]
 800931e:	f04f 30ff 	mov.w	r0, #4294967295
 8009322:	e0c8      	b.n	80094b6 <_svfiprintf_r+0x1c2>
 8009324:	2340      	movs	r3, #64	; 0x40
 8009326:	6163      	str	r3, [r4, #20]
 8009328:	2300      	movs	r3, #0
 800932a:	9309      	str	r3, [sp, #36]	; 0x24
 800932c:	2320      	movs	r3, #32
 800932e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009332:	2330      	movs	r3, #48	; 0x30
 8009334:	f04f 0b01 	mov.w	fp, #1
 8009338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800933c:	9503      	str	r5, [sp, #12]
 800933e:	4637      	mov	r7, r6
 8009340:	463d      	mov	r5, r7
 8009342:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009346:	b10b      	cbz	r3, 800934c <_svfiprintf_r+0x58>
 8009348:	2b25      	cmp	r3, #37	; 0x25
 800934a:	d13e      	bne.n	80093ca <_svfiprintf_r+0xd6>
 800934c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009350:	d00b      	beq.n	800936a <_svfiprintf_r+0x76>
 8009352:	4653      	mov	r3, sl
 8009354:	4632      	mov	r2, r6
 8009356:	4621      	mov	r1, r4
 8009358:	4640      	mov	r0, r8
 800935a:	f7ff ff71 	bl	8009240 <__ssputs_r>
 800935e:	3001      	adds	r0, #1
 8009360:	f000 80a4 	beq.w	80094ac <_svfiprintf_r+0x1b8>
 8009364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009366:	4453      	add	r3, sl
 8009368:	9309      	str	r3, [sp, #36]	; 0x24
 800936a:	783b      	ldrb	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 809d 	beq.w	80094ac <_svfiprintf_r+0x1b8>
 8009372:	2300      	movs	r3, #0
 8009374:	f04f 32ff 	mov.w	r2, #4294967295
 8009378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009384:	931a      	str	r3, [sp, #104]	; 0x68
 8009386:	462f      	mov	r7, r5
 8009388:	2205      	movs	r2, #5
 800938a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800938e:	4850      	ldr	r0, [pc, #320]	; (80094d0 <_svfiprintf_r+0x1dc>)
 8009390:	f7ff fbac 	bl	8008aec <memchr>
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	b9d0      	cbnz	r0, 80093ce <_svfiprintf_r+0xda>
 8009398:	06d9      	lsls	r1, r3, #27
 800939a:	bf44      	itt	mi
 800939c:	2220      	movmi	r2, #32
 800939e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80093a2:	071a      	lsls	r2, r3, #28
 80093a4:	bf44      	itt	mi
 80093a6:	222b      	movmi	r2, #43	; 0x2b
 80093a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80093ac:	782a      	ldrb	r2, [r5, #0]
 80093ae:	2a2a      	cmp	r2, #42	; 0x2a
 80093b0:	d015      	beq.n	80093de <_svfiprintf_r+0xea>
 80093b2:	462f      	mov	r7, r5
 80093b4:	2000      	movs	r0, #0
 80093b6:	250a      	movs	r5, #10
 80093b8:	9a07      	ldr	r2, [sp, #28]
 80093ba:	4639      	mov	r1, r7
 80093bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c0:	3b30      	subs	r3, #48	; 0x30
 80093c2:	2b09      	cmp	r3, #9
 80093c4:	d94d      	bls.n	8009462 <_svfiprintf_r+0x16e>
 80093c6:	b1b8      	cbz	r0, 80093f8 <_svfiprintf_r+0x104>
 80093c8:	e00f      	b.n	80093ea <_svfiprintf_r+0xf6>
 80093ca:	462f      	mov	r7, r5
 80093cc:	e7b8      	b.n	8009340 <_svfiprintf_r+0x4c>
 80093ce:	4a40      	ldr	r2, [pc, #256]	; (80094d0 <_svfiprintf_r+0x1dc>)
 80093d0:	463d      	mov	r5, r7
 80093d2:	1a80      	subs	r0, r0, r2
 80093d4:	fa0b f000 	lsl.w	r0, fp, r0
 80093d8:	4318      	orrs	r0, r3
 80093da:	9004      	str	r0, [sp, #16]
 80093dc:	e7d3      	b.n	8009386 <_svfiprintf_r+0x92>
 80093de:	9a03      	ldr	r2, [sp, #12]
 80093e0:	1d11      	adds	r1, r2, #4
 80093e2:	6812      	ldr	r2, [r2, #0]
 80093e4:	9103      	str	r1, [sp, #12]
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	db01      	blt.n	80093ee <_svfiprintf_r+0xfa>
 80093ea:	9207      	str	r2, [sp, #28]
 80093ec:	e004      	b.n	80093f8 <_svfiprintf_r+0x104>
 80093ee:	4252      	negs	r2, r2
 80093f0:	f043 0302 	orr.w	r3, r3, #2
 80093f4:	9207      	str	r2, [sp, #28]
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	783b      	ldrb	r3, [r7, #0]
 80093fa:	2b2e      	cmp	r3, #46	; 0x2e
 80093fc:	d10c      	bne.n	8009418 <_svfiprintf_r+0x124>
 80093fe:	787b      	ldrb	r3, [r7, #1]
 8009400:	2b2a      	cmp	r3, #42	; 0x2a
 8009402:	d133      	bne.n	800946c <_svfiprintf_r+0x178>
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	3702      	adds	r7, #2
 8009408:	1d1a      	adds	r2, r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	9203      	str	r2, [sp, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfb8      	it	lt
 8009412:	f04f 33ff 	movlt.w	r3, #4294967295
 8009416:	9305      	str	r3, [sp, #20]
 8009418:	4d2e      	ldr	r5, [pc, #184]	; (80094d4 <_svfiprintf_r+0x1e0>)
 800941a:	2203      	movs	r2, #3
 800941c:	7839      	ldrb	r1, [r7, #0]
 800941e:	4628      	mov	r0, r5
 8009420:	f7ff fb64 	bl	8008aec <memchr>
 8009424:	b138      	cbz	r0, 8009436 <_svfiprintf_r+0x142>
 8009426:	2340      	movs	r3, #64	; 0x40
 8009428:	1b40      	subs	r0, r0, r5
 800942a:	fa03 f000 	lsl.w	r0, r3, r0
 800942e:	9b04      	ldr	r3, [sp, #16]
 8009430:	3701      	adds	r7, #1
 8009432:	4303      	orrs	r3, r0
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	7839      	ldrb	r1, [r7, #0]
 8009438:	2206      	movs	r2, #6
 800943a:	4827      	ldr	r0, [pc, #156]	; (80094d8 <_svfiprintf_r+0x1e4>)
 800943c:	1c7e      	adds	r6, r7, #1
 800943e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009442:	f7ff fb53 	bl	8008aec <memchr>
 8009446:	2800      	cmp	r0, #0
 8009448:	d038      	beq.n	80094bc <_svfiprintf_r+0x1c8>
 800944a:	4b24      	ldr	r3, [pc, #144]	; (80094dc <_svfiprintf_r+0x1e8>)
 800944c:	bb13      	cbnz	r3, 8009494 <_svfiprintf_r+0x1a0>
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	3307      	adds	r3, #7
 8009452:	f023 0307 	bic.w	r3, r3, #7
 8009456:	3308      	adds	r3, #8
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945c:	444b      	add	r3, r9
 800945e:	9309      	str	r3, [sp, #36]	; 0x24
 8009460:	e76d      	b.n	800933e <_svfiprintf_r+0x4a>
 8009462:	fb05 3202 	mla	r2, r5, r2, r3
 8009466:	2001      	movs	r0, #1
 8009468:	460f      	mov	r7, r1
 800946a:	e7a6      	b.n	80093ba <_svfiprintf_r+0xc6>
 800946c:	2300      	movs	r3, #0
 800946e:	250a      	movs	r5, #10
 8009470:	4619      	mov	r1, r3
 8009472:	3701      	adds	r7, #1
 8009474:	9305      	str	r3, [sp, #20]
 8009476:	4638      	mov	r0, r7
 8009478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800947c:	3a30      	subs	r2, #48	; 0x30
 800947e:	2a09      	cmp	r2, #9
 8009480:	d903      	bls.n	800948a <_svfiprintf_r+0x196>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0c8      	beq.n	8009418 <_svfiprintf_r+0x124>
 8009486:	9105      	str	r1, [sp, #20]
 8009488:	e7c6      	b.n	8009418 <_svfiprintf_r+0x124>
 800948a:	fb05 2101 	mla	r1, r5, r1, r2
 800948e:	2301      	movs	r3, #1
 8009490:	4607      	mov	r7, r0
 8009492:	e7f0      	b.n	8009476 <_svfiprintf_r+0x182>
 8009494:	ab03      	add	r3, sp, #12
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	4622      	mov	r2, r4
 800949a:	4b11      	ldr	r3, [pc, #68]	; (80094e0 <_svfiprintf_r+0x1ec>)
 800949c:	a904      	add	r1, sp, #16
 800949e:	4640      	mov	r0, r8
 80094a0:	f7fe f8ee 	bl	8007680 <_printf_float>
 80094a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80094a8:	4681      	mov	r9, r0
 80094aa:	d1d6      	bne.n	800945a <_svfiprintf_r+0x166>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	065b      	lsls	r3, r3, #25
 80094b0:	f53f af35 	bmi.w	800931e <_svfiprintf_r+0x2a>
 80094b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094b6:	b01d      	add	sp, #116	; 0x74
 80094b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094bc:	ab03      	add	r3, sp, #12
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	4622      	mov	r2, r4
 80094c2:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <_svfiprintf_r+0x1ec>)
 80094c4:	a904      	add	r1, sp, #16
 80094c6:	4640      	mov	r0, r8
 80094c8:	f7fe fb86 	bl	8007bd8 <_printf_i>
 80094cc:	e7ea      	b.n	80094a4 <_svfiprintf_r+0x1b0>
 80094ce:	bf00      	nop
 80094d0:	08009e74 	.word	0x08009e74
 80094d4:	08009e7a 	.word	0x08009e7a
 80094d8:	08009e7e 	.word	0x08009e7e
 80094dc:	08007681 	.word	0x08007681
 80094e0:	08009241 	.word	0x08009241

080094e4 <_sbrk_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	2300      	movs	r3, #0
 80094e8:	4c05      	ldr	r4, [pc, #20]	; (8009500 <_sbrk_r+0x1c>)
 80094ea:	4605      	mov	r5, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	6023      	str	r3, [r4, #0]
 80094f0:	f7fd ff7c 	bl	80073ec <_sbrk>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_sbrk_r+0x1a>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_sbrk_r+0x1a>
 80094fc:	602b      	str	r3, [r5, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	200004f8 	.word	0x200004f8

08009504 <__ascii_mbtowc>:
 8009504:	b082      	sub	sp, #8
 8009506:	b901      	cbnz	r1, 800950a <__ascii_mbtowc+0x6>
 8009508:	a901      	add	r1, sp, #4
 800950a:	b142      	cbz	r2, 800951e <__ascii_mbtowc+0x1a>
 800950c:	b14b      	cbz	r3, 8009522 <__ascii_mbtowc+0x1e>
 800950e:	7813      	ldrb	r3, [r2, #0]
 8009510:	600b      	str	r3, [r1, #0]
 8009512:	7812      	ldrb	r2, [r2, #0]
 8009514:	1c10      	adds	r0, r2, #0
 8009516:	bf18      	it	ne
 8009518:	2001      	movne	r0, #1
 800951a:	b002      	add	sp, #8
 800951c:	4770      	bx	lr
 800951e:	4610      	mov	r0, r2
 8009520:	e7fb      	b.n	800951a <__ascii_mbtowc+0x16>
 8009522:	f06f 0001 	mvn.w	r0, #1
 8009526:	e7f8      	b.n	800951a <__ascii_mbtowc+0x16>

08009528 <memmove>:
 8009528:	4288      	cmp	r0, r1
 800952a:	b510      	push	{r4, lr}
 800952c:	eb01 0302 	add.w	r3, r1, r2
 8009530:	d807      	bhi.n	8009542 <memmove+0x1a>
 8009532:	1e42      	subs	r2, r0, #1
 8009534:	4299      	cmp	r1, r3
 8009536:	d00a      	beq.n	800954e <memmove+0x26>
 8009538:	f811 4b01 	ldrb.w	r4, [r1], #1
 800953c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009540:	e7f8      	b.n	8009534 <memmove+0xc>
 8009542:	4283      	cmp	r3, r0
 8009544:	d9f5      	bls.n	8009532 <memmove+0xa>
 8009546:	1881      	adds	r1, r0, r2
 8009548:	1ad2      	subs	r2, r2, r3
 800954a:	42d3      	cmn	r3, r2
 800954c:	d100      	bne.n	8009550 <memmove+0x28>
 800954e:	bd10      	pop	{r4, pc}
 8009550:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009554:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009558:	e7f7      	b.n	800954a <memmove+0x22>

0800955a <__malloc_lock>:
 800955a:	4770      	bx	lr

0800955c <__malloc_unlock>:
 800955c:	4770      	bx	lr

0800955e <_realloc_r>:
 800955e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009560:	4607      	mov	r7, r0
 8009562:	4614      	mov	r4, r2
 8009564:	460e      	mov	r6, r1
 8009566:	b921      	cbnz	r1, 8009572 <_realloc_r+0x14>
 8009568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800956c:	4611      	mov	r1, r2
 800956e:	f7ff be0d 	b.w	800918c <_malloc_r>
 8009572:	b922      	cbnz	r2, 800957e <_realloc_r+0x20>
 8009574:	f7ff fdbe 	bl	80090f4 <_free_r>
 8009578:	4625      	mov	r5, r4
 800957a:	4628      	mov	r0, r5
 800957c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800957e:	f000 f821 	bl	80095c4 <_malloc_usable_size_r>
 8009582:	42a0      	cmp	r0, r4
 8009584:	d20f      	bcs.n	80095a6 <_realloc_r+0x48>
 8009586:	4621      	mov	r1, r4
 8009588:	4638      	mov	r0, r7
 800958a:	f7ff fdff 	bl	800918c <_malloc_r>
 800958e:	4605      	mov	r5, r0
 8009590:	2800      	cmp	r0, #0
 8009592:	d0f2      	beq.n	800957a <_realloc_r+0x1c>
 8009594:	4631      	mov	r1, r6
 8009596:	4622      	mov	r2, r4
 8009598:	f7ff fab6 	bl	8008b08 <memcpy>
 800959c:	4631      	mov	r1, r6
 800959e:	4638      	mov	r0, r7
 80095a0:	f7ff fda8 	bl	80090f4 <_free_r>
 80095a4:	e7e9      	b.n	800957a <_realloc_r+0x1c>
 80095a6:	4635      	mov	r5, r6
 80095a8:	e7e7      	b.n	800957a <_realloc_r+0x1c>

080095aa <__ascii_wctomb>:
 80095aa:	b149      	cbz	r1, 80095c0 <__ascii_wctomb+0x16>
 80095ac:	2aff      	cmp	r2, #255	; 0xff
 80095ae:	bf8b      	itete	hi
 80095b0:	238a      	movhi	r3, #138	; 0x8a
 80095b2:	700a      	strbls	r2, [r1, #0]
 80095b4:	6003      	strhi	r3, [r0, #0]
 80095b6:	2001      	movls	r0, #1
 80095b8:	bf88      	it	hi
 80095ba:	f04f 30ff 	movhi.w	r0, #4294967295
 80095be:	4770      	bx	lr
 80095c0:	4608      	mov	r0, r1
 80095c2:	4770      	bx	lr

080095c4 <_malloc_usable_size_r>:
 80095c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c8:	1f18      	subs	r0, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bfbc      	itt	lt
 80095ce:	580b      	ldrlt	r3, [r1, r0]
 80095d0:	18c0      	addlt	r0, r0, r3
 80095d2:	4770      	bx	lr

080095d4 <atan2>:
 80095d4:	f000 b854 	b.w	8009680 <__ieee754_atan2>

080095d8 <sqrt>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	b08b      	sub	sp, #44	; 0x2c
 80095de:	4604      	mov	r4, r0
 80095e0:	460d      	mov	r5, r1
 80095e2:	f000 f92b 	bl	800983c <__ieee754_sqrt>
 80095e6:	4b24      	ldr	r3, [pc, #144]	; (8009678 <sqrt+0xa0>)
 80095e8:	4680      	mov	r8, r0
 80095ea:	f993 a000 	ldrsb.w	sl, [r3]
 80095ee:	4689      	mov	r9, r1
 80095f0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80095f4:	d02b      	beq.n	800964e <sqrt+0x76>
 80095f6:	4622      	mov	r2, r4
 80095f8:	462b      	mov	r3, r5
 80095fa:	4620      	mov	r0, r4
 80095fc:	4629      	mov	r1, r5
 80095fe:	f7f7 fa05 	bl	8000a0c <__aeabi_dcmpun>
 8009602:	4683      	mov	fp, r0
 8009604:	bb18      	cbnz	r0, 800964e <sqrt+0x76>
 8009606:	2600      	movs	r6, #0
 8009608:	2700      	movs	r7, #0
 800960a:	4632      	mov	r2, r6
 800960c:	463b      	mov	r3, r7
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f7 f9d3 	bl	80009bc <__aeabi_dcmplt>
 8009616:	b1d0      	cbz	r0, 800964e <sqrt+0x76>
 8009618:	2301      	movs	r3, #1
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4b17      	ldr	r3, [pc, #92]	; (800967c <sqrt+0xa4>)
 800961e:	f8cd b020 	str.w	fp, [sp, #32]
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009628:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800962c:	f1ba 0f00 	cmp.w	sl, #0
 8009630:	d112      	bne.n	8009658 <sqrt+0x80>
 8009632:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009636:	4668      	mov	r0, sp
 8009638:	f000 fb3c 	bl	8009cb4 <matherr>
 800963c:	b1b8      	cbz	r0, 800966e <sqrt+0x96>
 800963e:	9b08      	ldr	r3, [sp, #32]
 8009640:	b11b      	cbz	r3, 800964a <sqrt+0x72>
 8009642:	f7fd ff59 	bl	80074f8 <__errno>
 8009646:	9b08      	ldr	r3, [sp, #32]
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800964e:	4640      	mov	r0, r8
 8009650:	4649      	mov	r1, r9
 8009652:	b00b      	add	sp, #44	; 0x2c
 8009654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009658:	4632      	mov	r2, r6
 800965a:	463b      	mov	r3, r7
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	f7f7 f864 	bl	800072c <__aeabi_ddiv>
 8009664:	f1ba 0f02 	cmp.w	sl, #2
 8009668:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800966c:	d1e3      	bne.n	8009636 <sqrt+0x5e>
 800966e:	f7fd ff43 	bl	80074f8 <__errno>
 8009672:	2321      	movs	r3, #33	; 0x21
 8009674:	6003      	str	r3, [r0, #0]
 8009676:	e7e2      	b.n	800963e <sqrt+0x66>
 8009678:	200001f4 	.word	0x200001f4
 800967c:	08009f90 	.word	0x08009f90

08009680 <__ieee754_atan2>:
 8009680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	4256      	negs	r6, r2
 8009686:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800968a:	4316      	orrs	r6, r2
 800968c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8009838 <__ieee754_atan2+0x1b8>
 8009690:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8009694:	454e      	cmp	r6, r9
 8009696:	4604      	mov	r4, r0
 8009698:	460d      	mov	r5, r1
 800969a:	469e      	mov	lr, r3
 800969c:	d808      	bhi.n	80096b0 <__ieee754_atan2+0x30>
 800969e:	4246      	negs	r6, r0
 80096a0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80096a4:	4306      	orrs	r6, r0
 80096a6:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80096aa:	454e      	cmp	r6, r9
 80096ac:	4688      	mov	r8, r1
 80096ae:	d906      	bls.n	80096be <__ieee754_atan2+0x3e>
 80096b0:	4620      	mov	r0, r4
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7f6 fd5a 	bl	800016c <__adddf3>
 80096b8:	4604      	mov	r4, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	e030      	b.n	8009720 <__ieee754_atan2+0xa0>
 80096be:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80096c2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80096c6:	4316      	orrs	r6, r2
 80096c8:	d103      	bne.n	80096d2 <__ieee754_atan2+0x52>
 80096ca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ce:	f000 b963 	b.w	8009998 <atan>
 80096d2:	179e      	asrs	r6, r3, #30
 80096d4:	f006 0602 	and.w	r6, r6, #2
 80096d8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80096dc:	ea57 0100 	orrs.w	r1, r7, r0
 80096e0:	d107      	bne.n	80096f2 <__ieee754_atan2+0x72>
 80096e2:	2e02      	cmp	r6, #2
 80096e4:	d079      	beq.n	80097da <__ieee754_atan2+0x15a>
 80096e6:	2e03      	cmp	r6, #3
 80096e8:	d11a      	bne.n	8009720 <__ieee754_atan2+0xa0>
 80096ea:	a541      	add	r5, pc, #260	; (adr r5, 80097f0 <__ieee754_atan2+0x170>)
 80096ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096f0:	e016      	b.n	8009720 <__ieee754_atan2+0xa0>
 80096f2:	ea5c 0102 	orrs.w	r1, ip, r2
 80096f6:	d106      	bne.n	8009706 <__ieee754_atan2+0x86>
 80096f8:	f1b8 0f00 	cmp.w	r8, #0
 80096fc:	da71      	bge.n	80097e2 <__ieee754_atan2+0x162>
 80096fe:	a53e      	add	r5, pc, #248	; (adr r5, 80097f8 <__ieee754_atan2+0x178>)
 8009700:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009704:	e00c      	b.n	8009720 <__ieee754_atan2+0xa0>
 8009706:	45cc      	cmp	ip, r9
 8009708:	d123      	bne.n	8009752 <__ieee754_atan2+0xd2>
 800970a:	4567      	cmp	r7, ip
 800970c:	d114      	bne.n	8009738 <__ieee754_atan2+0xb8>
 800970e:	2e02      	cmp	r6, #2
 8009710:	d00a      	beq.n	8009728 <__ieee754_atan2+0xa8>
 8009712:	2e03      	cmp	r6, #3
 8009714:	d00c      	beq.n	8009730 <__ieee754_atan2+0xb0>
 8009716:	2e01      	cmp	r6, #1
 8009718:	d15b      	bne.n	80097d2 <__ieee754_atan2+0x152>
 800971a:	a539      	add	r5, pc, #228	; (adr r5, 8009800 <__ieee754_atan2+0x180>)
 800971c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009720:	4620      	mov	r0, r4
 8009722:	4629      	mov	r1, r5
 8009724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009728:	a537      	add	r5, pc, #220	; (adr r5, 8009808 <__ieee754_atan2+0x188>)
 800972a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800972e:	e7f7      	b.n	8009720 <__ieee754_atan2+0xa0>
 8009730:	a537      	add	r5, pc, #220	; (adr r5, 8009810 <__ieee754_atan2+0x190>)
 8009732:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009736:	e7f3      	b.n	8009720 <__ieee754_atan2+0xa0>
 8009738:	2e02      	cmp	r6, #2
 800973a:	d04e      	beq.n	80097da <__ieee754_atan2+0x15a>
 800973c:	2e03      	cmp	r6, #3
 800973e:	d0d4      	beq.n	80096ea <__ieee754_atan2+0x6a>
 8009740:	2e01      	cmp	r6, #1
 8009742:	f04f 0400 	mov.w	r4, #0
 8009746:	d102      	bne.n	800974e <__ieee754_atan2+0xce>
 8009748:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800974c:	e7e8      	b.n	8009720 <__ieee754_atan2+0xa0>
 800974e:	2500      	movs	r5, #0
 8009750:	e7e6      	b.n	8009720 <__ieee754_atan2+0xa0>
 8009752:	454f      	cmp	r7, r9
 8009754:	d0d0      	beq.n	80096f8 <__ieee754_atan2+0x78>
 8009756:	eba7 070c 	sub.w	r7, r7, ip
 800975a:	153f      	asrs	r7, r7, #20
 800975c:	2f3c      	cmp	r7, #60	; 0x3c
 800975e:	dc1e      	bgt.n	800979e <__ieee754_atan2+0x11e>
 8009760:	2b00      	cmp	r3, #0
 8009762:	da01      	bge.n	8009768 <__ieee754_atan2+0xe8>
 8009764:	373c      	adds	r7, #60	; 0x3c
 8009766:	db1e      	blt.n	80097a6 <__ieee754_atan2+0x126>
 8009768:	4620      	mov	r0, r4
 800976a:	4629      	mov	r1, r5
 800976c:	f7f6 ffde 	bl	800072c <__aeabi_ddiv>
 8009770:	f000 fa9c 	bl	8009cac <fabs>
 8009774:	f000 f910 	bl	8009998 <atan>
 8009778:	4604      	mov	r4, r0
 800977a:	460d      	mov	r5, r1
 800977c:	2e01      	cmp	r6, #1
 800977e:	d015      	beq.n	80097ac <__ieee754_atan2+0x12c>
 8009780:	2e02      	cmp	r6, #2
 8009782:	d017      	beq.n	80097b4 <__ieee754_atan2+0x134>
 8009784:	2e00      	cmp	r6, #0
 8009786:	d0cb      	beq.n	8009720 <__ieee754_atan2+0xa0>
 8009788:	a323      	add	r3, pc, #140	; (adr r3, 8009818 <__ieee754_atan2+0x198>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	4620      	mov	r0, r4
 8009790:	4629      	mov	r1, r5
 8009792:	f7f6 fce9 	bl	8000168 <__aeabi_dsub>
 8009796:	a322      	add	r3, pc, #136	; (adr r3, 8009820 <__ieee754_atan2+0x1a0>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	e016      	b.n	80097cc <__ieee754_atan2+0x14c>
 800979e:	a522      	add	r5, pc, #136	; (adr r5, 8009828 <__ieee754_atan2+0x1a8>)
 80097a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80097a4:	e7ea      	b.n	800977c <__ieee754_atan2+0xfc>
 80097a6:	2400      	movs	r4, #0
 80097a8:	2500      	movs	r5, #0
 80097aa:	e7e7      	b.n	800977c <__ieee754_atan2+0xfc>
 80097ac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80097b0:	461d      	mov	r5, r3
 80097b2:	e7b5      	b.n	8009720 <__ieee754_atan2+0xa0>
 80097b4:	a318      	add	r3, pc, #96	; (adr r3, 8009818 <__ieee754_atan2+0x198>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	4620      	mov	r0, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	f7f6 fcd3 	bl	8000168 <__aeabi_dsub>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	a116      	add	r1, pc, #88	; (adr r1, 8009820 <__ieee754_atan2+0x1a0>)
 80097c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097cc:	f7f6 fccc 	bl	8000168 <__aeabi_dsub>
 80097d0:	e772      	b.n	80096b8 <__ieee754_atan2+0x38>
 80097d2:	a517      	add	r5, pc, #92	; (adr r5, 8009830 <__ieee754_atan2+0x1b0>)
 80097d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80097d8:	e7a2      	b.n	8009720 <__ieee754_atan2+0xa0>
 80097da:	a511      	add	r5, pc, #68	; (adr r5, 8009820 <__ieee754_atan2+0x1a0>)
 80097dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80097e0:	e79e      	b.n	8009720 <__ieee754_atan2+0xa0>
 80097e2:	a511      	add	r5, pc, #68	; (adr r5, 8009828 <__ieee754_atan2+0x1a8>)
 80097e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80097e8:	e79a      	b.n	8009720 <__ieee754_atan2+0xa0>
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w
 80097f0:	54442d18 	.word	0x54442d18
 80097f4:	c00921fb 	.word	0xc00921fb
 80097f8:	54442d18 	.word	0x54442d18
 80097fc:	bff921fb 	.word	0xbff921fb
 8009800:	54442d18 	.word	0x54442d18
 8009804:	bfe921fb 	.word	0xbfe921fb
 8009808:	7f3321d2 	.word	0x7f3321d2
 800980c:	4002d97c 	.word	0x4002d97c
 8009810:	7f3321d2 	.word	0x7f3321d2
 8009814:	c002d97c 	.word	0xc002d97c
 8009818:	33145c07 	.word	0x33145c07
 800981c:	3ca1a626 	.word	0x3ca1a626
 8009820:	54442d18 	.word	0x54442d18
 8009824:	400921fb 	.word	0x400921fb
 8009828:	54442d18 	.word	0x54442d18
 800982c:	3ff921fb 	.word	0x3ff921fb
 8009830:	54442d18 	.word	0x54442d18
 8009834:	3fe921fb 	.word	0x3fe921fb
 8009838:	7ff00000 	.word	0x7ff00000

0800983c <__ieee754_sqrt>:
 800983c:	4b54      	ldr	r3, [pc, #336]	; (8009990 <__ieee754_sqrt+0x154>)
 800983e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009842:	438b      	bics	r3, r1
 8009844:	4606      	mov	r6, r0
 8009846:	460d      	mov	r5, r1
 8009848:	460a      	mov	r2, r1
 800984a:	460c      	mov	r4, r1
 800984c:	d10f      	bne.n	800986e <__ieee754_sqrt+0x32>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	f7f6 fe41 	bl	80004d8 <__aeabi_dmul>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4630      	mov	r0, r6
 800985c:	4629      	mov	r1, r5
 800985e:	f7f6 fc85 	bl	800016c <__adddf3>
 8009862:	4606      	mov	r6, r0
 8009864:	460d      	mov	r5, r1
 8009866:	4630      	mov	r0, r6
 8009868:	4629      	mov	r1, r5
 800986a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986e:	2900      	cmp	r1, #0
 8009870:	4607      	mov	r7, r0
 8009872:	4603      	mov	r3, r0
 8009874:	dc0e      	bgt.n	8009894 <__ieee754_sqrt+0x58>
 8009876:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800987a:	ea5c 0707 	orrs.w	r7, ip, r7
 800987e:	d0f2      	beq.n	8009866 <__ieee754_sqrt+0x2a>
 8009880:	b141      	cbz	r1, 8009894 <__ieee754_sqrt+0x58>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	f7f6 fc6f 	bl	8000168 <__aeabi_dsub>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	f7f6 ff4d 	bl	800072c <__aeabi_ddiv>
 8009892:	e7e6      	b.n	8009862 <__ieee754_sqrt+0x26>
 8009894:	1512      	asrs	r2, r2, #20
 8009896:	d074      	beq.n	8009982 <__ieee754_sqrt+0x146>
 8009898:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800989c:	07d5      	lsls	r5, r2, #31
 800989e:	f04f 0500 	mov.w	r5, #0
 80098a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80098a6:	bf48      	it	mi
 80098a8:	0fd9      	lsrmi	r1, r3, #31
 80098aa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80098ae:	bf44      	itt	mi
 80098b0:	005b      	lslmi	r3, r3, #1
 80098b2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80098b6:	1051      	asrs	r1, r2, #1
 80098b8:	0fda      	lsrs	r2, r3, #31
 80098ba:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80098be:	4628      	mov	r0, r5
 80098c0:	2216      	movs	r2, #22
 80098c2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80098c6:	005b      	lsls	r3, r3, #1
 80098c8:	1987      	adds	r7, r0, r6
 80098ca:	42a7      	cmp	r7, r4
 80098cc:	bfde      	ittt	le
 80098ce:	19b8      	addle	r0, r7, r6
 80098d0:	1be4      	suble	r4, r4, r7
 80098d2:	19ad      	addle	r5, r5, r6
 80098d4:	0fdf      	lsrs	r7, r3, #31
 80098d6:	3a01      	subs	r2, #1
 80098d8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80098dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80098e4:	d1f0      	bne.n	80098c8 <__ieee754_sqrt+0x8c>
 80098e6:	f04f 0c20 	mov.w	ip, #32
 80098ea:	4696      	mov	lr, r2
 80098ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80098f0:	4284      	cmp	r4, r0
 80098f2:	eb06 070e 	add.w	r7, r6, lr
 80098f6:	dc02      	bgt.n	80098fe <__ieee754_sqrt+0xc2>
 80098f8:	d112      	bne.n	8009920 <__ieee754_sqrt+0xe4>
 80098fa:	429f      	cmp	r7, r3
 80098fc:	d810      	bhi.n	8009920 <__ieee754_sqrt+0xe4>
 80098fe:	2f00      	cmp	r7, #0
 8009900:	eb07 0e06 	add.w	lr, r7, r6
 8009904:	da42      	bge.n	800998c <__ieee754_sqrt+0x150>
 8009906:	f1be 0f00 	cmp.w	lr, #0
 800990a:	db3f      	blt.n	800998c <__ieee754_sqrt+0x150>
 800990c:	f100 0801 	add.w	r8, r0, #1
 8009910:	1a24      	subs	r4, r4, r0
 8009912:	4640      	mov	r0, r8
 8009914:	429f      	cmp	r7, r3
 8009916:	bf88      	it	hi
 8009918:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800991c:	1bdb      	subs	r3, r3, r7
 800991e:	4432      	add	r2, r6
 8009920:	0064      	lsls	r4, r4, #1
 8009922:	f1bc 0c01 	subs.w	ip, ip, #1
 8009926:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800992a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800992e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009932:	d1dd      	bne.n	80098f0 <__ieee754_sqrt+0xb4>
 8009934:	4323      	orrs	r3, r4
 8009936:	d006      	beq.n	8009946 <__ieee754_sqrt+0x10a>
 8009938:	1c54      	adds	r4, r2, #1
 800993a:	bf0b      	itete	eq
 800993c:	4662      	moveq	r2, ip
 800993e:	3201      	addne	r2, #1
 8009940:	3501      	addeq	r5, #1
 8009942:	f022 0201 	bicne.w	r2, r2, #1
 8009946:	106b      	asrs	r3, r5, #1
 8009948:	0852      	lsrs	r2, r2, #1
 800994a:	07e8      	lsls	r0, r5, #31
 800994c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009950:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009954:	bf48      	it	mi
 8009956:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800995a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800995e:	4616      	mov	r6, r2
 8009960:	e781      	b.n	8009866 <__ieee754_sqrt+0x2a>
 8009962:	0adc      	lsrs	r4, r3, #11
 8009964:	3915      	subs	r1, #21
 8009966:	055b      	lsls	r3, r3, #21
 8009968:	2c00      	cmp	r4, #0
 800996a:	d0fa      	beq.n	8009962 <__ieee754_sqrt+0x126>
 800996c:	02e6      	lsls	r6, r4, #11
 800996e:	d50a      	bpl.n	8009986 <__ieee754_sqrt+0x14a>
 8009970:	f1c2 0020 	rsb	r0, r2, #32
 8009974:	fa23 f000 	lsr.w	r0, r3, r0
 8009978:	1e55      	subs	r5, r2, #1
 800997a:	4093      	lsls	r3, r2
 800997c:	4304      	orrs	r4, r0
 800997e:	1b4a      	subs	r2, r1, r5
 8009980:	e78a      	b.n	8009898 <__ieee754_sqrt+0x5c>
 8009982:	4611      	mov	r1, r2
 8009984:	e7f0      	b.n	8009968 <__ieee754_sqrt+0x12c>
 8009986:	0064      	lsls	r4, r4, #1
 8009988:	3201      	adds	r2, #1
 800998a:	e7ef      	b.n	800996c <__ieee754_sqrt+0x130>
 800998c:	4680      	mov	r8, r0
 800998e:	e7bf      	b.n	8009910 <__ieee754_sqrt+0xd4>
 8009990:	7ff00000 	.word	0x7ff00000
 8009994:	00000000 	.word	0x00000000

08009998 <atan>:
 8009998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	4bb6      	ldr	r3, [pc, #728]	; (8009c78 <atan+0x2e0>)
 800999e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80099a2:	429e      	cmp	r6, r3
 80099a4:	4604      	mov	r4, r0
 80099a6:	460d      	mov	r5, r1
 80099a8:	468b      	mov	fp, r1
 80099aa:	dd17      	ble.n	80099dc <atan+0x44>
 80099ac:	4bb3      	ldr	r3, [pc, #716]	; (8009c7c <atan+0x2e4>)
 80099ae:	429e      	cmp	r6, r3
 80099b0:	dc01      	bgt.n	80099b6 <atan+0x1e>
 80099b2:	d109      	bne.n	80099c8 <atan+0x30>
 80099b4:	b140      	cbz	r0, 80099c8 <atan+0x30>
 80099b6:	4622      	mov	r2, r4
 80099b8:	462b      	mov	r3, r5
 80099ba:	4620      	mov	r0, r4
 80099bc:	4629      	mov	r1, r5
 80099be:	f7f6 fbd5 	bl	800016c <__adddf3>
 80099c2:	4604      	mov	r4, r0
 80099c4:	460d      	mov	r5, r1
 80099c6:	e005      	b.n	80099d4 <atan+0x3c>
 80099c8:	f1bb 0f00 	cmp.w	fp, #0
 80099cc:	4cac      	ldr	r4, [pc, #688]	; (8009c80 <atan+0x2e8>)
 80099ce:	f340 8121 	ble.w	8009c14 <atan+0x27c>
 80099d2:	4dac      	ldr	r5, [pc, #688]	; (8009c84 <atan+0x2ec>)
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099dc:	4baa      	ldr	r3, [pc, #680]	; (8009c88 <atan+0x2f0>)
 80099de:	429e      	cmp	r6, r3
 80099e0:	dc11      	bgt.n	8009a06 <atan+0x6e>
 80099e2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80099e6:	429e      	cmp	r6, r3
 80099e8:	dc0a      	bgt.n	8009a00 <atan+0x68>
 80099ea:	a38b      	add	r3, pc, #556	; (adr r3, 8009c18 <atan+0x280>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f7f6 fbbc 	bl	800016c <__adddf3>
 80099f4:	2200      	movs	r2, #0
 80099f6:	4ba5      	ldr	r3, [pc, #660]	; (8009c8c <atan+0x2f4>)
 80099f8:	f7f6 fffe 	bl	80009f8 <__aeabi_dcmpgt>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d1e9      	bne.n	80099d4 <atan+0x3c>
 8009a00:	f04f 3aff 	mov.w	sl, #4294967295
 8009a04:	e027      	b.n	8009a56 <atan+0xbe>
 8009a06:	f000 f951 	bl	8009cac <fabs>
 8009a0a:	4ba1      	ldr	r3, [pc, #644]	; (8009c90 <atan+0x2f8>)
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	429e      	cmp	r6, r3
 8009a10:	460d      	mov	r5, r1
 8009a12:	f300 80b8 	bgt.w	8009b86 <atan+0x1ee>
 8009a16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009a1a:	429e      	cmp	r6, r3
 8009a1c:	f300 809c 	bgt.w	8009b58 <atan+0x1c0>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	f7f6 fba2 	bl	800016c <__adddf3>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4b98      	ldr	r3, [pc, #608]	; (8009c8c <atan+0x2f4>)
 8009a2c:	f7f6 fb9c 	bl	8000168 <__aeabi_dsub>
 8009a30:	2200      	movs	r2, #0
 8009a32:	4606      	mov	r6, r0
 8009a34:	460f      	mov	r7, r1
 8009a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	f7f6 fb95 	bl	800016c <__adddf3>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4630      	mov	r0, r6
 8009a48:	4639      	mov	r1, r7
 8009a4a:	f7f6 fe6f 	bl	800072c <__aeabi_ddiv>
 8009a4e:	f04f 0a00 	mov.w	sl, #0
 8009a52:	4604      	mov	r4, r0
 8009a54:	460d      	mov	r5, r1
 8009a56:	4622      	mov	r2, r4
 8009a58:	462b      	mov	r3, r5
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	f7f6 fd3b 	bl	80004d8 <__aeabi_dmul>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4680      	mov	r8, r0
 8009a68:	4689      	mov	r9, r1
 8009a6a:	f7f6 fd35 	bl	80004d8 <__aeabi_dmul>
 8009a6e:	a36c      	add	r3, pc, #432	; (adr r3, 8009c20 <atan+0x288>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	4606      	mov	r6, r0
 8009a76:	460f      	mov	r7, r1
 8009a78:	f7f6 fd2e 	bl	80004d8 <__aeabi_dmul>
 8009a7c:	a36a      	add	r3, pc, #424	; (adr r3, 8009c28 <atan+0x290>)
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f7f6 fb73 	bl	800016c <__adddf3>
 8009a86:	4632      	mov	r2, r6
 8009a88:	463b      	mov	r3, r7
 8009a8a:	f7f6 fd25 	bl	80004d8 <__aeabi_dmul>
 8009a8e:	a368      	add	r3, pc, #416	; (adr r3, 8009c30 <atan+0x298>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f7f6 fb6a 	bl	800016c <__adddf3>
 8009a98:	4632      	mov	r2, r6
 8009a9a:	463b      	mov	r3, r7
 8009a9c:	f7f6 fd1c 	bl	80004d8 <__aeabi_dmul>
 8009aa0:	a365      	add	r3, pc, #404	; (adr r3, 8009c38 <atan+0x2a0>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f6 fb61 	bl	800016c <__adddf3>
 8009aaa:	4632      	mov	r2, r6
 8009aac:	463b      	mov	r3, r7
 8009aae:	f7f6 fd13 	bl	80004d8 <__aeabi_dmul>
 8009ab2:	a363      	add	r3, pc, #396	; (adr r3, 8009c40 <atan+0x2a8>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	f7f6 fb58 	bl	800016c <__adddf3>
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	f7f6 fd0a 	bl	80004d8 <__aeabi_dmul>
 8009ac4:	a360      	add	r3, pc, #384	; (adr r3, 8009c48 <atan+0x2b0>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f7f6 fb4f 	bl	800016c <__adddf3>
 8009ace:	4642      	mov	r2, r8
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	f7f6 fd01 	bl	80004d8 <__aeabi_dmul>
 8009ad6:	a35e      	add	r3, pc, #376	; (adr r3, 8009c50 <atan+0x2b8>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	4680      	mov	r8, r0
 8009ade:	4689      	mov	r9, r1
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	f7f6 fcf8 	bl	80004d8 <__aeabi_dmul>
 8009ae8:	a35b      	add	r3, pc, #364	; (adr r3, 8009c58 <atan+0x2c0>)
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f7f6 fb3b 	bl	8000168 <__aeabi_dsub>
 8009af2:	4632      	mov	r2, r6
 8009af4:	463b      	mov	r3, r7
 8009af6:	f7f6 fcef 	bl	80004d8 <__aeabi_dmul>
 8009afa:	a359      	add	r3, pc, #356	; (adr r3, 8009c60 <atan+0x2c8>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f7f6 fb32 	bl	8000168 <__aeabi_dsub>
 8009b04:	4632      	mov	r2, r6
 8009b06:	463b      	mov	r3, r7
 8009b08:	f7f6 fce6 	bl	80004d8 <__aeabi_dmul>
 8009b0c:	a356      	add	r3, pc, #344	; (adr r3, 8009c68 <atan+0x2d0>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fb29 	bl	8000168 <__aeabi_dsub>
 8009b16:	4632      	mov	r2, r6
 8009b18:	463b      	mov	r3, r7
 8009b1a:	f7f6 fcdd 	bl	80004d8 <__aeabi_dmul>
 8009b1e:	a354      	add	r3, pc, #336	; (adr r3, 8009c70 <atan+0x2d8>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fb20 	bl	8000168 <__aeabi_dsub>
 8009b28:	4632      	mov	r2, r6
 8009b2a:	463b      	mov	r3, r7
 8009b2c:	f7f6 fcd4 	bl	80004d8 <__aeabi_dmul>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f6 fb18 	bl	800016c <__adddf3>
 8009b3c:	4622      	mov	r2, r4
 8009b3e:	462b      	mov	r3, r5
 8009b40:	f7f6 fcca 	bl	80004d8 <__aeabi_dmul>
 8009b44:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	d144      	bne.n	8009bd8 <atan+0x240>
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fb09 	bl	8000168 <__aeabi_dsub>
 8009b56:	e734      	b.n	80099c2 <atan+0x2a>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4b4c      	ldr	r3, [pc, #304]	; (8009c8c <atan+0x2f4>)
 8009b5c:	f7f6 fb04 	bl	8000168 <__aeabi_dsub>
 8009b60:	2200      	movs	r2, #0
 8009b62:	4606      	mov	r6, r0
 8009b64:	460f      	mov	r7, r1
 8009b66:	4b49      	ldr	r3, [pc, #292]	; (8009c8c <atan+0x2f4>)
 8009b68:	4620      	mov	r0, r4
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	f7f6 fafe 	bl	800016c <__adddf3>
 8009b70:	4602      	mov	r2, r0
 8009b72:	460b      	mov	r3, r1
 8009b74:	4630      	mov	r0, r6
 8009b76:	4639      	mov	r1, r7
 8009b78:	f7f6 fdd8 	bl	800072c <__aeabi_ddiv>
 8009b7c:	f04f 0a01 	mov.w	sl, #1
 8009b80:	4604      	mov	r4, r0
 8009b82:	460d      	mov	r5, r1
 8009b84:	e767      	b.n	8009a56 <atan+0xbe>
 8009b86:	4b43      	ldr	r3, [pc, #268]	; (8009c94 <atan+0x2fc>)
 8009b88:	429e      	cmp	r6, r3
 8009b8a:	dc1a      	bgt.n	8009bc2 <atan+0x22a>
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4b42      	ldr	r3, [pc, #264]	; (8009c98 <atan+0x300>)
 8009b90:	f7f6 faea 	bl	8000168 <__aeabi_dsub>
 8009b94:	2200      	movs	r2, #0
 8009b96:	4606      	mov	r6, r0
 8009b98:	460f      	mov	r7, r1
 8009b9a:	4b3f      	ldr	r3, [pc, #252]	; (8009c98 <atan+0x300>)
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f7f6 fc9a 	bl	80004d8 <__aeabi_dmul>
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	4b39      	ldr	r3, [pc, #228]	; (8009c8c <atan+0x2f4>)
 8009ba8:	f7f6 fae0 	bl	800016c <__adddf3>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fdba 	bl	800072c <__aeabi_ddiv>
 8009bb8:	f04f 0a02 	mov.w	sl, #2
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	e749      	b.n	8009a56 <atan+0xbe>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	4934      	ldr	r1, [pc, #208]	; (8009c9c <atan+0x304>)
 8009bca:	f7f6 fdaf 	bl	800072c <__aeabi_ddiv>
 8009bce:	f04f 0a03 	mov.w	sl, #3
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	460d      	mov	r5, r1
 8009bd6:	e73e      	b.n	8009a56 <atan+0xbe>
 8009bd8:	4b31      	ldr	r3, [pc, #196]	; (8009ca0 <atan+0x308>)
 8009bda:	4e32      	ldr	r6, [pc, #200]	; (8009ca4 <atan+0x30c>)
 8009bdc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009be0:	4456      	add	r6, sl
 8009be2:	449a      	add	sl, r3
 8009be4:	e9da 2300 	ldrd	r2, r3, [sl]
 8009be8:	f7f6 fabe 	bl	8000168 <__aeabi_dsub>
 8009bec:	4622      	mov	r2, r4
 8009bee:	462b      	mov	r3, r5
 8009bf0:	f7f6 faba 	bl	8000168 <__aeabi_dsub>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009bfc:	f7f6 fab4 	bl	8000168 <__aeabi_dsub>
 8009c00:	f1bb 0f00 	cmp.w	fp, #0
 8009c04:	4604      	mov	r4, r0
 8009c06:	460d      	mov	r5, r1
 8009c08:	f6bf aee4 	bge.w	80099d4 <atan+0x3c>
 8009c0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c10:	461d      	mov	r5, r3
 8009c12:	e6df      	b.n	80099d4 <atan+0x3c>
 8009c14:	4d24      	ldr	r5, [pc, #144]	; (8009ca8 <atan+0x310>)
 8009c16:	e6dd      	b.n	80099d4 <atan+0x3c>
 8009c18:	8800759c 	.word	0x8800759c
 8009c1c:	7e37e43c 	.word	0x7e37e43c
 8009c20:	e322da11 	.word	0xe322da11
 8009c24:	3f90ad3a 	.word	0x3f90ad3a
 8009c28:	24760deb 	.word	0x24760deb
 8009c2c:	3fa97b4b 	.word	0x3fa97b4b
 8009c30:	a0d03d51 	.word	0xa0d03d51
 8009c34:	3fb10d66 	.word	0x3fb10d66
 8009c38:	c54c206e 	.word	0xc54c206e
 8009c3c:	3fb745cd 	.word	0x3fb745cd
 8009c40:	920083ff 	.word	0x920083ff
 8009c44:	3fc24924 	.word	0x3fc24924
 8009c48:	5555550d 	.word	0x5555550d
 8009c4c:	3fd55555 	.word	0x3fd55555
 8009c50:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c54:	bfa2b444 	.word	0xbfa2b444
 8009c58:	52defd9a 	.word	0x52defd9a
 8009c5c:	3fadde2d 	.word	0x3fadde2d
 8009c60:	af749a6d 	.word	0xaf749a6d
 8009c64:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c68:	fe231671 	.word	0xfe231671
 8009c6c:	3fbc71c6 	.word	0x3fbc71c6
 8009c70:	9998ebc4 	.word	0x9998ebc4
 8009c74:	3fc99999 	.word	0x3fc99999
 8009c78:	440fffff 	.word	0x440fffff
 8009c7c:	7ff00000 	.word	0x7ff00000
 8009c80:	54442d18 	.word	0x54442d18
 8009c84:	3ff921fb 	.word	0x3ff921fb
 8009c88:	3fdbffff 	.word	0x3fdbffff
 8009c8c:	3ff00000 	.word	0x3ff00000
 8009c90:	3ff2ffff 	.word	0x3ff2ffff
 8009c94:	40037fff 	.word	0x40037fff
 8009c98:	3ff80000 	.word	0x3ff80000
 8009c9c:	bff00000 	.word	0xbff00000
 8009ca0:	08009fb8 	.word	0x08009fb8
 8009ca4:	08009f98 	.word	0x08009f98
 8009ca8:	bff921fb 	.word	0xbff921fb

08009cac <fabs>:
 8009cac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4770      	bx	lr

08009cb4 <matherr>:
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	4770      	bx	lr

08009cb8 <_init>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	bf00      	nop
 8009cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cbe:	bc08      	pop	{r3}
 8009cc0:	469e      	mov	lr, r3
 8009cc2:	4770      	bx	lr

08009cc4 <_fini>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	bf00      	nop
 8009cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cca:	bc08      	pop	{r3}
 8009ccc:	469e      	mov	lr, r3
 8009cce:	4770      	bx	lr
